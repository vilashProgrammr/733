{
  "version": 3,
  "file": "ngx-logger.js",
  "sources": [
    "ng://ngx-logger/out/lib/testing/logger-testing.module.ts",
    "ng://ngx-logger/out/lib/testing/http.service.mock.ts",
    "ng://ngx-logger/out/lib/testing/custom-logger.service.mock.ts",
    "ng://ngx-logger/out/lib/testing/logger.service.mock.ts",
    "ng://ngx-logger/out/lib/logger.module.ts",
    "ng://ngx-logger/out/lib/types/ngx-log.interface.ts",
    "ng://ngx-logger/out/lib/logger-monitor.ts",
    "ng://ngx-logger/out/lib/custom-logger.service.ts",
    "ng://ngx-logger/out/lib/logger.service.ts",
    "ng://ngx-logger/out/lib/utils/logger.utils.ts",
    "ng://ngx-logger/out/lib/config.engine.ts",
    "ng://ngx-logger/out/lib/logger.config.ts",
    "ng://ngx-logger/out/lib/types/logger-level.enum.ts",
    "ng://ngx-logger/out/lib/http.service.ts"
  ],
  "sourcesContent": [
    "import {NgModule} from '@angular/core';\n\nimport {NGXLogger} from '../logger.service';\nimport {NGXLoggerMock} from './logger.service.mock';\nimport {NGXLoggerHttpService} from '../http.service';\nimport {NGXLoggerHttpServiceMock} from './http.service.mock';\nimport {CustomNGXLoggerService} from '../custom-logger.service';\nimport {CustomNGXLoggerServiceMock} from './custom-logger.service.mock';\n\n@NgModule({\n  providers: [\n    {provide: NGXLogger, useClass: NGXLoggerMock},\n    {provide: NGXLoggerHttpService, useClass: NGXLoggerHttpServiceMock},\n    {provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock},\n  ]\n})\nexport class LoggerTestingModule {\n}\n",
    "import {Observable, of} from 'rxjs';\n\nexport class NGXLoggerHttpServiceMock {\n  constructor() {\n\n  }\n\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\n    return of({})\n  }\n}\n",
    "import {NGXLoggerMock} from './logger.service.mock';\n\n/**\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\n */\nexport class CustomNGXLoggerServiceMock {\n\n  constructor() {\n  }\n\n  create(): NGXLoggerMock {\n    // you can inject your own httpService or use the default,\n    return new NGXLoggerMock();\n  }\n}\n\n\n",
    "import {HttpHeaders, HttpParams} from '@angular/common/http';\nimport {NGXLoggerMonitor} from '../logger-monitor';\nimport {LoggerConfig} from '../logger.config';\n\nexport class NGXLoggerMock {\n\n  constructor() {\n  }\n\n  trace(message: any, ...additional: any[]) {\n  }\n\n  debug(message: any, ...additional: any[]) {\n  }\n\n  info(message: any, ...additional: any[]) {\n  }\n\n  log(message: any, ...additional: any[]) {\n  }\n\n  warn(message: any, ...additional: any[]) {\n  }\n\n  error(message: any, ...additional: any[]) {\n  }\n\n  fatal(message: any, ...additional: any[]) {\n  }\n\n  updateConfig(config: any) {\n\n  }\n\n  setCustomHttpHeaders(headers: HttpHeaders) {\n  }\n\n  setCustomParams(params: HttpParams) {\n  }\n\n  registerMonitor(monitor: NGXLoggerMonitor) {\n  }\n\n  getConfigSnapshot(): LoggerConfig {\n    return new LoggerConfig();\n  }\n}\n",
    "import {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {NGXLogger} from './logger.service';\nimport {LoggerConfig} from './logger.config';\nimport {CustomNGXLoggerService} from './custom-logger.service';\nimport {NGXLoggerHttpService} from './http.service';\n\nexport * from './logger.service';\n\nexport * from './logger.config';\n\nexport * from './custom-logger.service';\n\nexport * from './logger-monitor';\n\nexport * from './http.service';\n\nexport * from './utils/logger.utils';\nexport * from './types/logger-level.enum';\nexport * from './types/ngx-log.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    NGXLogger,\n    NGXLoggerHttpService,\n    CustomNGXLoggerService\n  ]\n})\nexport class LoggerModule {\n  static forRoot(config: LoggerConfig | null | undefined): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        {provide: LoggerConfig, useValue: config || {}},\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService\n      ]\n    };\n  }\n  static forChild(): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService\n      ]\n    };\n  }\n}\n",
    "import {NgxLoggerLevel} from './logger-level.enum';\n\nexport class NGXLogInterface {\n  level: NgxLoggerLevel;\n  timestamp: string;\n  fileName: string;\n  lineNumber: string;\n  message: string;\n  additional: any[];\n}\n",
    "import {NGXLogInterface} from './types/ngx-log.interface';\n\nexport abstract class NGXLoggerMonitor {\n  abstract onLog(logObject: NGXLogInterface): void;\n}\n",
    "import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\n\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXLogger} from './logger.service';\nimport {NGXLoggerMonitor} from './logger-monitor';\n\n\n/**\n * CustomNGXLoggerService is designed to allow users to get a new instance of a logger\n */\n@Injectable()\nexport class CustomNGXLoggerService {\n\n  constructor(private readonly httpService: NGXLoggerHttpService,\n              @Inject(PLATFORM_ID) private readonly platformId) {\n  }\n\n  create(config: LoggerConfig, httpService?: NGXLoggerHttpService, logMonitor?: NGXLoggerMonitor): NGXLogger {\n    // you can inject your own httpService or use the default,\n    const logger = new NGXLogger(httpService || this.httpService, config, this.platformId);\n\n    if (logMonitor) {\n      logger.registerMonitor(logMonitor);\n    }\n\n    return logger;\n  }\n}\n\n\n",
    "import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpErrorResponse, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { NGXLoggerHttpService } from './http.service';\nimport { NgxLoggerLevel } from './types/logger-level.enum';\nimport { LoggerConfig } from './logger.config';\nimport { NGXLoggerConfigEngine } from './config.engine';\nimport { NGXLoggerUtils } from './utils/logger.utils';\nimport { NGXLoggerMonitor } from './logger-monitor';\nimport { NGXLogInterface } from './types/ngx-log.interface';\n\nexport const Levels = [\n  'TRACE',\n  'DEBUG',\n  'INFO',\n  'LOG',\n  'WARN',\n  'ERROR',\n  'FATAL',\n  'OFF'\n];\n\n\n@Injectable()\nexport class NGXLogger {\n  private readonly _isIE: boolean;\n  private readonly _logFunc: Function;\n  private config: NGXLoggerConfigEngine;\n  private _customHttpHeaders: HttpHeaders;\n  private _customParams: HttpParams;\n\n  private _loggerMonitor: NGXLoggerMonitor;\n\n  constructor(private readonly httpService: NGXLoggerHttpService, loggerConfig: LoggerConfig,\n    @Inject(PLATFORM_ID) private readonly platformId) {\n    this._isIE = isPlatformBrowser(platformId) &&\n      !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\n\n    // each instance of the logger should have their own config engine\n    this.config = new NGXLoggerConfigEngine(loggerConfig);\n\n    this._logFunc = this._isIE ? this._logIE.bind(this) : this._logModern.bind(this);\n\n  }\n\n  public trace(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.TRACE, message, additional);\n  }\n\n  public debug(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.DEBUG, message, additional);\n  }\n\n  public info(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.INFO, message, additional);\n  }\n\n  public log(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.LOG, message, additional);\n  }\n\n  public warn(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.WARN, message, additional);\n  }\n\n  public error(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.ERROR, message, additional);\n  }\n\n  public fatal(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.FATAL, message, additional);\n  }\n\n  public setCustomHttpHeaders(headers: HttpHeaders) {\n    this._customHttpHeaders = headers;\n  }\n\n  public setCustomParams(params: HttpParams) {\n    this._customParams = params;\n  }\n\n  public registerMonitor(monitor: NGXLoggerMonitor) {\n    this._loggerMonitor = monitor;\n  }\n\n  public updateConfig(config: LoggerConfig) {\n    this.config.updateConfig(config);\n  }\n\n  public getConfigSnapshot(): LoggerConfig {\n    return this.config.getConfig();\n  }\n\n  private _logIE(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    // Coloring doesn't work in IE\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        console.error(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`${metaString} `, message, ...additional);\n        break;\n      default:\n        console.log(`${metaString} `, message, ...additional);\n    }\n  }\n\n  private _logModern(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    const color = NGXLoggerUtils.getColor(level);\n\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        console.error(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`%c${metaString}`, `color:${color}`, message, ...additional);\n        break;\n      //  Disabling console.trace since the stack trace is not helpful. it is showing the stack trace of\n      // the console.trace statement\n      // case NgxLoggerLevel.TRACE:\n      //   console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);\n      //   break;\n\n      //  Disabling console.debug, because Has this hidden by default.\n      // case NgxLoggerLevel.DEBUG:\n      //   console.debug(`%c${metaString}`, `color:${color}`, message, ...additional);\n      //   break;\n      default:\n        console.log(`%c${metaString}`, `color:${color}`, message, ...additional);\n    }\n  }\n\n  private _log(level: NgxLoggerLevel, message, additional: any[] = [], logOnServer: boolean = true): void {\n    const config = this.config.getConfig();\n    const isLog2Server = logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel;\n    const isLogLevelEnabled = level >= config.level;\n\n    if (!(message && (isLog2Server || isLogLevelEnabled))) {\n      return;\n    }\n\n    const logLevelString = Levels[level];\n\n    message = NGXLoggerUtils.prepareMessage(message);\n\n    // only use validated parameters for HTTP requests\n    const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);\n\n    const timestamp = new Date().toISOString();\n\n    const callerDetails = NGXLoggerUtils.getCallerDetails();\n\n    const logObject: NGXLogInterface = {\n      message: message,\n      additional: validatedAdditionalParameters,\n      level: level,\n      timestamp: timestamp,\n      fileName: callerDetails.fileName,\n      lineNumber: callerDetails.lineNumber\n    };\n\n    if (this._loggerMonitor && isLogLevelEnabled) {\n      this._loggerMonitor.onLog(logObject);\n    }\n\n    if (isLog2Server) {\n      // make sure the stack gets sent to the server\n      message = message instanceof Error ? message.stack : message;\n      logObject.message = message;\n\n      const headers = this._customHttpHeaders || new HttpHeaders();\n      headers.set('Content-Type', 'application/json');\n\n      const options = {\n        headers: headers,\n        params: this._customParams || new HttpParams(),\n        responseType: config.httpResponseType || 'json'\n      };\n      // Allow logging on server even if client log level is off\n      this.httpService.logOnServer(config.serverLoggingUrl, logObject, options).subscribe((res: any) => {\n        // I don't think we should do anything on success\n      },\n        (error: HttpErrorResponse) => {\n          this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);\n        }\n      );\n    }\n\n\n    // if no message or the log level is less than the environ\n    if (isLogLevelEnabled && !config.disableConsoleLogging) {\n      const metaString = NGXLoggerUtils.prepareMetaString(timestamp, logLevelString, callerDetails.fileName, callerDetails.lineNumber);\n\n      return this._logFunc(level, metaString, message, additional);\n    }\n\n  }\n}\n",
    "import {NgxLoggerLevel} from '../types/logger-level.enum';\n\nexport class NGXLoggerUtils {\n\n  static prepareMetaString(timestamp: string, logLevel: string, fileName: string, lineNumber: string) {\n    const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';\n\n    return `${timestamp} ${logLevel}${fileDetails}`;\n  }\n\n  static getColor(level: NgxLoggerLevel): 'blue' | 'teal' | 'gray' | 'red' | undefined {\n    switch (level) {\n      case NgxLoggerLevel.TRACE:\n        return 'blue';\n      case NgxLoggerLevel.DEBUG:\n        return 'teal';\n      case NgxLoggerLevel.INFO:\n      case NgxLoggerLevel.LOG:\n        return 'gray';\n      case NgxLoggerLevel.WARN:\n      case NgxLoggerLevel.ERROR:\n      case NgxLoggerLevel.FATAL:\n        return 'red';\n      case NgxLoggerLevel.OFF:\n      default:\n        return;\n    }\n  }\n\n\n  /**\n   *  This allows us to see who called the logger\n   */\n  static getCallerDetails(): { lineNumber: string, fileName: string } {\n    const err = (new Error(''));\n\n    try {\n      // this should produce the line which NGX Logger was called\n      const callerLine = err.stack.split('\\n')[4].split('/');\n\n      // returns the file:lineNumber\n      const fileLineNumber = callerLine[callerLine.length - 1].replace(/[)]/g, '').split(':');\n\n      return {\n        fileName: fileLineNumber[0],\n        lineNumber: fileLineNumber[1]\n      };\n    } catch (e) {\n      return {\n        fileName: null,\n        lineNumber: null\n      };\n    }\n\n  }\n\n  static prepareMessage(message) {\n    try {\n      if (typeof message !== 'string' && !(message instanceof Error)) {\n        message = JSON.stringify(message, null, 2);\n      }\n    } catch (e) {\n      // additional = [message, ...additional];\n      message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\n    }\n\n    return message;\n  }\n\n  static prepareAdditionalParameters(additional: any[]) {\n    if (additional === null || additional === undefined) {\n      return null;\n    }\n\n    return additional.map((next, idx) => {\n      try {\n        // We just want to make sure the JSON can be parsed, we do not want to actually change the type\n        if (typeof next === 'object') {\n          JSON.stringify(next);\n        }\n\n        return next;\n      } catch (e) {\n        return `The additional[${idx}] value could not be parsed using JSON.stringify().`;\n      }\n    });\n  }\n\n}\n",
    "import {LoggerConfig} from './logger.config';\n\nexport class NGXLoggerConfigEngine {\n\n  private _config;\n  constructor(readonly config: LoggerConfig) {\n    this._config = config;\n  }\n\n  updateConfig(config: LoggerConfig) {\n    this._config = this._clone(config);\n  }\n\n  getConfig() {\n    return this._clone(this._config);\n  }\n\n\n  // TODO: add tests around cloning the config. updating an object passed into the config (or retrieving from the config)\n  // should not update the active config, this is a shallow clone. If our config ever becomes hierarchical we must make\n  // this a deep clone\n  private _clone(object: any) {\n    const cloneConfig: LoggerConfig = new LoggerConfig();\n\n    Object.keys(object).forEach((key) => {\n      cloneConfig[key] = object[key];\n    });\n\n    return cloneConfig;\n  }\n}\n",
    "import {NgxLoggerLevel} from './types/logger-level.enum';\n\nexport class LoggerConfig {\n  level: NgxLoggerLevel;\n  serverLogLevel?: NgxLoggerLevel;\n  serverLoggingUrl?: string;\n  disableConsoleLogging?: boolean;\n  httpResponseType?: 'arraybuffer' | 'blob' | 'text' | 'json';\n}\n",
    "export enum NgxLoggerLevel {\n  TRACE = 0,\n  DEBUG,\n  INFO,\n  LOG,\n  WARN,\n  ERROR,\n  FATAL,\n  OFF\n}\n",
    "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { NGXLogInterface } from './types/ngx-log.interface';\n\n\n\n@Injectable()\nexport class NGXLoggerHttpService {\n  constructor(private readonly http: HttpClient) { }\n\n  logOnServer(url: string, log: NGXLogInterface, options: object): Observable<any> {\n    return this.http.post(url, log, options || {});\n  }\n\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
