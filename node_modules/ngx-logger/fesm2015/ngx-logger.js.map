{
  "version": 3,
  "file": "ngx-logger.js",
  "sources": [
    "ng://ngx-logger/src/lib/testing/http.service.mock.ts",
    "ng://ngx-logger/src/lib/testing/custom-logger.service.mock.ts",
    "ng://ngx-logger/src/lib/testing/logger.service.mock.ts",
    "ng://ngx-logger/src/lib/logger.module.ts",
    "ng://ngx-logger/src/lib/types/http-meta-data.interface.ts",
    "ng://ngx-logger/src/lib/custom-logger.service.ts",
    "ng://ngx-logger/src/lib/logger.service.ts",
    "ng://ngx-logger/src/lib/utils/logger.utils.ts",
    "ng://ngx-logger/src/lib/config.engine.ts",
    "ng://ngx-logger/src/lib/logger.config.ts",
    "ng://ngx-logger/src/lib/http.service.ts"
  ],
  "sourcesContent": [
    "import {Observable, of} from 'rxjs';\n\nexport class NGXLoggerHttpServiceMock {\n  constructor() {\n\n  }\n\n  logOnServer(url: string, message: string, additional: any[], timestamp: string, logLevel: string): Observable<any> {\n    return of({})\n  }\n}\n",
    "import {NGXLoggerMock} from './logger.service.mock';\n\n/**\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\n */\nexport class CustomNGXLoggerServiceMock {\n\n  constructor() {\n  }\n\n  create(): NGXLoggerMock {\n    // you can inject your own httpService or use the default,\n    return new NGXLoggerMock();\n  }\n}\n\n\n",
    "\nexport class NGXLoggerMock {\n\n  constructor() {\n  }\n\n  trace(message: any, ...additional: any[]) {\n  }\n\n  debug(message: any, ...additional: any[]) {\n  }\n\n  info(message: any, ...additional: any[]) {\n  }\n\n  log(message: any, ...additional: any[]) {\n  }\n\n  warn(message: any, ...additional: any[]) {\n  }\n\n  error(message: any, ...additional: any[]) {\n  }\n\n  updateConfig(config: any) {\n\n  }\n}\n",
    "import {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\n\nimport {NGXLogger} from './logger.service';\nimport {LoggerConfig} from './logger.config';\nimport {CustomNGXLoggerService} from './custom-logger.service';\nimport {NGXLoggerHttpService} from './http.service';\n\nexport * from './logger.service';\n\nexport * from './logger.config';\n\nexport * from './custom-logger.service';\n\nexport * from './http.service';\n\nexport * from './utils/logger.utils';\nexport * from './types/logger-level.enum';\nexport * from './types/http-meta-data.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [\n    NGXLogger,\n    NGXLoggerHttpService,\n    CustomNGXLoggerService\n  ]\n})\nexport class LoggerModule {\n  static forRoot(config: LoggerConfig | null | undefined): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        {provide: LoggerConfig, useValue: config || {}},\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService\n      ]\n    };\n  }\n  static forChild(): ModuleWithProviders {\n    return {\n      ngModule: LoggerModule,\n      providers: [\n        NGXLogger,\n        NGXLoggerHttpService,\n        CustomNGXLoggerService\n      ]\n    };\n  }\n}\n",
    "import {NgxLoggerLevel} from './logger-level.enum';\n\nexport class HttpMetaDataInterface {\n  level: NgxLoggerLevel;\n  timestamp: string;\n  fileName: string;\n  lineNumber: string;\n}\n",
    "import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\n\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerHttpService} from './http.service';\nimport {NGXLogger} from './logger.service';\n\n\n/**\n * CustomNGXLoggerService is designed to allow users to get a new instance of a logger\n */\n@Injectable()\nexport class CustomNGXLoggerService {\n\n  constructor(private readonly httpService: NGXLoggerHttpService,\n              @Inject(PLATFORM_ID) private readonly platformId) {\n  }\n\n  create(config: LoggerConfig, httpService?: NGXLoggerHttpService): NGXLogger {\n    // you can inject your own httpService or use the default,\n    return new NGXLogger(httpService || this.httpService, config, this.platformId);\n  }\n}\n\n\n",
    "import {Inject, Injectable, PLATFORM_ID} from '@angular/core';\nimport {HttpErrorResponse} from '@angular/common/http';\nimport {isPlatformBrowser} from '@angular/common';\n\nimport {NGXLoggerHttpService} from './http.service';\nimport {NgxLoggerLevel} from './types/logger-level.enum';\nimport {LoggerConfig} from './logger.config';\nimport {NGXLoggerConfigEngine} from './config.engine';\nimport {NGXLoggerUtils} from './utils/logger.utils';\nimport {HttpMetaDataInterface} from './types/http-meta-data.interface';\n\nexport const Levels = [\n  'TRACE',\n  'DEBUG',\n  'INFO',\n  'LOG',\n  'WARN',\n  'ERROR',\n  'OFF'\n];\n\n\n@Injectable()\nexport class NGXLogger {\n  private _isIE: boolean;\n  private configService: NGXLoggerConfigEngine;\n\n\n  constructor(private readonly httpService: NGXLoggerHttpService, loggerConfig: LoggerConfig,\n              @Inject(PLATFORM_ID) private readonly platformId) {\n    this._isIE = isPlatformBrowser(platformId) &&\n      !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\\//) || navigator.userAgent.match(/Edge\\//));\n\n    // each instance of the logger should have their own config engine\n    this.configService = new NGXLoggerConfigEngine(loggerConfig);\n  }\n\n  public trace(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.TRACE, message, additional);\n  }\n\n  public debug(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.DEBUG, message, additional);\n  }\n\n  public info(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.INFO, message, additional);\n  }\n\n  public log(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.LOG, message, additional);\n  }\n\n  public warn(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.WARN, message, additional);\n  }\n\n  public error(message, ...additional: any[]): void {\n    this._log(NgxLoggerLevel.ERROR, message, additional);\n  }\n\n  public updateConfig(config: LoggerConfig) {\n    this.configService.updateConfig(config);\n  }\n\n  private _logIE(level: NgxLoggerLevel, metaString: string, message: string, additional: any[]): void {\n\n    // make sure additional isn't null or undefined so that ...additional doesn't error\n    additional = additional || [];\n\n    switch (level) {\n      case NgxLoggerLevel.WARN:\n        console.warn(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.ERROR:\n        console.error(`${metaString} `, message, ...additional);\n        break;\n      case NgxLoggerLevel.INFO:\n        console.info(`${metaString} `, message, ...additional);\n        break;\n      default:\n        console.log(`${metaString} `, message, ...additional);\n    }\n  }\n\n  private _log(level: NgxLoggerLevel, message, additional: any[] = [], logOnServer: boolean = true): void {\n    if (!message) {\n      return;\n    }\n\n    const logLevelString = Levels[level];\n\n    message = NGXLoggerUtils.prepareMessage(message);\n\n    // only use validated parameters for HTTP requests\n    const validatedAdditionalParameters = NGXLoggerUtils.prepareAdditionalParameters(additional);\n\n    const timestamp = new Date().toISOString();\n    const config = this.configService.getConfig();\n\n    const callerDetails = NGXLoggerUtils.getCallerDetails();\n\n    if (logOnServer && config.serverLoggingUrl && level >= config.serverLogLevel) {\n\n      const metaData: HttpMetaDataInterface = {\n        level: level,\n        timestamp: timestamp,\n        fileName: callerDetails.fileName,\n        lineNumber: callerDetails.lineNumber,\n      };\n\n      // make sure the stack gets sent to the server\n      message = message instanceof Error ? message.stack : message;\n\n      // Allow logging on server even if client log level is off\n      this.httpService.logOnServer(config.serverLoggingUrl, message, validatedAdditionalParameters, metaData).subscribe((res: any) => {\n          // I don't think we should do anything on success\n        },\n        (error: HttpErrorResponse) => {\n          this._log(NgxLoggerLevel.ERROR, `FAILED TO LOG ON SERVER: ${message}`, [error], false);\n        }\n      );\n    }\n\n\n    // if no message or the log level is less than the environ\n    if (level < config.level) {\n      return;\n    }\n\n    const metaString = NGXLoggerUtils.prepareMetaString(timestamp, logLevelString, callerDetails.fileName, callerDetails.lineNumber);\n\n    // Coloring doesn't work in IE\n    if (this._isIE) {\n      return this._logIE(level, metaString, message, additional);\n    }\n\n    const color = NGXLoggerUtils.getColor(level);\n\n    console.log(`%c${metaString}`, `color:${color}`, message, ...(additional || []));\n  }\n}\n",
    "import {NgxLoggerLevel} from '../types/logger-level.enum';\n\nexport class NGXLoggerUtils {\n\n  static prepareMetaString(timestamp: string, logLevel: string, fileName: string, lineNumber: string) {\n    const fileDetails = fileName ? ` [${fileName}:${lineNumber}]` : '';\n\n    return `${timestamp} ${logLevel}${fileDetails}`;\n  }\n\n  static getColor(level: NgxLoggerLevel): 'blue' | 'teal' | 'gray' | 'red' | undefined {\n    switch (level) {\n      case NgxLoggerLevel.TRACE:\n        return 'blue';\n      case NgxLoggerLevel.DEBUG:\n        return 'teal';\n      case NgxLoggerLevel.INFO:\n      case NgxLoggerLevel.LOG:\n        return 'gray';\n      case NgxLoggerLevel.WARN:\n      case NgxLoggerLevel.ERROR:\n        return 'red';\n      case NgxLoggerLevel.OFF:\n      default:\n        return;\n    }\n  }\n\n\n\n  /**\n   *  This allows us to see who called the logger\n   *  @return {string}\n   *  @private\n   */\n  static getCallerDetails(): {lineNumber: string, fileName: string} {\n    const err = (new Error(''));\n\n    try {\n      // this should produce the line which NGX Logger was called\n      const callerLine = err.stack.split('\\n')[4].split('/');\n\n      // returns the file:lineNumber\n      const fileLineNumber = callerLine[callerLine.length - 1].replace(/[)]/g, '').split(':');\n\n      return {\n        fileName: fileLineNumber[0],\n        lineNumber: fileLineNumber[1]\n      }\n    } catch(e) {\n      return {\n        fileName: null,\n        lineNumber: null\n      }\n    }\n\n  }\n\n  static prepareMessage(message) {\n    try {\n       if (typeof message !== 'string' && !(message instanceof Error)) {\n        message = JSON.stringify(message, null, 2);\n      }\n    } catch (e) {\n      // additional = [message, ...additional];\n      message = 'The provided \"message\" value could not be parsed with JSON.stringify().';\n    }\n\n    return message;\n  }\n\n  static prepareAdditionalParameters(additional: any[]) {\n    if (additional === null || additional === undefined) {\n      return null;\n    }\n\n    return additional.map((next, idx) => {\n      try {\n        // We just want to make sure the JSON can be parsed, we do not want to actually change the type\n        if (typeof next === 'object') {\n          JSON.stringify(next)\n        }\n\n        return next;\n      } catch (e) {\n        return `The additional[${idx}] value could not be parsed using JSON.stringify().`\n      }\n    });\n  }\n\n}\n",
    "import {LoggerConfig} from './logger.config';\n\nexport class NGXLoggerConfigEngine {\n\n  private _config;\n  constructor(readonly config: LoggerConfig) {\n    this._config = config;\n  }\n\n  updateConfig(config: LoggerConfig) {\n    this._config = config;\n  }\n\n  getConfig() {\n    return this._config;\n  }\n}",
    "import {NgxLoggerLevel} from './types/logger-level.enum';\n\nexport class LoggerConfig {\n  level: NgxLoggerLevel;\n  serverLogLevel?: NgxLoggerLevel;\n  serverLoggingUrl?: string;\n}\n",
    "import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {HttpMetaDataInterface} from './types/http-meta-data.interface';\n\n\n@Injectable()\nexport class NGXLoggerHttpService {\n  constructor(private readonly http: HttpClient) {\n\n  }\n\n  logOnServer(url: string, message: string, additional: any[], metaData: HttpMetaDataInterface): Observable<any> {\n    const body = {\n      message: message,\n      additional: additional,\n      level: metaData.level,\n      timestamp: metaData.timestamp,\n      fileName: metaData.fileName,\n      lineNumber: metaData.lineNumber\n    };\n\n    const options = {\n      headers: new HttpHeaders().set('Content-Type', 'application/json')\n    };\n\n    return this.http.post(url, body, options)\n  }\n}\n"
  ],
  "names": [],
  "mappings": ";;;;;;;;;AUAA,AAOA,MAAA,oBAAA,CAAA;;;;IACE,WAAF,CAA+B,IAAgB,EAA/C;QAA+B,IAA/B,CAAA,IAAmC,GAAJ,IAAI,CAAY;KAE5C;;;;;;;;IAED,WAAW,CAAC,GAAW,EAAE,OAAe,EAAE,UAAiB,EAAE,QAA+B,EAA9F;QACI,uBAAM,IAAI,GAAG;YACX,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,UAAU;YACtB,KAAK,EAAE,QAAQ,CAAC,KAAK;YACrB,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,UAAU,EAAE,QAAQ,CAAC,UAAU;SAChC,CAAC;QAEF,uBAAM,OAAO,GAAG;YACd,OAAO,EAAE,IAAI,WAAW,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;SACnE,CAAC;QAEF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;KAC1C;;;IArBH,EAAA,IAAA,EAAC,UAAU,EAAX;;;;IALA,EAAA,IAAA,EAAQ,UAAU,GAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADCA,AAAA,MAAA,YAAA,CAAA;CAIC;;;;;;ADJD,AAAA,MAAA,qBAAA,CAAA;;;;IAGE,WAAF,CAAuB,MAAoB,EAA3C;QAAuB,IAAvB,CAAA,MAA6B,GAAN,MAAM,CAAc;QACvC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;KACvB;;;;;IAED,YAAY,CAAC,MAAoB,EAAnC;QACI,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;KACvB;;;;IAED,SAAS,GAAX;QACI,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;CACF;;;;;;ADhBD,AAEA,MAAA,cAAA,CAAA;;;;;;;;IAEE,OAAO,iBAAiB,CAAC,SAAiB,EAAE,QAAgB,EAAE,QAAgB,EAAE,UAAkB,EAApG;QACI,uBAAM,WAAW,GAAG,QAAQ,GAAG,CAAnC,EAAA,EAAwC,QAAQ,CAAhD,CAAA,EAAoD,UAAU,CAA9D,CAAA,CAAiE,GAAG,EAAE,CAAC;QAEnE,OAAO,CAAX,EAAc,SAAS,CAAvB,CAAA,EAA2B,QAAQ,CAAnC,EAAsC,WAAW,CAAjD,CAAmD,CAAC;KACjD;;;;;IAED,OAAO,QAAQ,CAAC,KAAqB,EAAvC;QACI,QAAQ,KAAK;YACX,KAAK,cAAc,CAAC,KAAK;gBACvB,OAAO,MAAM,CAAC;YAChB,KAAK,cAAc,CAAC,KAAK;gBACvB,OAAO,MAAM,CAAC;YAChB,KAAK,cAAc,CAAC,IAAI,CAAC;YACzB,KAAK,cAAc,CAAC,GAAG;gBACrB,OAAO,MAAM,CAAC;YAChB,KAAK,cAAc,CAAC,IAAI,CAAC;YACzB,KAAK,cAAc,CAAC,KAAK;gBACvB,OAAO,KAAK,CAAC;YACf,KAAK,cAAc,CAAC,GAAG,CAAC;YACxB;gBACE,OAAO;SACV;KACF;;;;;;;IASD,OAAO,gBAAgB,GAAzB;QACI,uBAAM,GAAG,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;QAE5B,IAAI;;YAEF,uBAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;YAGvD,uBAAM,cAAc,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAExF,OAAO;gBACL,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC;gBAC3B,UAAU,EAAE,cAAc,CAAC,CAAC,CAAC;aAC9B,CAAA;SACF;QAAC,wBAAM,CAAC,EAAE;YACT,OAAO;gBACL,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,IAAI;aACjB,CAAA;SACF;KAEF;;;;;IAED,OAAO,cAAc,CAAC,OAAO,EAA/B;QACI,IAAI;YACD,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,EAAE,OAAO,YAAY,KAAK,CAAC,EAAE;gBAC/D,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;aAC5C;SACF;QAAC,wBAAO,CAAC,EAAE;;YAEV,OAAO,GAAG,yEAAyE,CAAC;SACrF;QAED,OAAO,OAAO,CAAC;KAChB;;;;;IAED,OAAO,2BAA2B,CAAC,UAAiB,EAAtD;QACI,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,EAAE;YACnD,OAAO,IAAI,CAAC;SACb;QAED,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,KAApC;YACM,IAAI;;gBAEF,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;oBAC5B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;iBACrB;gBAED,OAAO,IAAI,CAAC;aACb;YAAC,wBAAO,CAAC,EAAE;gBACV,OAAO,CAAf,eAAA,EAAiC,GAAG,CAApC,mDAAA,CAAyF,CAAA;aAClF;SACF,CAAC,CAAC;KACJ;CAEF;;;;;;AD1FD,AAWA,MAAA,iBAAa,MAAM,GAAG;IACpB,OAAO;IACP,OAAO;IACP,MAAM;IACN,KAAK;IACL,MAAM;IACN,OAAO;IACP,KAAK;CACN,CAAC;AAIF,AAAA,MAAA,SAAA,CAAA;;;;;;IAKE,WAAF,CAA+B,WAAiC,EAAE,YAA0B,EACxC,UADpD,EAAA;QAA+B,IAA/B,CAAA,WAA0C,GAAX,WAAW,CAAsB;QACZ,IAApD,CAAA,UAA8D,GAAV,UAAU,CAA9D;QACI,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC,UAAU,CAAC;YACxC,CAAC,EAAE,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;;QAGlI,IAAI,CAAC,aAAa,GAAG,IAAI,qBAAqB,CAAC,YAAY,CAAC,CAAC;KAC9D;;;;;;IAEM,KAAK,CAAC,OAAO,EAAE,GAAG,UAAiB,EAA5C;QACI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;;;;;;;IAGhD,KAAK,CAAC,OAAO,EAAE,GAAG,UAAiB,EAA5C;QACI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;;;;;;;IAGhD,IAAI,CAAC,OAAO,EAAE,GAAG,UAAiB,EAA3C;QACI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;;;;;;;IAG/C,GAAG,CAAC,OAAO,EAAE,GAAG,UAAiB,EAA1C;QACI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;;;;;;;IAG9C,IAAI,CAAC,OAAO,EAAE,GAAG,UAAiB,EAA3C;QACI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;;;;;;;IAG/C,KAAK,CAAC,OAAO,EAAE,GAAG,UAAiB,EAA5C;QACI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;;;;;;IAGhD,YAAY,CAAC,MAAoB,EAA1C;QACI,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;;;;;;;;;IAGlC,MAAM,CAAC,KAAqB,EAAE,UAAkB,EAAE,OAAe,EAAE,UAAiB,EAA9F;;QAGI,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;QAE9B,QAAQ,KAAK;YACX,KAAK,cAAc,CAAC,IAAI;gBACtB,OAAO,CAAC,IAAI,CAAC,CAArB,EAAwB,UAAU,CAAlC,CAAA,CAAqC,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;gBACvD,MAAM;YACR,KAAK,cAAc,CAAC,KAAK;gBACvB,OAAO,CAAC,KAAK,CAAC,CAAtB,EAAyB,UAAU,CAAnC,CAAA,CAAsC,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;gBACxD,MAAM;YACR,KAAK,cAAc,CAAC,IAAI;gBACtB,OAAO,CAAC,IAAI,CAAC,CAArB,EAAwB,UAAU,CAAlC,CAAA,CAAqC,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;gBACvD,MAAM;YACR;gBACE,OAAO,CAAC,GAAG,CAAC,CAApB,EAAuB,UAAU,CAAjC,CAAA,CAAoC,EAAE,OAAO,EAAE,GAAG,UAAU,CAAC,CAAC;SACzD;;;;;;;;;IAGK,IAAI,CAAC,KAAqB,EAAE,OAAO,EAAE,UAA/C,GAAmE,EAAE,EAAE,WAAvE,GAA8F,IAAI,EAAlG;QACI,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QAED,uBAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAErC,OAAO,GAAG,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;;QAGjD,uBAAM,6BAA6B,GAAG,cAAc,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;QAE7F,uBAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAC3C,uBAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;QAE9C,uBAAM,aAAa,GAAG,cAAc,CAAC,gBAAgB,EAAE,CAAC;QAExD,IAAI,WAAW,IAAI,MAAM,CAAC,gBAAgB,IAAI,KAAK,IAAI,MAAM,CAAC,cAAc,EAAE;YAE5E,uBAAM,QAAQ,GAA0B;gBACtC,KAAK,EAAE,KAAK;gBACZ,SAAS,EAAE,SAAS;gBACpB,QAAQ,EAAE,aAAa,CAAC,QAAQ;gBAChC,UAAU,EAAE,aAAa,CAAC,UAAU;aACrC,CAAC;;YAGF,OAAO,GAAG,OAAO,YAAY,KAAK,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;;YAG7D,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,EAAE,6BAA6B,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,GAAQ,KAAjI;;aAES,EACD,CAAC,KAAwB,KADjC;gBAEU,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAA1C,yBAAA,EAAsE,OAAO,CAA7E,CAA+E,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;aACxF,CACF,CAAC;SACH;;QAID,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE;YACxB,OAAO;SACR;QAED,uBAAM,UAAU,GAAG,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,cAAc,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC;;QAGjI,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;SAC5D;QAED,uBAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE7C,OAAO,CAAC,GAAG,CAAC,CAAhB,EAAA,EAAqB,UAAU,CAA/B,CAAiC,EAAE,CAAnC,MAAA,EAA4C,KAAK,CAAjD,CAAmD,EAAE,OAAO,EAAE,IAAI,UAAU,IAAI,EAAE,CAAC,CAAC,CAAC;;;;IArHrF,EAAA,IAAA,EAAC,UAAU,EAAX;;;;IAlBA,EAAA,IAAA,EAAQ,oBAAoB,GAA5B;IAEA,EAAA,IAAA,EAAQ,YAAY,GAApB;IAuBA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAe,MAAM,EAArB,IAAA,EAAA,CAAsB,WAAW,EAAjC,EAAA,EAAA,EAAA;;;;;;;AD7BA;;;AAWA,AAAA,MAAA,sBAAA,CAAA;;;;;IAEE,WAAF,CAA+B,WAAiC,EACZ,UADpD,EAAA;QAA+B,IAA/B,CAAA,WAA0C,GAAX,WAAW,CAAsB;QACZ,IAApD,CAAA,UAA8D,GAAV,UAAU,CAA9D;KACG;;;;;;IAED,MAAM,CAAC,MAAoB,EAAE,WAAkC,EAAjE;;QAEI,OAAO,IAAI,SAAS,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,EAAE,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;KAChF;;;IAVH,EAAA,IAAA,EAAC,UAAU,EAAX;;;;IAPA,EAAA,IAAA,EAAQ,oBAAoB,GAA5B;IAWA,EAAA,IAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAe,MAAM,EAArB,IAAA,EAAA,CAAsB,WAAW,EAAjC,EAAA,EAAA,EAAA;;;;;;;ADZA,AAAA,MAAA,qBAAA,CAAA;CAKC;;;;;;ADPD,AAgCA,MAAA,YAAA,CAAA;;;;;IACE,OAAO,OAAO,CAAC,MAAuC,EAAxD;QACI,OAAO;YACL,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE;gBACT,EAAC,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,IAAI,EAAE,EAAC;gBAC/C,SAAS;gBACT,oBAAoB;gBACpB,sBAAsB;aACvB;SACF,CAAC;KACH;;;;IACD,OAAO,QAAQ,GAAjB;QACI,OAAO;YACL,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE;gBACT,SAAS;gBACT,oBAAoB;gBACpB,sBAAsB;aACvB;SACF,CAAC;KACH;;;IAhCH,EAAA,IAAA,EAAC,QAAQ,EAAT,IAAA,EAAA,CAAU;gBACR,OAAO,EAAE;oBACP,YAAY;oBACZ,gBAAgB;iBACjB;gBACD,SAAS,EAAE;oBACT,SAAS;oBACT,oBAAoB;oBACpB,sBAAsB;iBACvB;aACF,EAAD,EAAA;;;;;;;AD9BA,AAAA,MAAA,aAAA,CAAA;IAEE,WAAF,GAAA;KACG;;;;;;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB,EAA1C;KACG;;;;;;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB,EAA1C;KACG;;;;;;IAED,IAAI,CAAC,OAAY,EAAE,GAAG,UAAiB,EAAzC;KACG;;;;;;IAED,GAAG,CAAC,OAAY,EAAE,GAAG,UAAiB,EAAxC;KACG;;;;;;IAED,IAAI,CAAC,OAAY,EAAE,GAAG,UAAiB,EAAzC;KACG;;;;;;IAED,KAAK,CAAC,OAAY,EAAE,GAAG,UAAiB,EAA1C;KACG;;;;;IAED,YAAY,CAAC,MAAW,EAA1B;KAEG;CACF;;;;;;AD3BD;;;AAKA,AAAA,MAAA,0BAAA,CAAA;IAEE,WAAF,GAAA;KACG;;;;IAED,MAAM,GAAR;;QAEI,OAAO,IAAI,aAAa,EAAE,CAAC;KAC5B;CACF;;;;;;ADdD,AAEA,MAAA,wBAAA,CAAA;IACE,WAAF,GAAA;KAEG;;;;;;;;;IAED,WAAW,CAAC,GAAW,EAAE,OAAe,EAAE,UAAiB,EAAE,SAAiB,EAAE,QAAgB,EAAlG;QACI,OAAO,EAAE,CAAC,EAAE,CAAC,CAAA;KACd;CACF;;;;;;;;;;;;;;;;;;;"
}
