{"version":3,"file":"bundle.es6.min.js","sources":["../../types/src/loglevel.ts","../../types/src/severity.ts","../../types/src/status.ts","../../utils/src/error.ts","../../utils/src/is.ts","../../utils/src/misc.ts","../../utils/src/logger.ts","../../utils/src/memo.ts","../../utils/src/object.ts","../../utils/src/promisebuffer.ts","../../utils/src/string.ts","../../utils/src/supports.ts","../../utils/src/syncpromise.ts","../../hub/src/span.ts","../../hub/src/scope.ts","../../hub/src/hub.ts","../../minimal/src/index.ts","../../core/src/dsn.ts","../../core/src/api.ts","../../core/src/integration.ts","../../core/src/baseclient.ts","../../core/src/transports/noop.ts","../../core/src/basebackend.ts","../../core/src/integrations/functiontostring.ts","../../core/src/integrations/inboundfilters.ts","../src/tracekit.ts","../src/parsers.ts","../src/transports/base.ts","../src/transports/fetch.ts","../src/transports/xhr.ts","../src/backend.ts","../src/version.ts","../src/client.ts","../src/helpers.ts","../src/integrations/globalhandlers.ts","../src/integrations/trycatch.ts","../src/integrations/breadcrumbs.ts","../src/integrations/linkederrors.ts","../src/integrations/useragent.ts","../src/sdk.ts","../src/index.ts","../../core/src/sdk.ts"],"sourcesContent":["/** Console logging verbosity for the SDK. */\nexport enum LogLevel {\n  /** No logs will be generated. */\n  None = 0,\n  /** Only SDK internal errors will be logged. */\n  Error = 1,\n  /** Information useful for debugging the SDK will be logged. */\n  Debug = 2,\n  /** All SDK actions will be logged. */\n  Verbose = 3,\n}\n","/** JSDoc */\nexport enum Severity {\n  /** JSDoc */\n  Fatal = 'fatal',\n  /** JSDoc */\n  Error = 'error',\n  /** JSDoc */\n  Warning = 'warning',\n  /** JSDoc */\n  Log = 'log',\n  /** JSDoc */\n  Info = 'info',\n  /** JSDoc */\n  Debug = 'debug',\n  /** JSDoc */\n  Critical = 'critical',\n}\n// tslint:disable:completed-docs\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Severity {\n  /**\n   * Converts a string-based level into a {@link Severity}.\n   *\n   * @param level string representation of Severity\n   * @returns Severity\n   */\n  export function fromString(level: string): Severity {\n    switch (level) {\n      case 'debug':\n        return Severity.Debug;\n      case 'info':\n        return Severity.Info;\n      case 'warn':\n      case 'warning':\n        return Severity.Warning;\n      case 'error':\n        return Severity.Error;\n      case 'fatal':\n        return Severity.Fatal;\n      case 'critical':\n        return Severity.Critical;\n      case 'log':\n      default:\n        return Severity.Log;\n    }\n  }\n}\n","/** The status of an event. */\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent to Sentry successfully. */\n  Success = 'success',\n  /** The client is currently rate limited and will try again later. */\n  RateLimit = 'rate_limit',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n}\n// tslint:disable:completed-docs\n// tslint:disable:no-unnecessary-qualifier no-namespace\nexport namespace Status {\n  /**\n   * Converts a HTTP status code into a {@link Status}.\n   *\n   * @param code The HTTP response status code.\n   * @returns The send status or {@link Status.Unknown}.\n   */\n  export function fromHttpCode(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n","/** An error emitted by Sentry SDKs and related utilities. */\nexport class SentryError extends Error {\n  /** Display name of this error instance. */\n  public name: string;\n\n  public constructor(public message: string) {\n    super(message);\n\n    // tslint:disable:no-unsafe-any\n    this.name = new.target.prototype.constructor.name;\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: any): boolean {\n  switch (Object.prototype.toString.call(wat)) {\n    case '[object Error]':\n      return true;\n    case '[object Exception]':\n      return true;\n    case '[object DOMException]':\n      return true;\n    default:\n      return wat instanceof Error;\n  }\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object ErrorEvent]';\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMError]';\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object DOMException]';\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object String]';\n}\n\n/**\n * Checks whether given value's is a primitive (undefined, null, number, boolean, string)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: any): boolean {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object Object]';\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: any): boolean {\n  return Object.prototype.toString.call(wat) === '[object RegExp]';\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): boolean {\n  // tslint:disable:no-unsafe-any\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n  // tslint:enable:no-unsafe-any\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: any): boolean {\n  // tslint:disable-next-line:no-unsafe-any\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n","import { Event, Mechanism, WrappedFunction } from '@sentry/types';\n\n/** Internal */\ninterface SentryGlobal {\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\n/**\n * Requires a module which is protected _against bundler minification.\n *\n * @param request The module path to resolve\n */\nexport function dynamicRequire(mod: any, request: string): any {\n  // tslint:disable-next-line: no-unsafe-any\n  return mod.require(request);\n}\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // tslint:disable:strict-type-predicates\n  return Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (isNodeEnv()\n    ? global\n    : typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : fallbackGlobalObject) as T & SentryGlobal;\n}\n// tslint:enable:strict-type-predicates\n\n/**\n * Extended Window interface that allows for Crypto API usage in IE browsers\n */\ninterface MsCryptoWindow extends Window {\n  msCrypto?: Crypto;\n}\n\n/**\n * UUID4 generator\n *\n * @returns string Generated UUID4.\n */\nexport function uuid4(): string {\n  const global = getGlobalObject() as MsCryptoWindow;\n  const crypto = global.crypto || global.msCrypto;\n\n  if (!(crypto === void 0) && crypto.getRandomValues) {\n    // Use window.crypto API if available\n    const arr = new Uint16Array(8);\n    crypto.getRandomValues(arr);\n\n    // set 4 in byte 7\n    // tslint:disable-next-line:no-bitwise\n    arr[3] = (arr[3] & 0xfff) | 0x4000;\n    // set 2 most significant bits of byte 9 to '10'\n    // tslint:disable-next-line:no-bitwise\n    arr[4] = (arr[4] & 0x3fff) | 0x8000;\n\n    const pad = (num: number): string => {\n      let v = num.toString(16);\n      while (v.length < 4) {\n        v = `0${v}`;\n      }\n      return v;\n    };\n\n    return (\n      pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7])\n    );\n  }\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    // tslint:disable-next-line:no-bitwise\n    const r = (Math.random() * 16) | 0;\n    // tslint:disable-next-line:no-bitwise\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nexport function parseUrl(\n  url: string,\n): {\n  host?: string;\n  path?: string;\n  protocol?: string;\n  relative?: string;\n} {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  if (event.message) {\n    return event.message;\n  }\n  if (event.exception && event.exception.values && event.exception.values[0]) {\n    const exception = event.exception.values[0];\n\n    if (exception.type && exception.value) {\n      return `${exception.type}: ${exception.value}`;\n    }\n    return exception.type || exception.value || event.event_id || '<unknown>';\n  }\n  return event.event_id || '<unknown>';\n}\n\n/** JSDoc */\ninterface ExtensibleConsole extends Console {\n  [key: string]: any;\n}\n\n/** JSDoc */\nexport function consoleSandbox(callback: () => any): any {\n  const global = getGlobalObject<Window>();\n  const levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as ExtensibleConsole;\n  const wrappedLevels: { [key: string]: any } = {};\n\n  // Restore all wrapped console methods\n  levels.forEach(level => {\n    if (level in global.console && (originalConsole[level] as WrappedFunction).__sentry__) {\n      wrappedLevels[level] = (originalConsole[level] as WrappedFunction).__sentry_wrapped__;\n      originalConsole[level] = (originalConsole[level] as WrappedFunction).__sentry_original__;\n    }\n  });\n\n  // Perform callback manipulations\n  const result = callback();\n\n  // Revert restoration to wrapped state\n  Object.keys(wrappedLevels).forEach(level => {\n    originalConsole[level] = wrappedLevels[level];\n  });\n\n  return result;\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @param mechanism Mechanism of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(\n  event: Event,\n  value?: string,\n  type?: string,\n  mechanism: Mechanism = {\n    handled: true,\n    type: 'generic',\n  },\n): void {\n  event.exception = event.exception || {};\n  event.exception.values = event.exception.values || [];\n  event.exception.values[0] = event.exception.values[0] || {};\n  event.exception.values[0].value = event.exception.values[0].value || value || '';\n  event.exception.values[0].type = event.exception.values[0].type || type || 'Error';\n  event.exception.values[0].mechanism = event.exception.values[0].mechanism || mechanism;\n}\n","import { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`); // tslint:disable-line:no-console\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n","// tslint:disable:no-unsafe-any\n/**\n * Memo class used for decycle json objects. Uses WeakSet if available otherwise array.\n */\nexport class Memo {\n  /** Determines if WeakSet is available */\n  private readonly _hasWeakSet: boolean;\n  /** Either WeakSet or Array */\n  private readonly _inner: any;\n\n  public constructor() {\n    // tslint:disable-next-line\n    this._hasWeakSet = typeof WeakSet === 'function';\n    this._inner = this._hasWeakSet ? new WeakSet() : [];\n  }\n\n  /**\n   * Sets obj to remember.\n   * @param obj Object to remember\n   */\n  public memoize(obj: any): boolean {\n    if (this._hasWeakSet) {\n      if (this._inner.has(obj)) {\n        return true;\n      }\n      this._inner.add(obj);\n      return false;\n    }\n    // tslint:disable-next-line:prefer-for-of\n    for (let i = 0; i < this._inner.length; i++) {\n      const value = this._inner[i];\n      if (value === obj) {\n        return true;\n      }\n    }\n    this._inner.push(obj);\n    return false;\n  }\n\n  /**\n   * Removes object from internal storage.\n   * @param obj Object to forget\n   */\n  public unmemoize(obj: any): void {\n    if (this._hasWeakSet) {\n      this._inner.delete(obj);\n    } else {\n      for (let i = 0; i < this._inner.length; i++) {\n        if (this._inner[i] === obj) {\n          this._inner.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n}\n","import { ExtendedError, WrappedFunction } from '@sentry/types';\n\nimport { isError, isPrimitive, isSyntheticEvent } from './is';\nimport { Memo } from './memo';\n\n/**\n * Wrap a given object method with a higher-order function\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacement: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacement(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof wrapped === 'function') {\n    try {\n      wrapped.prototype = wrapped.prototype || {};\n      Object.defineProperties(wrapped, {\n        __sentry__: {\n          enumerable: false,\n          value: true,\n        },\n        __sentry_original__: {\n          enumerable: false,\n          value: original,\n        },\n        __sentry_wrapped__: {\n          enumerable: false,\n          value: wrapped,\n        },\n      });\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(\n      // tslint:disable-next-line:no-unsafe-any\n      key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`,\n    )\n    .join('&');\n}\n\n/**\n * Transforms Error object into an object literal with all it's attributes\n * attached to it.\n *\n * Based on: https://github.com/ftlabs/js-abbreviate/blob/fa709e5f139e7770a71827b1893f22418097fbda/index.js#L95-L106\n *\n * @param error An Error containing all relevant information\n * @returns An object with all error properties\n */\nfunction objectifyError(error: ExtendedError): object {\n  // These properties are implemented as magical getters and don't show up in `for-in` loop\n  const err: {\n    stack: string | undefined;\n    message: string;\n    name: string;\n    [key: string]: any;\n  } = {\n    message: error.message,\n    name: error.name,\n    stack: error.stack,\n  };\n\n  for (const i in error) {\n    if (Object.prototype.hasOwnProperty.call(error, i)) {\n      err[i] = error[i];\n    }\n  }\n\n  return err;\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // tslint:disable-next-line:no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const serialized = normalize(object, depth);\n\n  if (jsonSize(serialized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return serialized as T;\n}\n\n/** Transforms any input value into a string form, either primitive value or a type of the input */\nfunction serializeValue(value: any): any {\n  const type = Object.prototype.toString.call(value);\n\n  // Node.js REPL notation\n  if (typeof value === 'string') {\n    return value;\n  }\n  if (type === '[object Object]') {\n    return '[Object]';\n  }\n  if (type === '[object Array]') {\n    return '[Array]';\n  }\n\n  const normalized = normalizeValue(value);\n  return isPrimitive(normalized) ? normalized : type;\n}\n\n/**\n * normalizeValue()\n *\n * Takes unserializable input and make it serializable friendly\n *\n * - translates undefined/NaN values to \"[undefined]\"/\"[NaN]\" respectively,\n * - serializes Error objects\n * - filter global objects\n */\nfunction normalizeValue<T>(value: T, key?: any): T | string {\n  if (key === 'domain' && typeof value === 'object' && ((value as unknown) as { _events: any })._events) {\n    return '[Domain]';\n  }\n\n  if (key === 'domainEmitter') {\n    return '[DomainEmitter]';\n  }\n\n  if (typeof (global as any) !== 'undefined' && (value as unknown) === global) {\n    return '[Global]';\n  }\n\n  if (typeof (window as any) !== 'undefined' && (value as unknown) === window) {\n    return '[Window]';\n  }\n\n  if (typeof (document as any) !== 'undefined' && (value as unknown) === document) {\n    return '[Document]';\n  }\n\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof Event !== 'undefined' && value instanceof Event) {\n    return Object.getPrototypeOf(value) ? value.constructor.name : 'Event';\n  }\n\n  // React's SyntheticEvent thingy\n  if (isSyntheticEvent(value)) {\n    return '[SyntheticEvent]';\n  }\n\n  if (Number.isNaN((value as unknown) as number)) {\n    return '[NaN]';\n  }\n\n  if (value === void 0) {\n    return '[undefined]';\n  }\n\n  if (typeof value === 'function') {\n    return `[Function: ${value.name || '<unknown-function-name>'}]`;\n  }\n\n  return value;\n}\n\n/**\n * Walks an object to perform a normalization on it\n *\n * @param key of object that's walked in current iteration\n * @param value object to be walked\n * @param depth Optional number indicating how deep should walking be performed\n * @param memo Optional Memo class handling decycling\n */\nexport function walk(key: string, value: any, depth: number = +Infinity, memo: Memo = new Memo()): any {\n  // If we reach the maximum depth, serialize whatever has left\n  if (depth === 0) {\n    return serializeValue(value);\n  }\n\n  // If value implements `toJSON` method, call it and return early\n  // tslint:disable:no-unsafe-any\n  if (value !== null && value !== undefined && typeof value.toJSON === 'function') {\n    return value.toJSON();\n  }\n  // tslint:enable:no-unsafe-any\n\n  // If normalized value is a primitive, there are no branches left to walk, so we can just bail out, as theres no point in going down that branch any further\n  const normalized = normalizeValue(value, key);\n  if (isPrimitive(normalized)) {\n    return normalized;\n  }\n\n  // Create source that we will use for next itterations, either objectified error object (Error type with extracted keys:value pairs) or the input itself\n  const source = (isError(value) ? objectifyError(value as Error) : value) as {\n    [key: string]: any;\n  };\n\n  // Create an accumulator that will act as a parent for all future itterations of that branch\n  const acc = Array.isArray(value) ? [] : {};\n\n  // If we already walked that branch, bail out, as it's circular reference\n  if (memo.memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // Walk all keys of the source\n  for (const innerKey in source) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {\n      continue;\n    }\n    // Recursively walk through all the child nodes\n    (acc as { [key: string]: any })[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);\n  }\n\n  // Once walked through all the branches, remove the parent from memo storage\n  memo.unmemoize(value);\n\n  // Return accumulated values\n  return acc;\n}\n\n/**\n * normalize()\n *\n * - Creates a copy to prevent original input mutation\n * - Skip non-enumerablers\n * - Calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format\n * - Translates known global objects/Classes to a string representations\n * - Takes care of Error objects serialization\n * - Optionally limit depth of final output\n */\nexport function normalize(input: any, depth?: number): any {\n  try {\n    // tslint:disable-next-line:no-unsafe-any\n    return JSON.parse(JSON.stringify(input, (key: string, value: any) => walk(key, value, depth)));\n  } catch (_oO) {\n    return '**non-serializable**';\n  }\n}\n","import { SentryError } from './error';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  public constructor(protected _limit?: number) {}\n\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<Promise<T>> = [];\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any Promise<T>\n   * @returns The original promise.\n   */\n  public add(task: Promise<T>): Promise<T> {\n    if (!this.isReady()) {\n      return Promise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(() => this.remove(task))\n      .catch(() =>\n        this.remove(task).catch(() => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any Promise<T>\n   * @returns Removed promise.\n   */\n  public remove(task: Promise<T>): Promise<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      Promise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .catch(() => {\n          resolve(true);\n        });\n    });\n  }\n}\n","import { isRegExp } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\n\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const ll = newLine.length;\n  if (ll <= 150) {\n    return newLine;\n  }\n  if (colno > ll) {\n    colno = ll; // tslint:disable-line:no-parameter-reassignment\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, ll);\n  if (end > ll - 5) {\n    end = ll;\n  }\n  if (end === ll) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < ll) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/** Merges provided array of keys into */\nexport function keysToEventMessage(keys: string[], maxLength: number = 40): string {\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (isRegExp(pattern)) {\n    return (pattern as RegExp).test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.includes(pattern);\n  }\n  return false;\n}\n","import { getGlobalObject } from './misc';\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsErrorEvent(): boolean {\n  try {\n    // tslint:disable:no-unused-expression\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMError(): boolean {\n  try {\n    // It really needs 1 argument, not 0.\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-ignore\n    // tslint:disable:no-unused-expression\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsDOMException(): boolean {\n  try {\n    // tslint:disable:no-unused-expression\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsFetch(): boolean {\n  if (!('fetch' in getGlobalObject<Window>())) {\n    return false;\n  }\n\n  try {\n    // tslint:disable-next-line:no-unused-expression\n    new Headers();\n    // tslint:disable-next-line:no-unused-expression\n    new Request('');\n    // tslint:disable-next-line:no-unused-expression\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsNativeFetch(): boolean {\n  if (!supportsFetch()) {\n    return false;\n  }\n  const global = getGlobalObject<Window>();\n  return global.fetch.toString().indexOf('native') !== -1;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReportingObserver(): boolean {\n  // tslint:disable-next-line: no-unsafe-any\n  return 'ReportingObserver' in getGlobalObject();\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsReferrerPolicy(): boolean {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n  // https://caniuse.com/#feat=referrer-policy\n  // It doesn't. And it throw exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    // tslint:disable:no-unused-expression\n    new Request('_', {\n      referrerPolicy: 'origin' as ReferrerPolicy,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nexport function supportsHistory(): boolean {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  const global = getGlobalObject<Window>();\n  const chrome = (global as any).chrome;\n  // tslint:disable-next-line:no-unsafe-any\n  const isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n  const hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n","import { isThenable } from './is';\n\n/** SyncPromise internal states */\nenum States {\n  /** Pending */\n  PENDING = 'PENDING',\n  /** Resolved / OK */\n  RESOLVED = 'RESOLVED',\n  /** Rejected / Error */\n  REJECTED = 'REJECTED',\n}\n\n/** JSDoc */\ninterface Handler<T, U> {\n  onFail: HandlerOnFail<U>;\n  onSuccess: HandlerOnSuccess<T, U>;\n}\n\ntype HandlerOnSuccess<T, U = any> = (value: T) => U | Thenable<U>;\ntype HandlerOnFail<U = any> = (reason: any) => U | Thenable<U>;\n\n/** JSDoc */\ninterface Thenable<T> {\n  /** JSDoc */\n  then<U>(onSuccess?: HandlerOnSuccess<T, U>, onFail?: HandlerOnFail<U> | ((reason: any) => void)): Thenable<U>;\n}\n\ntype Resolve<R> = (value?: R | Thenable<R> | any) => void;\ntype Reject = (value?: any) => void;\n\n/** JSDoc */\nexport class SyncPromise<T> implements PromiseLike<T> {\n  /** JSDoc */\n  private _state: States = States.PENDING;\n  /** JSDoc */\n  private _handlers: Array<Handler<T, any>> = [];\n  /** JSDoc */\n  private _value: T | any;\n\n  public constructor(callback: (resolve: Resolve<T>, reject: Reject) => void) {\n    try {\n      callback(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value: T) => {\n    this._setResult(value, States.RESOLVED);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason: any) => {\n    this._setResult(reason, States.REJECTED);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (value: T | any, state: States) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      (value as Thenable<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._value = value;\n    this._state = state;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    if (this._state === States.REJECTED) {\n      // tslint:disable-next-line:no-unsafe-any\n      this._handlers.forEach(h => h.onFail && h.onFail(this._value));\n    } else {\n      // tslint:disable-next-line:no-unsafe-any\n      this._handlers.forEach(h => h.onSuccess && h.onSuccess(this._value));\n    }\n\n    this._handlers = [];\n    return;\n  };\n\n  /** JSDoc */\n  private readonly _attachHandler = (handler: Handler<T, any>) => {\n    this._handlers = this._handlers.concat(handler);\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined,\n  ): SyncPromise<TResult1 | TResult2> {\n    // public then<U>(onSuccess?: HandlerOnSuccess<T, U>, onFail?: HandlerOnFail<U>): SyncPromise<T | U> {\n    return new SyncPromise<TResult1 | TResult2>((resolve, reject) => {\n      this._attachHandler({\n        onFail: reason => {\n          if (!onrejected) {\n            reject(reason);\n            return;\n          }\n\n          try {\n            resolve(onrejected(reason));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n        onSuccess: result => {\n          if (!onfulfilled) {\n            resolve(result);\n            return;\n          }\n          try {\n            resolve(onfulfilled(result));\n            return;\n          } catch (e) {\n            reject(e);\n            return;\n          }\n        },\n      });\n    });\n  }\n\n  /** JSDoc */\n  public catch<U>(onFail: HandlerOnFail<U>): SyncPromise<U> {\n    // tslint:disable-next-line:no-unsafe-any\n    return this.then<U>((val: any) => val, onFail as any);\n  }\n\n  /** JSDoc */\n  public toString(): string {\n    return `[object SyncPromise]`;\n  }\n\n  /** JSDoc */\n  public static resolve<U>(value?: U | Thenable<U>): SyncPromise<U> {\n    return new SyncPromise<U>(resolve => {\n      resolve(value);\n    });\n  }\n\n  /** JSDoc */\n  public static reject<U>(reason?: any): SyncPromise<U> {\n    return new SyncPromise<U>((_, reject) => {\n      reject(reason);\n    });\n  }\n}\n","import { Span as SpanInterface } from '@sentry/types';\nimport { uuid4 } from '@sentry/utils';\n\nexport const TRACEPARENT_REGEXP = /([0-9a-f]{2})-([0-9a-f]{32})-([0-9a-f]{16})-([0-9a-f]{2})/;\n\n/**\n * Span containg all data about a span\n */\nexport class Span implements SpanInterface {\n  public constructor(\n    private readonly _traceId: string = uuid4(),\n    private readonly _spanId: string = uuid4().substring(16),\n    private readonly _recorded: boolean = false,\n    private readonly _parent?: Span,\n  ) {}\n\n  /**\n   * Continues a trace\n   * @param traceparent Traceparent string\n   */\n  public static fromTraceparent(traceparent: string): Span | undefined {\n    const matches = traceparent.match(TRACEPARENT_REGEXP);\n    if (matches) {\n      const parent = new Span(matches[2], matches[3], matches[4] === '01' ? true : false);\n      return new Span(matches[2], undefined, undefined, parent);\n    }\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    return `00-${this._traceId}-${this._spanId}-${this._recorded ? '01' : '00'}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): object {\n    return {\n      parent: (this._parent && this._parent.toJSON()) || undefined,\n      span_id: this._spanId,\n      trace_id: this._traceId,\n    };\n  }\n}\n","import { Breadcrumb, Event, EventHint, EventProcessor, Scope as ScopeInterface, Severity, User } from '@sentry/types';\nimport { getGlobalObject, isThenable, normalize, SyncPromise } from '@sentry/utils';\n\nimport { Span } from './span';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: string } = {};\n\n  /** Extra */\n  protected _extra: { [key: string]: any } = {};\n\n  /** Contexts */\n  protected _context: { [key: string]: any } = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction */\n  protected _transaction?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      setTimeout(() => {\n        this._scopeListeners.forEach(callback => {\n          callback(this);\n        });\n        this._notifyingListeners = false;\n      });\n    }\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): SyncPromise<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      // tslint:disable-next-line:strict-type-predicates\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as Promise<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .catch(reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .catch(reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = normalize(user);\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): this {\n    this._tags = {\n      ...this._tags,\n      ...normalize(tags),\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): this {\n    this._tags = { ...this._tags, [key]: normalize(value) };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extra: { [key: string]: any }): this {\n    this._extra = {\n      ...this._extra,\n      ...normalize(extra),\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: any): this {\n    this._extra = { ...this._extra, [key]: normalize(extra) };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = normalize(fingerprint);\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = normalize(level);\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransaction(transaction?: string): this {\n    this._transaction = transaction;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(name: string, context: { [key: string]: any } | null): this {\n    this._context[name] = context ? normalize(context) : undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSpan(): Span {\n    const span = new Span();\n    this.setSpan(span);\n    return span;\n  }\n\n  /**\n   * Internal getter for Span, used in Hub.\n   * @hidden\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    Object.assign(newScope, scope, {\n      _scopeListeners: [],\n    });\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._context = { ...scope._context };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._transaction = scope._transaction;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._context = {};\n    this._level = undefined;\n    this._transaction = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const timestamp = new Date().getTime() / 1000;\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, normalize(mergedBreadcrumb)].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, normalize(mergedBreadcrumb)];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @param maxBreadcrumbs number of max breadcrumbs to merged into event.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): SyncPromise<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._context && Object.keys(this._context).length) {\n      event.contexts = { ...this._context, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transaction) {\n      event.transaction = this._transaction;\n    }\n    if (this._span) {\n      event.contexts = event.contexts || {};\n      event.contexts.trace = this._span;\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  const global = getGlobalObject<Window | NodeJS.Global>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n","import {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  Event,\n  EventHint,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Severity,\n  User,\n} from '@sentry/types';\nimport { consoleSandbox, dynamicRequire, getGlobalObject, logger, uuid4 } from '@sentry/utils';\n\nimport { Carrier, Layer } from './interfaces';\nimport { Scope } from './scope';\n\ndeclare module 'domain' {\n  export let active: Domain;\n  /**\n   * Extension for domain interface\n   */\n  export interface Domain {\n    __SENTRY__?: Carrier;\n  }\n}\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be incresed when the global interface\n * changes a and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 3;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 30;\n\n/**\n * Absolute maximum number of breadcrumbs added to an event. The\n * `maxBreadcrumbs` option cannot be higher than this value.\n */\nconst MAX_BREADCRUMBS = 100;\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this._stack.push({ client, scope });\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _invokeClient<M extends keyof Client>(method: M, ...args: any[]): void {\n    const top = this.getStackTop();\n    if (top && top.client && top.client[method]) {\n      (top.client as any)[method](...args, top.scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const stack = this.getStack();\n    const parentScope = stack.length > 0 ? stack[stack.length - 1].scope : undefined;\n    const scope = Scope.clone(parentScope);\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    return this.getStack().pop() !== undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this._invokeClient('captureException', exception, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this._invokeClient('captureMessage', message, level, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = (this._lastEventId = uuid4());\n    this._invokeClient('captureEvent', event, {\n      ...hint,\n      event_id: eventId,\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const top = this.getStackTop();\n\n    if (!top.scope || !top.client) {\n      return;\n    }\n\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (top.client.getOptions && top.client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) {\n      return;\n    }\n\n    const timestamp = new Date().getTime() / 1000;\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) {\n      return;\n    }\n\n    top.scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: string }): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: { [key: string]: any }): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: string): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: any): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const top = this.getStackTop();\n    if (!top.scope) {\n      return;\n    }\n    top.scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const top = this.getStackTop();\n    if (top.scope && top.client) {\n      callback(top.scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) {\n      return null;\n    }\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    const top = this.getStackTop();\n    if (top.scope && top.client) {\n      const span = top.scope.getSpan();\n      if (span) {\n        return {\n          'sentry-trace': span.toTraceparent(),\n        };\n      }\n    }\n    return {};\n  }\n}\n\n/** Returns the global shim registry. */\nexport function getMainCarrier(): Carrier {\n  const carrier = getGlobalObject();\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {\n    hub: undefined,\n  };\n  return carrier;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there\n  try {\n    // We need to use `dynamicRequire` because `require` on it's own will be optimized by webpack.\n    // We do not want this to happen, we need to try to `require` the domain node module and fail if we are in browser\n    // for example so we do not have to shim it and use `getCurrentHub` universally.\n    const domain = dynamicRequire(module, 'domain');\n    const activeDomain = domain.active;\n\n    // If there no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or its an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {\n    return carrier.__SENTRY__.hub;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = new Hub();\n  return carrier.__SENTRY__.hub;\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) {\n    return false;\n  }\n  carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  carrier.__SENTRY__.hub = hub;\n  return true;\n}\n","import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport { Breadcrumb, Event, Severity, User } from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // tslint:disable-next-line:no-unsafe-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\nexport function captureException(exception: any): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, level?: Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normailzed.\n */\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: { [key: string]: any }): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: string }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normailzed.\n */\n\nexport function setExtra(key: string, extra: any): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n * @param key String key of tag\n * @param value String value of tag\n */\nexport function setTag(key: string, value: string): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n */\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n","import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\nimport { SentryError } from '@sentry/utils';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w\\.-]+)(?::(\\d+))?\\/(.+)/;\n\n/** Error message */\nconst ERROR_MESSAGE = 'Invalid Dsn';\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport class Dsn implements DsnComponents {\n  /** Protocol used to connect to Sentry. */\n  public protocol!: DsnProtocol;\n  /** Public authorization key. */\n  public user!: string;\n  /** private _authorization key (deprecated, optional). */\n  public pass!: string;\n  /** Hostname of the Sentry instance. */\n  public host!: string;\n  /** Port of the Sentry instance. */\n  public port!: string;\n  /** Path */\n  public path!: string;\n  /** Project ID */\n  public projectId!: string;\n\n  /** Creates a new Dsn component */\n  public constructor(from: DsnLike) {\n    if (typeof from === 'string') {\n      this._fromString(from);\n    } else {\n      this._fromComponents(from);\n    }\n\n    this._validate();\n  }\n\n  /**\n   * Renders the string representation of this Dsn.\n   *\n   * By default, this will render the public representation without the password\n   * component. To get the deprecated private _representation, set `withPassword`\n   * to true.\n   *\n   * @param withPassword When set to true, the password will be included.\n   */\n  public toString(withPassword: boolean = false): string {\n    // tslint:disable-next-line:no-this-assignment\n    const { host, path, pass, port, projectId, protocol, user } = this;\n    return (\n      `${protocol}://${user}${withPassword && pass ? `:${pass}` : ''}` +\n      `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n    );\n  }\n\n  /** Parses a string into this Dsn. */\n  private _fromString(str: string): void {\n    const match = DSN_REGEX.exec(str);\n    if (!match) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    const [protocol, user, pass = '', host, port = '', lastPath] = match.slice(1);\n    let path = '';\n    let projectId = lastPath;\n    const split = projectId.split('/');\n    if (split.length > 1) {\n      path = split.slice(0, -1).join('/');\n      projectId = split.pop() as string;\n    }\n    Object.assign(this, { host, pass, path, projectId, port, protocol, user });\n  }\n\n  /** Maps Dsn components into this instance. */\n  private _fromComponents(components: DsnComponents): void {\n    this.protocol = components.protocol;\n    this.user = components.user;\n    this.pass = components.pass || '';\n    this.host = components.host;\n    this.port = components.port || '';\n    this.path = components.path || '';\n    this.projectId = components.projectId;\n  }\n\n  /** Validates this Dsn and throws on error. */\n  private _validate(): void {\n    ['protocol', 'user', 'host', 'projectId'].forEach(component => {\n      if (!this[component as keyof DsnComponents]) {\n        throw new SentryError(ERROR_MESSAGE);\n      }\n    });\n\n    if (this.protocol !== 'http' && this.protocol !== 'https') {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n\n    if (this.port && Number.isNaN(parseInt(this.port, 10))) {\n      throw new SentryError(ERROR_MESSAGE);\n    }\n  }\n}\n","import { DsnLike } from '@sentry/types';\nimport { urlEncode } from '@sentry/utils';\n\nimport { Dsn } from './dsn';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Helper class to provide urls to different Sentry endpoints. */\nexport class API {\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: Dsn;\n  /** Create a new instance of API */\n  public constructor(public dsn: DsnLike) {\n    this._dsnObject = new Dsn(dsn);\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): Dsn {\n    return this._dsnObject;\n  }\n\n  /** Returns a string with auth headers in the url to the store endpoint. */\n  public getStoreEndpoint(): string {\n    return `${this._getBaseUrl()}${this.getStoreEndpointPath()}`;\n  }\n\n  /** Returns the store endpoint with auth added in url encoded. */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    const dsn = this._dsnObject;\n    const auth = {\n      sentry_key: dsn.user,\n      sentry_version: SENTRY_API_VERSION,\n    };\n    // Auth is intentionally sent as part of query string (NOT as custom HTTP header)\n    // to avoid preflight CORS requests\n    return `${this.getStoreEndpoint()}?${urlEncode(auth)}`;\n  }\n\n  /** Returns the base path of the url including the port. */\n  private _getBaseUrl(): string {\n    const dsn = this._dsnObject;\n    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n    const port = dsn.port ? `:${dsn.port}` : '';\n    return `${protocol}//${dsn.host}${port}`;\n  }\n\n  /** Returns only the path component for the store endpoint. */\n  public getStoreEndpointPath(): string {\n    const dsn = this._dsnObject;\n    return `${dsn.path ? `/${dsn.path}` : ''}/api/${dsn.projectId}/store/`;\n  }\n\n  /** Returns an object that can be used in request headers. */\n  public getRequestHeaders(clientName: string, clientVersion: string): { [key: string]: string } {\n    const dsn = this._dsnObject;\n    const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n    header.push(`sentry_timestamp=${new Date().getTime()}`);\n    header.push(`sentry_client=${clientName}/${clientVersion}`);\n    header.push(`sentry_key=${dsn.user}`);\n    if (dsn.pass) {\n      header.push(`sentry_secret=${dsn.pass}`);\n    }\n    return {\n      'Content-Type': 'application/json',\n      'X-Sentry-Auth': header.join(', '),\n    };\n  }\n\n  /** Returns the url to the report dialog endpoint. */\n  public getReportDialogEndpoint(\n    dialogOptions: {\n      [key: string]: any;\n      user?: { name?: string; email?: string };\n    } = {},\n  ): string {\n    const dsn = this._dsnObject;\n    const endpoint = `${this._getBaseUrl()}${dsn.path ? `/${dsn.path}` : ''}/api/embed/error-page/`;\n\n    const encodedOptions = [];\n    encodedOptions.push(`dsn=${dsn.toString()}`);\n    for (const key in dialogOptions) {\n      if (key === 'user') {\n        if (!dialogOptions.user) {\n          continue;\n        }\n        if (dialogOptions.user.name) {\n          encodedOptions.push(`name=${encodeURIComponent(dialogOptions.user.name)}`);\n        }\n        if (dialogOptions.user.email) {\n          encodedOptions.push(`email=${encodeURIComponent(dialogOptions.user.email)}`);\n        }\n      } else {\n        encodedOptions.push(`${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`);\n      }\n    }\n    if (encodedOptions.length) {\n      return `${endpoint}?${encodedOptions.join('&')}`;\n    }\n\n    return endpoint;\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames: string[] = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(defaultIntegration => {\n      if (\n        userIntegrationsNames.indexOf(defaultIntegration.name) === -1 &&\n        pickedIntegrationsNames.indexOf(defaultIntegration.name) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(defaultIntegration.name);\n      }\n    });\n\n    // Don't add same user integration twice\n    userIntegrations.forEach(userIntegration => {\n      if (pickedIntegrationsNames.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    return [...defaultIntegrations];\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n","import { Scope } from '@sentry/hub';\nimport { Client, Event, EventHint, Integration, IntegrationClass, Options, SdkInfo, Severity } from '@sentry/types';\nimport { isPrimitive, isThenable, logger, SyncPromise, truncate, uuid4 } from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { Dsn } from './dsn';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the enviornment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected readonly _integrations: IntegrationIndex;\n\n  /** Is the client still processing a call? */\n  protected _processing: boolean = false;\n\n  /** Processing interval */\n  protected _processingInterval?: number;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n\n    this._integrations = setupIntegrations(this._options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._getBackend()\n      .eventFromException(exception, hint)\n      .then(event => this._processEvent(event, hint, scope))\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .catch(reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._processing = true;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(`${message}`, level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    promisedEvent\n      .then(event => this._processEvent(event, hint, scope))\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .catch(reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n    this._processing = true;\n\n    this._processEvent(event, hint, scope)\n      .then(finalEvent => {\n        // We need to check for finalEvent in case beforeSend returned null\n        eventId = finalEvent && finalEvent.event_id;\n        this._processing = false;\n      })\n      .catch(reason => {\n        logger.error(reason);\n        this._processing = false;\n      });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): Promise<boolean> {\n    return this._isClientProcessing(timeout).then(clientReady => {\n      if (this._processingInterval) {\n        clearInterval(this._processingInterval);\n      }\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => clientReady && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): Promise<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegrations(): IntegrationIndex {\n    return this._integrations || {};\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n      if (this._processingInterval) {\n        clearInterval(this._processingInterval);\n      }\n      this._processingInterval = (setInterval(() => {\n        if (!this._processing) {\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            resolve(false);\n          }\n        }\n      }, tick) as unknown) as number;\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional informartion about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): SyncPromise<Event | null> {\n    const { environment, release, dist, maxValueLength = 250 } = this.getOptions();\n\n    const prepared: Event = { ...event };\n    if (prepared.environment === undefined && environment !== undefined) {\n      prepared.environment = environment;\n    }\n    if (prepared.release === undefined && release !== undefined) {\n      prepared.release = release;\n    }\n\n    if (prepared.dist === undefined && dist !== undefined) {\n      prepared.dist = dist;\n    }\n\n    if (prepared.message) {\n      prepared.message = truncate(prepared.message, maxValueLength);\n    }\n\n    const exception = prepared.exception && prepared.exception.values && prepared.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = prepared.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n\n    if (prepared.event_id === undefined) {\n      prepared.event_id = uuid4();\n    }\n\n    this._addIntegrations(prepared.sdk);\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (scope) {\n      // In case we have a hub we reassign it.\n      result = scope.applyToEvent(prepared, hint);\n    }\n\n    return result;\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n  protected _addIntegrations(sdkInfo?: SdkInfo): void {\n    const integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional informartion about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): SyncPromise<Event> {\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject('SDK not enabled, will not send event.');\n    }\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    if (typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject('This event has been sampled, will not send event.');\n    }\n\n    return new SyncPromise((resolve, reject) => {\n      this._prepareEvent(event, scope, hint).then(prepared => {\n        if (prepared === null) {\n          reject('An event processor returned null, will not send event.');\n          return;\n        }\n\n        let finalEvent: Event | null = prepared;\n\n        try {\n          const isInternalException = hint && hint.data && (hint.data as { [key: string]: any }).__sentry__ === true;\n          if (isInternalException || !beforeSend) {\n            this._getBackend().sendEvent(finalEvent);\n            resolve(finalEvent);\n            return;\n          }\n\n          const beforeSendResult = beforeSend(prepared, hint);\n          if ((typeof beforeSendResult as any) === 'undefined') {\n            logger.error('`beforeSend` method has to return `null` or a valid event.');\n          } else if (isThenable(beforeSendResult)) {\n            this._handleAsyncBeforeSend(beforeSendResult as Promise<Event | null>, resolve, reject);\n          } else {\n            finalEvent = beforeSendResult as Event | null;\n\n            if (finalEvent === null) {\n              logger.log('`beforeSend` returned `null`, will not send event.');\n              resolve(null);\n              return;\n            }\n\n            // From here on we are really async\n            this._getBackend().sendEvent(finalEvent);\n            resolve(finalEvent);\n          }\n        } catch (exception) {\n          this.captureException(exception, {\n            data: {\n              __sentry__: true,\n            },\n            originalException: exception as Error,\n          });\n          reject('`beforeSend` throw an error, will not send event.');\n        }\n      });\n    });\n  }\n\n  /**\n   * Resolves before send Promise and calls resolve/reject on parent SyncPromise.\n   */\n  private _handleAsyncBeforeSend(\n    beforeSend: Promise<Event | null>,\n    resolve: (event: Event) => void,\n    reject: (reason: string) => void,\n  ): void {\n    beforeSend\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          reject('`beforeSend` returned `null`, will not send event.');\n          return;\n        }\n        // From here on we are really async\n        this._getBackend().sendEvent(processedEvent);\n        resolve(processedEvent);\n      })\n      .catch(e => {\n        reject(`beforeSend rejected with ${e}`);\n      });\n  }\n}\n","import { Event, Response, Status, Transport } from '@sentry/types';\n\n/** Noop transport */\nexport class NoopTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): Promise<Response> {\n    return Promise.resolve({\n      reason: `NoopTransport: Event has been skipped because no Dsn is configured.`,\n      status: Status.Skipped,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(_?: number): Promise<boolean> {\n    return Promise.resolve(true);\n  }\n}\n","import { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport { logger, SentryError, SyncPromise } from '@sentry/utils';\n\nimport { NoopTransport } from './transports/noop';\n\n/**\n * Internal platform-dependent Sentry SDK Backend.\n *\n * While {@link Client} contains business logic specific to an SDK, the\n * Backend offers platform specific implementations for low-level operations.\n * These are persisting and loading information, sending events, and hooking\n * into the environment.\n *\n * Backends receive a handle to the Client in their constructor. When a\n * Backend automatically generates events, it must pass them to\n * the Client for validation and processing first.\n *\n * Usually, the Client will be of corresponding type, e.g. NodeBackend\n * receives NodeClient. However, higher-level SDKs can choose to instanciate\n * multiple Backends and delegate tasks between them. In this case, an event\n * generated by one backend might very well be sent by another one.\n *\n * The client also provides access to options via {@link Client.getOptions}.\n * @hidden\n */\nexport interface Backend {\n  /** Creates a {@link Event} from an exception. */\n  eventFromException(exception: any, hint?: EventHint): SyncPromise<Event>;\n\n  /** Creates a {@link Event} from a plain message. */\n  eventFromMessage(message: string, level?: Severity, hint?: EventHint): SyncPromise<Event>;\n\n  /** Submits the event to Sentry */\n  sendEvent(event: Event): void;\n\n  /**\n   * Returns the transport that is used by the backend.\n   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.\n   *\n   * @returns The transport.\n   */\n  getTransport(): Transport;\n}\n\n/**\n * A class object that can instanciate Backend objects.\n * @hidden\n */\nexport type BackendClass<B extends Backend, O extends Options> = new (options: O) => B;\n\n/**\n * This is the base implemention of a Backend.\n * @hidden\n */\nexport abstract class BaseBackend<O extends Options> implements Backend {\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** Cached transport used internally. */\n  protected _transport: Transport;\n\n  /** Creates a new backend instance. */\n  public constructor(options: O) {\n    this._options = options;\n    if (!this._options.dsn) {\n      logger.warn('No DSN provided, backend will not do anything.');\n    }\n    this._transport = this._setupTransport();\n  }\n\n  /**\n   * Sets up the transport so it can be used later to send requests.\n   */\n  protected _setupTransport(): Transport {\n    return new NoopTransport();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(_exception: any, _hint?: EventHint): SyncPromise<Event> {\n    throw new SentryError('Backend has to implement `eventFromException` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(_message: string, _level?: Severity, _hint?: EventHint): SyncPromise<Event> {\n    throw new SentryError('Backend has to implement `eventFromMessage` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): void {\n    this._transport.sendEvent(event).catch(reason => {\n      logger.error(`Error while sending event: ${reason}`);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransport(): Transport {\n    return this._transport;\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    originalFunctionToString = Function.prototype.toString;\n\n    Function.prototype.toString = function(this: WrappedFunction, ...args: any[]): string {\n      const context = this.__sentry__ ? this.__sentry_original__ : this;\n      // tslint:disable-next-line:no-unsafe-any\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Event, Integration } from '@sentry/types';\nimport { getEventDescription, isMatchingPattern, logger } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** JSDoc */\ninterface InboundFiltersOptions {\n  blacklistUrls?: Array<string | RegExp>;\n  ignoreErrors?: Array<string | RegExp>;\n  ignoreInternal?: boolean;\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  public constructor(private readonly _options: InboundFiltersOptions = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      const hub = getCurrentHub();\n      if (!hub) {\n        return event;\n      }\n      const self = hub.getIntegration(InboundFilters);\n      if (self) {\n        const client = hub.getClient();\n        const clientOptions = client ? client.getOptions() : {};\n        const options = self._mergeOptions(clientOptions);\n        if (self._shouldDropEvent(event, options)) {\n          return null;\n        }\n      }\n      return event;\n    });\n  }\n\n  /** JSDoc */\n  private _shouldDropEvent(event: Event, options: InboundFiltersOptions): boolean {\n    if (this._isSentryError(event, options)) {\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n      return true;\n    }\n    if (this._isIgnoredError(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n      return true;\n    }\n    if (this._isBlacklistedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to being matched by \\`blacklistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    if (!this._isWhitelistedUrl(event, options)) {\n      logger.warn(\n        `Event dropped due to not being matched by \\`whitelistUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${this._getEventFilterUrl(event)}`,\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /** JSDoc */\n  private _isSentryError(event: Event, options: InboundFiltersOptions = {}): boolean {\n    if (!options.ignoreInternal) {\n      return false;\n    }\n\n    try {\n      // tslint:disable-next-line:no-unsafe-any\n      return (event as any).exception.values[0].type === 'SentryError';\n    } catch (_oO) {\n      return false;\n    }\n  }\n\n  /** JSDoc */\n  private _isIgnoredError(event: Event, options: InboundFiltersOptions = {}): boolean {\n    if (!options.ignoreErrors || !options.ignoreErrors.length) {\n      return false;\n    }\n\n    return this._getPossibleEventMessages(event).some(message =>\n      // Not sure why TypeScript complains here...\n      (options.ignoreErrors as Array<RegExp | string>).some(pattern => isMatchingPattern(message, pattern)),\n    );\n  }\n\n  /** JSDoc */\n  private _isBlacklistedUrl(event: Event, options: InboundFiltersOptions = {}): boolean {\n    // TODO: Use Glob instead?\n    if (!options.blacklistUrls || !options.blacklistUrls.length) {\n      return false;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? false : options.blacklistUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _isWhitelistedUrl(event: Event, options: InboundFiltersOptions = {}): boolean {\n    // TODO: Use Glob instead?\n    if (!options.whitelistUrls || !options.whitelistUrls.length) {\n      return true;\n    }\n    const url = this._getEventFilterUrl(event);\n    return !url ? true : options.whitelistUrls.some(pattern => isMatchingPattern(url, pattern));\n  }\n\n  /** JSDoc */\n  private _mergeOptions(clientOptions: InboundFiltersOptions = {}): InboundFiltersOptions {\n    return {\n      blacklistUrls: [...(this._options.blacklistUrls || []), ...(clientOptions.blacklistUrls || [])],\n      ignoreErrors: [\n        ...(this._options.ignoreErrors || []),\n        ...(clientOptions.ignoreErrors || []),\n        ...DEFAULT_IGNORE_ERRORS,\n      ],\n      ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,\n      whitelistUrls: [...(this._options.whitelistUrls || []), ...(clientOptions.whitelistUrls || [])],\n    };\n  }\n\n  /** JSDoc */\n  private _getPossibleEventMessages(event: Event): string[] {\n    if (event.message) {\n      return [event.message];\n    }\n    if (event.exception) {\n      try {\n        // tslint:disable-next-line:no-unsafe-any\n        const { type, value } = (event as any).exception.values[0];\n        return [`${value}`, `${type}: ${value}`];\n      } catch (oO) {\n        logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n        return [];\n      }\n    }\n    return [];\n  }\n\n  /** JSDoc */\n  private _getEventFilterUrl(event: Event): string | null {\n    try {\n      if (event.stacktrace) {\n        // tslint:disable:no-unsafe-any\n        const frames = (event as any).stacktrace.frames;\n        return frames[frames.length - 1].filename;\n      }\n      if (event.exception) {\n        // tslint:disable:no-unsafe-any\n        const frames = (event as any).exception.values[0].stacktrace.frames;\n        return frames[frames.length - 1].filename;\n      }\n      return null;\n    } catch (oO) {\n      logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n      return null;\n    }\n  }\n}\n","// tslint:disable\n\nimport { getGlobalObject, isError, isErrorEvent, normalize } from '@sentry/utils';\n\n/**\n * @hidden\n */\nexport interface StackFrame {\n  url: string;\n  func: string;\n  args: string[];\n  line: number;\n  column: number;\n  context: string[];\n}\n\n/**\n * @hidden\n */\nexport interface StackTrace {\n  /**\n   * Known modes: callers, failed, multiline, onerror, stack, stacktrace\n   */\n  mode: string;\n  mechanism: string;\n  name: string;\n  message: string;\n  url: string;\n  stack: StackFrame[];\n  useragent: string;\n  original?: string;\n}\n\ninterface ComputeStackTrace {\n  /**\n   * Computes a stack trace for an exception.\n   * @param {Error} ex\n   * @param {(string|number)=} depth\n   */\n  (ex: Error, depth?: string | number): StackTrace;\n}\n\n/**\n * TraceKit - Cross brower stack traces\n *\n * This was originally forked from github.com/occ/TraceKit, but has since been\n * largely modified and is now maintained as part of Sentry JS SDK.\n *\n * NOTE: Last merge with upstream repository\n * Jul 11,2018 - #f03357c\n *\n * https://github.com/csnover/TraceKit\n * @license MIT\n * @namespace TraceKit\n */\n\nvar window = getGlobalObject<Window>();\n\ninterface TraceKit {\n  _report: any;\n  _collectWindowErrors: any;\n  _computeStackTrace: any;\n  _linesOfContext: any;\n}\n\nvar TraceKit: TraceKit = {\n  _report: false,\n  _collectWindowErrors: false,\n  _computeStackTrace: false,\n  _linesOfContext: false,\n};\n\n// var TraceKit: TraceKitInterface = {};\n// var TraceKit = {};\n\n// global reference to slice\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n\n/**\n * A better form of hasOwnProperty<br/>\n * Example: `_has(MainHostObject, property) === true/false`\n *\n * @param {Object} object to check property\n * @param {string} key to check\n * @return {Boolean} true if the object has the key and it is not inherited\n */\nfunction _has(object: any, key: any) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * A safe form of location.href<br/>\n *\n * @return {string} location.href\n */\nfunction getLocationHref() {\n  if (typeof document === 'undefined' || document.location == null) return '';\n  return document.location.href;\n}\n\n/**\n * Cross-browser processing of unhandled exceptions\n *\n * Syntax:\n * ```js\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n * ```\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *     on top frame; column number is not guaranteed\n *   - Opera: full stack trace with line and column numbers\n *   - Chrome: full stack trace with line and column numbers\n *   - Safari: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *   - IE: line and column number for the top frame only; some frames\n *     may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit._computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a TraceKit.StackTrace object as described in the\n * TraceKit._computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nTraceKit._report = (function reportModuleWrapper() {\n  var handlers: any = [],\n    lastException: any = null,\n    lastExceptionStack: any = null;\n\n  /**\n   * Add a crash handler.\n   * @param {Function} handler\n   * @memberof TraceKit.report\n   */\n  function _subscribe(handler: any) {\n    // NOTE: We call both handlers manually in browser/integrations/globalhandler.ts\n    // So user can choose which one he wants to attach\n\n    // installGlobalHandler();\n    // installGlobalUnhandledRejectionHandler();\n    handlers.push(handler);\n  }\n\n  /**\n   * Dispatch stack information to all handlers.\n   * @param {TraceKit.StackTrace} stack\n   * @param {boolean} isWindowError Is this a top-level window error?\n   * @param {Error=} error The error that's being handled (if available, null otherwise)\n   * @memberof TraceKit.report\n   * @throws An exception if an error occurs while calling an handler.\n   */\n  function _notifyHandlers(stack: any, isWindowError: any, error: any) {\n    var exception = null;\n    if (isWindowError && !TraceKit._collectWindowErrors) {\n      return;\n    }\n    for (var i in handlers) {\n      if (_has(handlers, i)) {\n        try {\n          handlers[i](stack, isWindowError, error);\n        } catch (inner) {\n          exception = inner;\n        }\n      }\n    }\n\n    if (exception) {\n      throw exception;\n    }\n  }\n\n  var _oldOnerrorHandler: any, _onErrorHandlerInstalled: any;\n\n  /**\n   * Ensures all global unhandled exceptions are recorded.\n   * Supported by Gecko and IE.\n   * @param {string} message Error message.\n   * @param {string} url URL of script that generated the exception.\n   * @param {(number|string)} lineNo The line number at which the error occurred.\n   * @param {(number|string)=} columnNo The column number at which the error occurred.\n   * @param {Error=} errorObj The actual Error object.\n   * @memberof TraceKit.report\n   */\n  function _traceKitWindowOnError(message: any, url: any, lineNo: any, columnNo: any, errorObj: any) {\n    var stack = null;\n    // If 'errorObj' is ErrorEvent, get real Error from inside\n    errorObj = isErrorEvent(errorObj) ? errorObj.error : errorObj;\n    // If 'message' is ErrorEvent, get real message from inside\n    message = isErrorEvent(message) ? message.message : message;\n\n    if (lastExceptionStack) {\n      TraceKit._computeStackTrace._augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n      processLastException();\n    } else if (errorObj && isError(errorObj)) {\n      stack = TraceKit._computeStackTrace(errorObj);\n      stack.mechanism = 'onerror';\n      _notifyHandlers(stack, true, errorObj);\n    } else {\n      var location: any = {\n        url: url,\n        line: lineNo,\n        column: columnNo,\n      };\n\n      var name;\n      var msg = message; // must be new var or will modify original `arguments`\n      if ({}.toString.call(message) === '[object String]') {\n        var groups = message.match(ERROR_TYPES_RE);\n        if (groups) {\n          name = groups[1];\n          msg = groups[2];\n        }\n      }\n\n      location.func = UNKNOWN_FUNCTION;\n      location.context = null;\n      stack = {\n        name: name,\n        message: msg,\n        mode: 'onerror',\n        mechanism: 'onerror',\n        stack: [\n          {\n            ...location,\n            // Firefox sometimes doesn't return url correctly and this is an old behavior\n            // that I prefer to port here as well.\n            // It can be altered only here, as previously it's using `location.url` for other things — Kamil\n            url: location.url || getLocationHref(),\n          },\n        ],\n      };\n\n      _notifyHandlers(stack, true, null);\n    }\n\n    if (_oldOnerrorHandler) {\n      // @ts-ignore\n      return _oldOnerrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  }\n\n  /**\n   * Ensures all unhandled rejections are recorded.\n   * @param {PromiseRejectionEvent} e event.\n   * @memberof TraceKit.report\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n   */\n  function _traceKitWindowOnUnhandledRejection(e: any) {\n    var err = (e && (e.detail ? e.detail.reason : e.reason)) || e;\n    var stack = TraceKit._computeStackTrace(err);\n    stack.mechanism = 'onunhandledrejection';\n    if (!stack.message) {\n      stack.message = JSON.stringify(normalize(err))\n    }\n    _notifyHandlers(stack, true, err);\n  }\n\n  /**\n   * Install a global onerror handler\n   * @memberof TraceKit.report\n   */\n  function _installGlobalHandler() {\n    if (_onErrorHandlerInstalled === true) {\n      return;\n    }\n\n    _oldOnerrorHandler = window.onerror;\n    window.onerror = _traceKitWindowOnError;\n    _onErrorHandlerInstalled = true;\n  }\n\n  /**\n   * Install a global onunhandledrejection handler\n   * @memberof TraceKit.report\n   */\n  function _installGlobalUnhandledRejectionHandler() {\n    (window as any).onunhandledrejection = _traceKitWindowOnUnhandledRejection;\n  }\n\n  /**\n   * Process the most recent exception\n   * @memberof TraceKit.report\n   */\n  function processLastException() {\n    var _lastExceptionStack = lastExceptionStack,\n      _lastException = lastException;\n    lastExceptionStack = null;\n    lastException = null;\n    _notifyHandlers(_lastExceptionStack, false, _lastException);\n  }\n\n  /**\n   * Reports an unhandled Error to TraceKit.\n   * @param {Error} ex\n   * @memberof TraceKit.report\n   * @throws An exception if an incomplete stack trace is detected (old IE browsers).\n   */\n  function _report(ex: any) {\n    if (lastExceptionStack) {\n      if (lastException === ex) {\n        return; // already caught by an inner catch block, ignore\n      } else {\n        processLastException();\n      }\n    }\n\n    var stack = TraceKit._computeStackTrace(ex);\n    lastExceptionStack = stack;\n    lastException = ex;\n\n    // If the stack trace is incomplete, wait for 2 seconds for\n    // slow slow IE to see if onerror occurs or not before reporting\n    // this exception; otherwise, we will end up with an incomplete\n    // stack trace\n    setTimeout(\n      function() {\n        if (lastException === ex) {\n          processLastException();\n        }\n      },\n      stack.incomplete ? 2000 : 0,\n    );\n\n    throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n  }\n\n  (_report as any)._subscribe = _subscribe;\n  (_report as any)._installGlobalHandler = _installGlobalHandler;\n  (_report as any)._installGlobalUnhandledRejectionHandler = _installGlobalUnhandledRejectionHandler;\n\n  return _report;\n})();\n\n/**\n * An object representing a single stack frame.\n * @typedef {Object} StackFrame\n * @property {string} url The JavaScript or HTML file URL.\n * @property {string} func The function name, or empty for anonymous functions (if guessing did not work).\n * @property {string[]?} args The arguments passed to the function, if known.\n * @property {number=} line The line number, if known.\n * @property {number=} column The column number, if known.\n * @property {string[]} context An array of source code lines; the middle element corresponds to the correct line#.\n * @memberof TraceKit\n */\n\n/**\n * An object representing a JavaScript stack trace.\n * @typedef {Object} StackTrace\n * @property {string} name The name of the thrown exception.\n * @property {string} message The exception error message.\n * @property {TraceKit.StackFrame[]} stack An array of stack frames.\n * @property {string} mode 'stack', 'stacktrace', 'multiline', 'callers', 'onerror', or 'failed' -- method used to collect the stack trace.\n * @memberof TraceKit\n */\n\n/**\n * TraceKit._computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   ```js\n *   s = TraceKit._computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n *   ```\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit._computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit._computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n * @memberof TraceKit\n * @namespace\n */\n\nTraceKit._computeStackTrace = (function _computeStackTraceWrapper() {\n  // Contents of Exception in various browsers.\n  //\n  // SAFARI:\n  // ex.message = Can't find variable: qq\n  // ex.line = 59\n  // ex.sourceId = 580238192\n  // ex.sourceURL = http://...\n  // ex.expressionBeginOffset = 96\n  // ex.expressionCaretOffset = 98\n  // ex.expressionEndOffset = 98\n  // ex.name = ReferenceError\n  //\n  // FIREFOX:\n  // ex.message = qq is not defined\n  // ex.fileName = http://...\n  // ex.lineNumber = 59\n  // ex.columnNumber = 69\n  // ex.stack = ...stack trace... (see the example below)\n  // ex.name = ReferenceError\n  //\n  // CHROME:\n  // ex.message = qq is not defined\n  // ex.name = ReferenceError\n  // ex.type = not_defined\n  // ex.arguments = ['aa']\n  // ex.stack = ...stack trace...\n  //\n  // INTERNET EXPLORER:\n  // ex.message = ...\n  // ex.name = ReferenceError\n  //\n  // OPERA:\n  // ex.message = ...message... (see the example below)\n  // ex.name = ReferenceError\n  // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n  // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n  /**\n   * Computes stack trace information from the stack property.\n   * Chrome and Gecko use this property.\n   * @param {Error} ex\n   * @return {?TraceKit.StackTrace} Stack trace information.\n   * @memberof TraceKit._computeStackTrace\n   */\n  function _computeStackTraceFromStackProp(ex: any) {\n    if (!ex || !ex.stack) {\n      return null;\n    }\n\n    // Chromium based browsers: Chrome, Brave, new Opera, new Edge\n    var chrome = /^\\s*at (?:(.*?) ?\\()?((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|[a-z]:|\\/).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n      // gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n      // generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n      // We need this specific case for now because we want no other regex to match.\n      gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension).*?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js))(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n      winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n      // Used to additionally parse URL/line/column from eval frames\n      isEval,\n      geckoEval = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,\n      chromeEval = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,\n      lines = ex.stack.split('\\n'),\n      stack = [],\n      submatch,\n      parts,\n      element,\n      reference = /^(.*) is undefined$/.exec(ex.message);\n\n    for (var i = 0, j = lines.length; i < j; ++i) {\n      if ((parts = chrome.exec(lines[i]))) {\n        var isNative = parts[2] && parts[2].indexOf('native') === 0; // start of line\n        isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n        if (isEval && (submatch = chromeEval.exec(parts[2]))) {\n          // throw out eval line/column and use top-most line/column number\n          parts[2] = submatch[1]; // url\n          parts[3] = submatch[2]; // line\n          parts[4] = submatch[3]; // column\n        }\n        element = {\n          url: parts[2],\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: isNative ? [parts[2]] : [],\n          line: parts[3] ? +parts[3] : null,\n          column: parts[4] ? +parts[4] : null,\n        };\n      } else if ((parts = winjs.exec(lines[i]))) {\n        element = {\n          url: parts[2],\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: [],\n          line: +parts[3],\n          column: parts[4] ? +parts[4] : null,\n        };\n      } else if ((parts = gecko.exec(lines[i]))) {\n        isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n        if (isEval && (submatch = geckoEval.exec(parts[3]))) {\n          // throw out eval line/column and use top-most line number\n          parts[1] = parts[1] || `eval`;\n          parts[3] = submatch[1];\n          parts[4] = submatch[2];\n          parts[5] = ''; // no column when eval\n        } else if (i === 0 && !parts[5] && ex.columnNumber !== void 0) {\n          // FireFox uses this awesome columnNumber property for its top frame\n          // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n          // so adding 1\n          // NOTE: this hack doesn't work if top-most frame is eval\n          stack[0].column = ex.columnNumber + 1;\n        }\n        element = {\n          url: parts[3],\n          func: parts[1] || UNKNOWN_FUNCTION,\n          args: parts[2] ? parts[2].split(',') : [],\n          line: parts[4] ? +parts[4] : null,\n          column: parts[5] ? +parts[5] : null,\n        };\n      } else {\n        continue;\n      }\n\n      if (!element.func && element.line) {\n        element.func = UNKNOWN_FUNCTION;\n      }\n\n      (element as any).context = null;\n\n      stack.push(element);\n    }\n\n    if (!stack.length) {\n      return null;\n    }\n\n    if (stack[0] && stack[0].line && !stack[0].column && reference) {\n      stack[0].column = null;\n    }\n\n    return {\n      mode: 'stack',\n      name: ex.name,\n      message: ex.message,\n      stack: stack,\n    };\n  }\n\n  /**\n   * Computes stack trace information from the stacktrace property.\n   * Opera 10+ uses this property.\n   * @param {Error} ex\n   * @return {?TraceKit.StackTrace} Stack trace information.\n   * @memberof TraceKit._computeStackTrace\n   */\n  function _computeStackTraceFromStacktraceProp(ex: any) {\n    // Access and store the stacktrace property before doing ANYTHING\n    // else to it because Opera is not very good at providing it\n    // reliably in other circumstances.\n    var stacktrace = ex.stacktrace;\n    if (!stacktrace) {\n      return;\n    }\n\n    var opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i,\n      opera11Regex = / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^\\)]+))\\((.*)\\))? in (.*):\\s*$/i,\n      lines = stacktrace.split('\\n'),\n      stack = [],\n      parts;\n\n    for (var line = 0; line < lines.length; line += 2) {\n      var element = null;\n      if ((parts = opera10Regex.exec(lines[line]))) {\n        element = {\n          url: parts[2],\n          line: +parts[1],\n          column: null,\n          func: parts[3],\n          args: [],\n        };\n      } else if ((parts = opera11Regex.exec(lines[line]))) {\n        element = {\n          url: parts[6],\n          line: +parts[1],\n          column: +parts[2],\n          func: parts[3] || parts[4],\n          args: parts[5] ? parts[5].split(',') : [],\n        };\n      }\n\n      if (element) {\n        if (!element.func && element.line) {\n          element.func = UNKNOWN_FUNCTION;\n        }\n        if (element.line) {\n          (element as any).context = null;\n        }\n\n        if (!(element as any).context) {\n          (element as any).context = [lines[line + 1]];\n        }\n\n        stack.push(element);\n      }\n    }\n\n    if (!stack.length) {\n      return null;\n    }\n\n    return {\n      mode: 'stacktrace',\n      name: ex.name,\n      message: ex.message,\n      stack: stack,\n    };\n  }\n\n  /**\n   * NOT TESTED.\n   * Computes stack trace information from an error message that includes\n   * the stack trace.\n   * Opera 9 and earlier use this method if the option to show stack\n   * traces is turned on in opera:config.\n   * @param {Error} ex\n   * @return {?TraceKit.StackTrace} Stack information.\n   * @memberof TraceKit._computeStackTrace\n   */\n  function _computeStackTraceFromOperaMultiLineMessage(ex: any) {\n    // TODO: Clean this function up\n    // Opera includes a stack trace into the exception message. An example is:\n    //\n    // Statement on line 3: Undefined variable: undefinedFunc\n    // Backtrace:\n    //   Line 3 of linked script file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.js: In function zzz\n    //         undefinedFunc(a);\n    //   Line 7 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function yyy\n    //           zzz(x, y, z);\n    //   Line 3 of inline#1 script in file://localhost/Users/andreyvit/Projects/TraceKit/javascript-client/sample.html: In function xxx\n    //           yyy(a, a, a);\n    //   Line 1 of function script\n    //     try { xxx('hi'); return false; } catch(ex) { TraceKit.report(ex); }\n    //   ...\n\n    var lines = ex.message.split('\\n');\n    if (lines.length < 4) {\n      return null;\n    }\n\n    var lineRE1 = /^\\s*Line (\\d+) of linked script ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n      lineRE2 = /^\\s*Line (\\d+) of inline#(\\d+) script in ((?:file|https?|blob)\\S+)(?:: in function (\\S+))?\\s*$/i,\n      lineRE3 = /^\\s*Line (\\d+) of function script\\s*$/i,\n      stack = [],\n      scripts = window && window.document && window.document.getElementsByTagName('script'),\n      inlineScriptBlocks = [],\n      parts;\n\n    for (var s in scripts) {\n      if (_has(scripts, s) && !scripts[s].src) {\n        inlineScriptBlocks.push(scripts[s]);\n      }\n    }\n\n    for (var line = 2; line < lines.length; line += 2) {\n      var item = null;\n      if ((parts = lineRE1.exec(lines[line]))) {\n        item = {\n          url: parts[2],\n          func: parts[3],\n          args: [],\n          line: +parts[1],\n          column: null,\n        };\n      } else if ((parts = lineRE2.exec(lines[line]))) {\n        item = {\n          url: parts[3],\n          func: parts[4],\n          args: [],\n          line: +parts[1],\n          column: null, // TODO: Check to see if inline#1 (+parts[2]) points to the script number or column number.\n        };\n      } else if ((parts = lineRE3.exec(lines[line]))) {\n        var url = getLocationHref().replace(/#.*$/, '');\n        item = {\n          url: url,\n          func: '',\n          args: [],\n          line: parts[1],\n          column: null,\n        };\n      }\n\n      if (item) {\n        if (!item.func) {\n          item.func = UNKNOWN_FUNCTION;\n        }\n        // if (context) alert(\"Context mismatch. Correct midline:\\n\" + lines[i+1] + \"\\n\\nMidline:\\n\" + midline + \"\\n\\nContext:\\n\" + context.join(\"\\n\") + \"\\n\\nURL:\\n\" + item.url);\n        (item as any).context = [lines[line + 1]];\n        stack.push(item);\n      }\n    }\n    if (!stack.length) {\n      return null; // could not parse multiline exception message as Opera stack trace\n    }\n\n    return {\n      mode: 'multiline',\n      name: ex.name,\n      message: lines[0],\n      stack: stack,\n    };\n  }\n\n  /**\n   * Adds information about the first frame to incomplete stack traces.\n   * Safari and IE require this to get complete data on the first frame.\n   * @param {TraceKit.StackTrace} stackInfo Stack trace information from\n   * one of the compute* methods.\n   * @param {string} url The URL of the script that caused an error.\n   * @param {(number|string)} lineNo The line number of the script that\n   * caused an error.\n   * @param {string=} message The error generated by the browser, which\n   * hopefully contains the name of the object that caused the error.\n   * @return {boolean} Whether or not the stack information was\n   * augmented.\n   * @memberof TraceKit._computeStackTrace\n   */\n  function _augmentStackTraceWithInitialElement(stackInfo: any, url: any, lineNo: any, message: any) {\n    var initial = {\n      url: url,\n      line: lineNo,\n    };\n\n    if (initial.url && initial.line) {\n      stackInfo.incomplete = false;\n\n      if (!(initial as any).func) {\n        (initial as any).func = UNKNOWN_FUNCTION;\n      }\n\n      if (!(initial as any).context) {\n        (initial as any).context = null;\n      }\n\n      var reference = / '([^']+)' /.exec(message);\n      if (reference) {\n        (initial as any).column = null;\n      }\n\n      if (stackInfo.stack.length > 0) {\n        if (stackInfo.stack[0].url === initial.url) {\n          if (stackInfo.stack[0].line === initial.line) {\n            return false; // already in stack trace\n          } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === (initial as any).func) {\n            stackInfo.stack[0].line = initial.line;\n            stackInfo.stack[0].context = (initial as any).context;\n            return false;\n          }\n        }\n      }\n\n      stackInfo.stack.unshift(initial);\n      stackInfo.partial = true;\n      return true;\n    } else {\n      stackInfo.incomplete = true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Computes stack trace information by walking the arguments.caller\n   * chain at the time the exception occurred. This will cause earlier\n   * frames to be missed but is the only way to get any stack trace in\n   * Safari and IE. The top frame is restored by\n   * {@link augmentStackTraceWithInitialElement}.\n   * @param {Error} ex\n   * @return {TraceKit.StackTrace=} Stack trace information.\n   * @memberof TraceKit._computeStackTrace\n   */\n  function _computeStackTraceByWalkingCallerChain(ex: any, depth: any) {\n    var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n      stack = [],\n      funcs = {},\n      recursion = false,\n      parts,\n      item;\n\n    for (var curr = _computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n      if (curr === _computeStackTrace || curr === TraceKit._report) {\n        continue;\n      }\n\n      item = {\n        url: null,\n        func: UNKNOWN_FUNCTION,\n        args: [],\n        line: null,\n        column: null,\n      };\n\n      if (curr.name) {\n        item.func = curr.name;\n      } else if ((parts = functionName.exec(curr.toString()))) {\n        item.func = parts[1];\n      }\n\n      if (typeof item.func === 'undefined') {\n        try {\n          item.func = (parts as any).input.substring(0, (parts as any).input.indexOf('{'));\n        } catch (e) {}\n      }\n\n      if ((funcs as any)['' + curr]) {\n        recursion = true;\n      } else {\n        (funcs as any)['' + curr] = true;\n      }\n\n      stack.push(item);\n    }\n\n    if (depth) {\n      stack.splice(0, depth);\n    }\n\n    var result = {\n      mode: 'callers',\n      name: ex.name,\n      message: ex.message,\n      stack: stack,\n    };\n    _augmentStackTraceWithInitialElement(\n      result,\n      ex.sourceURL || ex.fileName,\n      ex.line || ex.lineNumber,\n      ex.message || ex.description,\n    );\n    return result;\n  }\n\n  /**\n   * Computes a stack trace for an exception.\n   * @param {Error} ex\n   * @param {(string|number)=} depth\n   * @memberof TraceKit._computeStackTrace\n   */\n  function computeStackTrace(ex: any, depth: any) {\n    var stack = null;\n    depth = depth == null ? 0 : +depth;\n\n    try {\n      // This must be tried first because Opera 10 *destroys*\n      // its stacktrace property if you try to access the stack\n      // property first!!\n      stack = _computeStackTraceFromStacktraceProp(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {}\n\n    try {\n      stack = _computeStackTraceFromStackProp(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {}\n\n    try {\n      stack = _computeStackTraceFromOperaMultiLineMessage(ex);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {}\n\n    try {\n      stack = _computeStackTraceByWalkingCallerChain(ex, depth + 1);\n      if (stack) {\n        return stack;\n      }\n    } catch (e) {}\n\n    return {\n      original: ex,\n      name: ex.name,\n      message: ex.message,\n      mode: 'failed',\n    };\n  }\n\n  (computeStackTrace as any)._augmentStackTraceWithInitialElement = _augmentStackTraceWithInitialElement;\n  (computeStackTrace as any)._computeStackTraceFromStackProp = _computeStackTraceFromStackProp;\n\n  return computeStackTrace;\n})();\n\nTraceKit._collectWindowErrors = true;\nTraceKit._linesOfContext = 11;\n\nconst _subscribe = TraceKit._report._subscribe;\nconst _installGlobalHandler = TraceKit._report._installGlobalHandler;\nconst _installGlobalUnhandledRejectionHandler = TraceKit._report._installGlobalUnhandledRejectionHandler;\nconst _computeStackTrace: ComputeStackTrace = TraceKit._computeStackTrace;\n\nexport { _subscribe, _installGlobalHandler, _installGlobalUnhandledRejectionHandler, _computeStackTrace };\n","import { Event, Exception, StackFrame } from '@sentry/types';\nimport { keysToEventMessage, normalizeToSize } from '@sentry/utils';\n\nimport { _computeStackTrace, StackFrame as TraceKitStackFrame, StackTrace as TraceKitStackTrace } from './tracekit';\n\nconst STACKTRACE_LIMIT = 50;\n\n/**\n * This function creates an exception from an TraceKitStackTrace\n * @param stacktrace TraceKitStackTrace that will be converted to an exception\n * @hidden\n */\nexport function exceptionFromStacktrace(stacktrace: TraceKitStackTrace): Exception {\n  const frames = prepareFramesForEvent(stacktrace.stack);\n\n  const exception: Exception = {\n    type: stacktrace.name,\n    value: stacktrace.message,\n  };\n\n  if (frames && frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  // tslint:disable-next-line:strict-type-predicates\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\n/**\n * @hidden\n */\nexport function eventFromPlainObject(exception: {}, syntheticException: Error | null): Event {\n  const exceptionKeys = Object.keys(exception).sort();\n  const event: Event = {\n    extra: {\n      __serialized__: normalizeToSize(exception),\n    },\n    message: `Non-Error exception captured with keys: ${keysToEventMessage(exceptionKeys)}`,\n  };\n\n  if (syntheticException) {\n    const stacktrace = _computeStackTrace(syntheticException);\n    const frames = prepareFramesForEvent(stacktrace.stack);\n    event.stacktrace = {\n      frames,\n    };\n  }\n\n  return event;\n}\n\n/**\n * @hidden\n */\nexport function eventFromStacktrace(stacktrace: TraceKitStackTrace): Event {\n  const exception = exceptionFromStacktrace(stacktrace);\n\n  return {\n    exception: {\n      values: [exception],\n    },\n  };\n}\n\n/**\n * @hidden\n */\nexport function prepareFramesForEvent(stack: TraceKitStackFrame[]): StackFrame[] {\n  if (!stack || !stack.length) {\n    return [];\n  }\n\n  let localStack = stack;\n\n  const firstFrameFunction = localStack[0].func || '';\n  const lastFrameFunction = localStack[localStack.length - 1].func || '';\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (firstFrameFunction.includes('captureMessage') || firstFrameFunction.includes('captureException')) {\n    localStack = localStack.slice(1);\n  }\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (lastFrameFunction.includes('sentryWrapped')) {\n    localStack = localStack.slice(0, -1);\n  }\n\n  // The frame where the crash happened, should be the last entry in the array\n  return localStack\n    .map(\n      (frame: TraceKitStackFrame): StackFrame => ({\n        colno: frame.column,\n        filename: frame.url || localStack[0].url,\n        function: frame.func || '?',\n        in_app: true,\n        lineno: frame.line,\n      }),\n    )\n    .slice(0, STACKTRACE_LIMIT)\n    .reverse();\n}\n","import { API } from '@sentry/core';\nimport { Event, Response, Transport, TransportOptions } from '@sentry/types';\nimport { PromiseBuffer, SentryError } from '@sentry/utils';\n\n/** Base Transport class implementation */\nexport abstract class BaseTransport implements Transport {\n  /**\n   * @inheritDoc\n   */\n  public url: string;\n\n  /** A simple buffer holding all requests. */\n  protected readonly _buffer: PromiseBuffer<Response> = new PromiseBuffer(30);\n\n  public constructor(public options: TransportOptions) {\n    this.url = new API(this.options.dsn).getStoreEndpointWithUrlEncodedAuth();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(_: Event): Promise<Response> {\n    throw new SentryError('Transport Class has to implement `sendEvent` method');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): Promise<boolean> {\n    return this._buffer.drain(timeout);\n  }\n}\n","import { Event, Response, Status } from '@sentry/types';\nimport { getGlobalObject, supportsReferrerPolicy } from '@sentry/utils';\n\nimport { BaseTransport } from './base';\n\nconst global = getGlobalObject<Window>();\n\n/** `fetch` based transport */\nexport class FetchTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): Promise<Response> {\n    const defaultOptions: RequestInit = {\n      body: JSON.stringify(event),\n      method: 'POST',\n      // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default\n      // https://caniuse.com/#feat=referrer-policy\n      // It doesn't. And it throw exception instead of ignoring this parameter...\n      // REF: https://github.com/getsentry/raven-js/issues/1233\n      referrerPolicy: (supportsReferrerPolicy() ? 'origin' : '') as ReferrerPolicy,\n    };\n\n    return this._buffer.add(\n      global.fetch(this.url, defaultOptions).then(response => ({\n        status: Status.fromHttpCode(response.status),\n      })),\n    );\n  }\n}\n","import { Event, Response, Status } from '@sentry/types';\n\nimport { BaseTransport } from './base';\n\n/** `XHR` based transport */\nexport class XHRTransport extends BaseTransport {\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event): Promise<Response> {\n    return this._buffer.add(\n      new Promise<Response>((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.onreadystatechange = () => {\n          if (request.readyState !== 4) {\n            return;\n          }\n\n          if (request.status === 200) {\n            resolve({\n              status: Status.fromHttpCode(request.status),\n            });\n          }\n\n          reject(request);\n        };\n\n        request.open('POST', this.url);\n        request.send(JSON.stringify(event));\n      }),\n    );\n  }\n}\n","import { BaseBackend } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport } from '@sentry/types';\nimport {\n  addExceptionTypeValue,\n  isDOMError,\n  isDOMException,\n  isError,\n  isErrorEvent,\n  isPlainObject,\n  supportsFetch,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { eventFromPlainObject, eventFromStacktrace, prepareFramesForEvent } from './parsers';\nimport { _computeStackTrace } from './tracekit';\nimport { FetchTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To whitelist certain errors instead, use {@link Options.whitelistUrls}.\n   * By default, all errors will be sent.\n   */\n  blacklistUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.blacklistUrls}.\n   * By default, all errors will be sent.\n   */\n  whitelistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions = this._options.transportOptions\n      ? this._options.transportOptions\n      : { dsn: this._options.dsn };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      return new FetchTransport(transportOptions);\n    }\n    return new XHRTransport(transportOptions);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: any, hint?: EventHint): SyncPromise<Event> {\n    let event: Event;\n\n    if (isErrorEvent(exception as ErrorEvent) && (exception as ErrorEvent).error) {\n      // If it is an ErrorEvent with `error` property, extract it to get actual Error\n      const errorEvent = exception as ErrorEvent;\n      exception = errorEvent.error; // tslint:disable-line:no-parameter-reassignment\n      event = eventFromStacktrace(_computeStackTrace(exception as Error));\n      return SyncPromise.resolve(this._buildEvent(event, hint));\n    }\n    if (isDOMError(exception as DOMError) || isDOMException(exception as DOMException)) {\n      // If it is a DOMError or DOMException (which are legacy APIs, but still supported in some browsers)\n      // then we just extract the name and message, as they don't provide anything else\n      // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n      // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n      const domException = exception as DOMException;\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n\n      return this.eventFromMessage(message, Severity.Error, hint).then(messageEvent => {\n        addExceptionTypeValue(messageEvent, message);\n        return SyncPromise.resolve(this._buildEvent(messageEvent, hint));\n      });\n    }\n    if (isError(exception as Error)) {\n      // we have a real Error object, do nothing\n      event = eventFromStacktrace(_computeStackTrace(exception as Error));\n      return SyncPromise.resolve(this._buildEvent(event, hint));\n    }\n    if (isPlainObject(exception as {}) && hint && hint.syntheticException) {\n      // If it is plain Object, serialize it manually and extract options\n      // This will allow us to group events based on top-level keys\n      // which is much better than creating new group when any key/value change\n      const objectException = exception as {};\n      event = eventFromPlainObject(objectException, hint.syntheticException);\n      addExceptionTypeValue(event, 'Custom Object', undefined, {\n        handled: true,\n        synthetic: true,\n        type: 'generic',\n      });\n      event.level = Severity.Error;\n      return SyncPromise.resolve(this._buildEvent(event, hint));\n    }\n\n    // If none of previous checks were valid, then it means that\n    // it's not a DOMError/DOMException\n    // it's not a plain Object\n    // it's not a valid ErrorEvent (one with an error property)\n    // it's not an Error\n    // So bail out and capture it as a simple message:\n    const stringException = exception as string;\n    return this.eventFromMessage(stringException, undefined, hint).then(messageEvent => {\n      addExceptionTypeValue(messageEvent, `${stringException}`, undefined, {\n        handled: true,\n        synthetic: true,\n        type: 'generic',\n      });\n      messageEvent.level = Severity.Error;\n      return SyncPromise.resolve(this._buildEvent(messageEvent, hint));\n    });\n  }\n\n  /**\n   * This is an internal helper function that creates an event.\n   */\n  private _buildEvent(event: Event, hint?: EventHint): Event {\n    return {\n      ...event,\n      event_id: hint && hint.event_id,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): SyncPromise<Event> {\n    const event: Event = {\n      event_id: hint && hint.event_id,\n      level,\n      message,\n    };\n\n    if (this._options.attachStacktrace && hint && hint.syntheticException) {\n      const stacktrace = _computeStackTrace(hint.syntheticException);\n      const frames = prepareFramesForEvent(stacktrace.stack);\n      event.stacktrace = {\n        frames,\n      };\n    }\n\n    return SyncPromise.resolve(event);\n  }\n}\n","export const SDK_NAME = 'sentry.javascript.browser';\nexport const SDK_VERSION = '5.4.0';\n","import { API, BaseClient, Scope } from '@sentry/core';\nimport { DsnLike, Event, EventHint } from '@sentry/types';\nimport { getGlobalObject, logger, SyncPromise } from '@sentry/utils';\n\nimport { BrowserBackend, BrowserOptions } from './backend';\nimport { SDK_NAME, SDK_VERSION } from './version';\n\n/**\n * All properties the report dialog supports\n */\nexport interface ReportDialogOptions {\n  [key: string]: any;\n  eventId?: string;\n  dsn?: DsnLike;\n  user?: {\n    email?: string;\n    name?: string;\n  };\n  lang?: string;\n  title?: string;\n  subtitle?: string;\n  subtitle2?: string;\n  labelName?: string;\n  labelEmail?: string;\n  labelComments?: string;\n  labelClose?: string;\n  labelSubmit?: string;\n  errorGeneric?: string;\n  errorFormEntry?: string;\n  successMessage?: string;\n  /** Callback after reportDialog showed up */\n  onLoad?(): void;\n}\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserBackend, BrowserOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserOptions = {}) {\n    super(BrowserBackend, options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): SyncPromise<Event | null> {\n    event.platform = event.platform || 'javascript';\n    event.sdk = {\n      ...event.sdk,\n      name: SDK_NAME,\n      packages: [\n        ...((event.sdk && event.sdk.packages) || []),\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    return super._prepareEvent(event, scope, hint);\n  }\n\n  /**\n   * Show a report dialog to the user to send feedback to a specific event.\n   *\n   * @param options Set individual options for the dialog\n   */\n  public showReportDialog(options: ReportDialogOptions = {}): void {\n    // doesn't work without a document (React Native)\n    const document = getGlobalObject<Window>().document;\n    if (!document) {\n      return;\n    }\n\n    if (!this._isEnabled()) {\n      logger.error('Trying to call showReportDialog with Sentry Client is disabled');\n      return;\n    }\n\n    const dsn = options.dsn || this.getDsn();\n\n    if (!options.eventId) {\n      logger.error('Missing `eventId` option in showReportDialog call');\n      return;\n    }\n\n    if (!dsn) {\n      logger.error('Missing `Dsn` option in showReportDialog call');\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = new API(dsn).getReportDialogEndpoint(options);\n\n    if (options.onLoad) {\n      script.onload = options.onLoad;\n    }\n\n    (document.head || document.body).appendChild(script);\n  }\n}\n","import { captureException, getCurrentHub, withScope } from '@sentry/core';\nimport { Event as SentryEvent, Mechanism, WrappedFunction } from '@sentry/types';\nimport { addExceptionTypeValue, isString, normalize } from '@sentry/utils';\n\nconst debounceDuration: number = 1000;\nlet keypressTimeout: number | undefined;\nlet lastCapturedEvent: Event | undefined;\nlet ignoreOnError: number = 0;\n\n/**\n * @hidden\n */\nexport function shouldIgnoreOnError(): boolean {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nexport function ignoreNextOnError(): void {\n  // onerror should trigger before setTimeout\n  ignoreOnError += 1;\n  setTimeout(() => {\n    ignoreOnError -= 1;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap.\n * @returns The wrapped function.\n * @hidden\n */\nexport function wrap(\n  fn: WrappedFunction,\n  options: {\n    mechanism?: Mechanism;\n    capture?: boolean;\n  } = {},\n  before?: WrappedFunction,\n): any {\n  // tslint:disable-next-line:strict-type-predicates\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // We don't wanna wrap it twice\n    if (fn.__sentry__) {\n      return fn;\n    }\n\n    // If this has already been wrapped in the past, return that wrapped function\n    if (fn.__sentry_wrapped__) {\n      return fn.__sentry_wrapped__;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  const sentryWrapped: WrappedFunction = function(this: any): void {\n    // tslint:disable-next-line:strict-type-predicates\n    if (before && typeof before === 'function') {\n      before.apply(this, arguments);\n    }\n\n    const args = Array.prototype.slice.call(arguments);\n\n    // tslint:disable:no-unsafe-any\n    try {\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      const wrappedArguments = args.map((arg: any) => wrap(arg, options));\n\n      if (fn.handleEvent) {\n        return fn.handleEvent.apply(this, wrappedArguments);\n      }\n      return fn.apply(this, wrappedArguments);\n      // tslint:enable:no-unsafe-any\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope(scope => {\n        scope.addEventProcessor((event: SentryEvent) => {\n          const processedEvent = { ...event };\n\n          if (options.mechanism) {\n            addExceptionTypeValue(processedEvent, undefined, undefined, options.mechanism);\n          }\n\n          processedEvent.extra = {\n            ...processedEvent.extra,\n            arguments: normalize(args, 3),\n          };\n\n          return processedEvent;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // tslint:disable-line:no-empty\n\n  fn.prototype = fn.prototype || {};\n  sentryWrapped.prototype = fn.prototype;\n\n  Object.defineProperty(fn, '__sentry_wrapped__', {\n    enumerable: false,\n    value: sentryWrapped,\n  });\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  Object.defineProperties(sentryWrapped, {\n    __sentry__: {\n      enumerable: false,\n      value: true,\n    },\n    __sentry_original__: {\n      enumerable: false,\n      value: fn,\n    },\n  });\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    Object.defineProperty(sentryWrapped, 'name', {\n      get(): string {\n        return fn.name;\n      },\n    });\n  } catch (_oO) {\n    /*no-empty*/\n  }\n\n  return sentryWrapped;\n}\n\nlet debounceTimer: number = 0;\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param eventName the event name (e.g. \"click\")\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nexport function breadcrumbEventHandler(eventName: string, debounce: boolean = false): (event: Event) => void {\n  return (event: Event) => {\n    // reset keypress timeout; e.g. triggering a 'click' after\n    // a 'keypress' will reset the keypress debounce so that a new\n    // set of keypresses can be recorded\n    keypressTimeout = undefined;\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors). Ignore if we've\n    // already captured the event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    lastCapturedEvent = event;\n\n    const captureBreadcrumb = () => {\n      // try/catch both:\n      // - accessing event.target (see getsentry/raven-js#838, #768)\n      // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n      //   can throw an exception in some circumstances.\n      let target;\n      try {\n        target = event.target ? _htmlTreeAsString(event.target as Node) : _htmlTreeAsString((event as unknown) as Node);\n      } catch (e) {\n        target = '<unknown>';\n      }\n\n      if (target.length === 0) {\n        return;\n      }\n\n      getCurrentHub().addBreadcrumb(\n        {\n          category: `ui.${eventName}`, // e.g. ui.click, ui.input\n          message: target,\n        },\n        {\n          event,\n          name: eventName,\n        },\n      );\n    };\n\n    if (debounceTimer) {\n      clearTimeout(debounceTimer);\n    }\n\n    if (debounce) {\n      debounceTimer = setTimeout(captureBreadcrumb);\n    } else {\n      captureBreadcrumb();\n    }\n  };\n}\n\n/**\n * Wraps addEventListener to capture keypress UI events\n * @returns wrapped keypress events handler\n * @hidden\n */\nexport function keypressEventHandler(): (event: Event) => void {\n  // TODO: if somehow user switches keypress target before\n  //       debounce timeout is triggered, we will only capture\n  //       a single breadcrumb from the FIRST target (acceptable?)\n  return (event: Event) => {\n    let target;\n\n    try {\n      target = event.target;\n    } catch (e) {\n      // just accessing event properties can throw an exception in some rare circumstances\n      // see: https://github.com/getsentry/raven-js/issues/838\n      return;\n    }\n\n    const tagName = target && (target as HTMLElement).tagName;\n\n    // only consider keypress events on actual input elements\n    // this will disregard keypresses targeting body (e.g. tabbing\n    // through elements, hotkeys, etc)\n    if (!tagName || (tagName !== 'INPUT' && tagName !== 'TEXTAREA' && !(target as HTMLElement).isContentEditable)) {\n      return;\n    }\n\n    // record first keypress in a series, but ignore subsequent\n    // keypresses until debounce clears\n    if (!keypressTimeout) {\n      breadcrumbEventHandler('input')(event);\n    }\n    clearTimeout(keypressTimeout);\n\n    keypressTimeout = (setTimeout(() => {\n      keypressTimeout = undefined;\n    }, debounceDuration) as any) as number;\n  };\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlTreeAsString(elem: Node): string {\n  let currentElem: Node | null = elem;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  const MAX_OUTPUT_LEN = 80;\n  const out = [];\n  let height = 0;\n  let len = 0;\n  const separator = ' > ';\n  const sepLength = separator.length;\n  let nextStr;\n\n  while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n    nextStr = _htmlElementAsString(currentElem as HTMLElement);\n    // bail out if\n    // - nextStr is the 'html' element\n    // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n    //   (ignore this limit if we are on the first iteration)\n    if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n      break;\n    }\n\n    out.push(nextStr);\n\n    len += nextStr.length;\n    currentElem = currentElem.parentNode;\n  }\n\n  return out.reverse().join(separator);\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(elem: HTMLElement): string {\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n  if (elem.id) {\n    out.push(`#${elem.id}`);\n  }\n\n  className = elem.className;\n  if (className && isString(className)) {\n    classes = className.split(/\\s+/);\n    for (i = 0; i < classes.length; i++) {\n      out.push(`.${classes[i]}`);\n    }\n  }\n  const attrWhitelist = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < attrWhitelist.length; i++) {\n    key = attrWhitelist[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n","import { getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { addExceptionTypeValue, isString, logger, normalize, truncate } from '@sentry/utils';\n\nimport { shouldIgnoreOnError } from '../helpers';\nimport { eventFromStacktrace } from '../parsers';\nimport {\n  _installGlobalHandler,\n  _installGlobalUnhandledRejectionHandler,\n  _subscribe,\n  StackTrace as TraceKitStackTrace,\n} from '../tracekit';\n\n/** JSDoc */\ninterface GlobalHandlersIntegrations {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n\n    _subscribe((stack: TraceKitStackTrace, _: boolean, error: Error) => {\n      // TODO: use stack.context to get a valuable information from TraceKit, eg.\n      // [\n      //   0: \"  })\"\n      //   1: \"\"\n      //   2: \"  function foo () {\"\n      //   3: \"    Sentry.captureException('some error')\"\n      //   4: \"    Sentry.captureMessage('some message')\"\n      //   5: \"    throw 'foo'\"\n      //   6: \"  }\"\n      //   7: \"\"\n      //   8: \"  function bar () {\"\n      //   9: \"    foo();\"\n      //   10: \"  }\"\n      // ]\n      if (shouldIgnoreOnError()) {\n        return;\n      }\n      const self = getCurrentHub().getIntegration(GlobalHandlers);\n      if (self) {\n        getCurrentHub().captureEvent(self._eventFromGlobalHandler(stack), {\n          data: { stack },\n          originalException: error,\n        });\n      }\n    });\n\n    if (this._options.onerror) {\n      logger.log('Global Handler attached: onerror');\n      _installGlobalHandler();\n    }\n\n    if (this._options.onunhandledrejection) {\n      logger.log('Global Handler attached: onunhandledrejection');\n      _installGlobalUnhandledRejectionHandler();\n    }\n  }\n\n  /**\n   * This function creates an Event from an TraceKitStackTrace.\n   *\n   * @param stacktrace TraceKitStackTrace to be converted to an Event.\n   */\n  private _eventFromGlobalHandler(stacktrace: TraceKitStackTrace): Event {\n    if (!isString(stacktrace.message) && stacktrace.mechanism !== 'onunhandledrejection') {\n      // There are cases where stacktrace.message is an Event object\n      // https://github.com/getsentry/sentry-javascript/issues/1949\n      // In this specific case we try to extract stacktrace.message.error.message\n      const message = (stacktrace.message as unknown) as any;\n      stacktrace.message =\n        message.error && isString(message.error.message) ? message.error.message : 'No error message';\n    }\n    const event = eventFromStacktrace(stacktrace);\n\n    const data: { [key: string]: string } = {\n      mode: stacktrace.mode,\n    };\n\n    if (stacktrace.message) {\n      data.message = stacktrace.message;\n    }\n\n    if (stacktrace.name) {\n      data.name = stacktrace.name;\n    }\n\n    const client = getCurrentHub().getClient();\n    const maxValueLength = (client && client.getOptions().maxValueLength) || 250;\n\n    const fallbackValue = stacktrace.original\n      ? truncate(JSON.stringify(normalize(stacktrace.original)), maxValueLength)\n      : '';\n    const fallbackType = stacktrace.mechanism === 'onunhandledrejection' ? 'UnhandledRejection' : 'Error';\n\n    // This makes sure we have type/value in every exception\n    addExceptionTypeValue(event, fallbackValue, fallbackType, {\n      data,\n      handled: false,\n      type: stacktrace.mechanism,\n    });\n\n    return event;\n  }\n}\n","import { Integration, WrappedFunction } from '@sentry/types';\nimport { fill, getGlobalObject } from '@sentry/utils';\n\nimport { wrap } from '../helpers';\n\n/** Wrap timer functions and event targets to catch errors and provide better meta data */\nexport class TryCatch implements Integration {\n  /** JSDoc */\n  private _ignoreOnError: number = 0;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = TryCatch.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'TryCatch';\n\n  /** JSDoc */\n  private _wrapTimeFunction(original: () => void): () => number {\n    return function(this: any, ...args: any[]): number {\n      const originalCallback = args[0];\n      args[0] = wrap(originalCallback, {\n        mechanism: {\n          data: { function: getFunctionName(original) },\n          handled: true,\n          type: 'instrument',\n        },\n      });\n      return original.apply(this, args);\n    };\n  }\n\n  /** JSDoc */\n  private _wrapRAF(original: any): (callback: () => void) => any {\n    return function(this: any, callback: () => void): () => void {\n      return original(\n        wrap(callback, {\n          mechanism: {\n            data: {\n              function: 'requestAnimationFrame',\n              handler: getFunctionName(original),\n            },\n            handled: true,\n            type: 'instrument',\n          },\n        }),\n      );\n    };\n  }\n\n  /** JSDoc */\n  private _wrapEventTarget(target: string): void {\n    const global = getGlobalObject() as { [key: string]: any };\n    const proto = global[target] && global[target].prototype;\n\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function(\n      original: () => void,\n    ): (eventName: string, fn: EventListenerObject, options?: boolean | AddEventListenerOptions) => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): (eventName: string, fn: EventListenerObject, capture?: boolean, secure?: boolean) => void {\n        try {\n          fn.handleEvent = wrap(fn.handleEvent.bind(fn), {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          });\n        } catch (err) {\n          // can sometimes get 'Permission denied to access property \"handle Event'\n        }\n\n        return original.call(\n          this,\n          eventName,\n          wrap((fn as any) as WrappedFunction, {\n            mechanism: {\n              data: {\n                function: 'addEventListener',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n          options,\n        );\n      };\n    });\n\n    fill(proto, 'removeEventListener', function(\n      original: () => void,\n    ): (this: any, eventName: string, fn: EventListenerObject, options?: boolean | EventListenerOptions) => () => void {\n      return function(\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ): () => void {\n        let callback = (fn as any) as WrappedFunction;\n        try {\n          callback = callback && (callback.__sentry_wrapped__ || callback);\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return original.call(this, eventName, callback, options);\n      };\n    });\n  }\n\n  /**\n   * Wrap timer functions and event targets to catch errors\n   * and provide better metadata.\n   */\n  public setupOnce(): void {\n    this._ignoreOnError = this._ignoreOnError;\n\n    const global = getGlobalObject();\n\n    fill(global, 'setTimeout', this._wrapTimeFunction.bind(this));\n    fill(global, 'setInterval', this._wrapTimeFunction.bind(this));\n    fill(global, 'requestAnimationFrame', this._wrapRAF.bind(this));\n\n    [\n      'EventTarget',\n      'Window',\n      'Node',\n      'ApplicationCache',\n      'AudioTrackList',\n      'ChannelMergerNode',\n      'CryptoOperation',\n      'EventSource',\n      'FileReader',\n      'HTMLUnknownElement',\n      'IDBDatabase',\n      'IDBRequest',\n      'IDBTransaction',\n      'KeyOperation',\n      'MediaController',\n      'MessagePort',\n      'ModalWindow',\n      'Notification',\n      'SVGElementInstance',\n      'Screen',\n      'TextTrack',\n      'TextTrackCue',\n      'TextTrackList',\n      'WebSocket',\n      'WebSocketWorker',\n      'Worker',\n      'XMLHttpRequest',\n      'XMLHttpRequestEventTarget',\n      'XMLHttpRequestUpload',\n    ].forEach(this._wrapEventTarget.bind(this));\n  }\n}\n\n/**\n * Safely extract function name from itself\n */\nfunction getFunctionName(fn: any): string {\n  try {\n    return (fn && fn.name) || '<anonymous>';\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return '<anonymous>';\n  }\n}\n","import { API, getCurrentHub } from '@sentry/core';\nimport { Breadcrumb, BreadcrumbHint, Integration, Severity, WrappedFunction } from '@sentry/types';\nimport {\n  fill,\n  getEventDescription,\n  getGlobalObject,\n  isString,\n  logger,\n  normalize,\n  parseUrl,\n  safeJoin,\n  supportsHistory,\n  supportsNativeFetch,\n} from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\nimport { breadcrumbEventHandler, keypressEventHandler, wrap } from '../helpers';\n\nconst global = getGlobalObject<Window>();\nlet lastHref: string | undefined;\n/**\n * @hidden\n */\nexport interface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n  };\n}\n\n/** JSDoc */\ninterface BreadcrumbIntegrations {\n  console?: boolean;\n  dom?: boolean;\n  fetch?: boolean;\n  history?: boolean;\n  sentry?: boolean;\n  xhr?: boolean;\n}\n\n/** Default Breadcrumbs instrumentations */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbIntegrations;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: BreadcrumbIntegrations) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /** JSDoc */\n  private _instrumentConsole(): void {\n    if (!('console' in global)) {\n      return;\n    }\n    ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function(level: string): void {\n      if (!(level in global.console)) {\n        return;\n      }\n\n      fill(global.console, level, function(originalConsoleLevel: () => any): any {\n        return function(...args: any[]): any {\n          const breadcrumbData = {\n            category: 'console',\n            data: {\n              extra: {\n                arguments: normalize(args, 3),\n              },\n              logger: 'console',\n            },\n            level: Severity.fromString(level),\n            message: safeJoin(args, ' '),\n          };\n\n          if (level === 'assert') {\n            if (args[0] === false) {\n              breadcrumbData.message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n              breadcrumbData.data.extra.arguments = normalize(args.slice(1), 3);\n            }\n          }\n\n          Breadcrumbs.addBreadcrumb(breadcrumbData, {\n            input: args,\n            level,\n          });\n\n          // this fails for some browsers. :(\n          if (originalConsoleLevel) {\n            Function.prototype.apply.call(originalConsoleLevel, global.console, args);\n          }\n        };\n      });\n    });\n  }\n\n  /** JSDoc */\n  private _instrumentDOM(): void {\n    if (!('document' in global)) {\n      return;\n    }\n\n    // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n    // to the document. Do this before we instrument addEventListener.\n    global.document.addEventListener('click', breadcrumbEventHandler('click'), false);\n    global.document.addEventListener('keypress', keypressEventHandler(), false);\n\n    // After hooking into document bubbled up click and keypresses events, we also hook into user handled click & keypresses.\n    ['EventTarget', 'Node'].forEach((target: string) => {\n      const proto = (global as any)[target] && (global as any)[target].prototype;\n\n      if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n        return;\n      }\n\n      fill(proto, 'addEventListener', function(\n        original: () => void,\n      ): (\n        eventName: string,\n        fn: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ) => void {\n        return function(\n          this: any,\n          eventName: string,\n          fn: EventListenerOrEventListenerObject,\n          options?: boolean | AddEventListenerOptions,\n        ): (eventName: string, fn: EventListenerOrEventListenerObject, capture?: boolean, secure?: boolean) => void {\n          if (fn && (fn as any).handleEvent) {\n            if (eventName === 'click') {\n              fill(fn, 'handleEvent', function(innerOriginal: () => void): (caughtEvent: Event) => void {\n                return function(this: any, event: Event): (event: Event) => void {\n                  breadcrumbEventHandler('click')(event);\n                  return innerOriginal.call(this, event);\n                };\n              });\n            }\n            if (eventName === 'keypress') {\n              fill(fn, 'handleEvent', keypressEventHandler());\n            }\n          } else {\n            if (eventName === 'click') {\n              breadcrumbEventHandler('click', true)(this);\n            }\n            if (eventName === 'keypress') {\n              keypressEventHandler()(this);\n            }\n          }\n\n          return original.call(this, eventName, fn, options);\n        };\n      });\n\n      fill(proto, 'removeEventListener', function(\n        original: () => void,\n      ): (\n        this: any,\n        eventName: string,\n        fn: EventListenerObject,\n        options?: boolean | EventListenerOptions,\n      ) => () => void {\n        return function(\n          this: any,\n          eventName: string,\n          fn: EventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          let callback = (fn as any) as WrappedFunction;\n          try {\n            callback = callback && (callback.__sentry_wrapped__ || callback);\n          } catch (e) {\n            // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n          }\n          return original.call(this, eventName, callback, options);\n        };\n      });\n    });\n  }\n\n  /** JSDoc */\n  private _instrumentFetch(): void {\n    if (!supportsNativeFetch()) {\n      return;\n    }\n\n    fill(global, 'fetch', function(originalFetch: () => void): () => void {\n      return function(...args: any[]): void {\n        const fetchInput = args[0];\n        let method = 'GET';\n        let url;\n\n        if (typeof fetchInput === 'string') {\n          url = fetchInput;\n        } else if ('Request' in global && fetchInput instanceof Request) {\n          url = fetchInput.url;\n          if (fetchInput.method) {\n            method = fetchInput.method;\n          }\n        } else {\n          url = String(fetchInput);\n        }\n\n        if (args[1] && args[1].method) {\n          method = args[1].method;\n        }\n\n        const client = getCurrentHub().getClient<BrowserClient>();\n        const dsn = client && client.getDsn();\n        if (dsn) {\n          const filterUrl = new API(dsn).getStoreEndpoint();\n          // if Sentry key appears in URL, don't capture it as a request\n          // but rather as our own 'sentry' type breadcrumb\n          if (filterUrl && url.includes(filterUrl)) {\n            if (method === 'POST' && args[1] && args[1].body) {\n              addSentryBreadcrumb(args[1].body);\n            }\n            return originalFetch.apply(global, args);\n          }\n        }\n\n        const fetchData: {\n          method: string;\n          url: string;\n          status_code?: number;\n        } = {\n          method,\n          url,\n        };\n\n        return originalFetch\n          .apply(global, args)\n          .then((response: Response) => {\n            fetchData.status_code = response.status;\n            Breadcrumbs.addBreadcrumb(\n              {\n                category: 'fetch',\n                data: fetchData,\n                type: 'http',\n              },\n              {\n                input: args,\n                response,\n              },\n            );\n            return response;\n          })\n          .catch((error: Error) => {\n            Breadcrumbs.addBreadcrumb(\n              {\n                category: 'fetch',\n                data: fetchData,\n                level: Severity.Error,\n                type: 'http',\n              },\n              {\n                error,\n                input: args,\n              },\n            );\n\n            throw error;\n          });\n      };\n    });\n  }\n\n  /** JSDoc */\n  private _instrumentHistory(): void {\n    if (!supportsHistory()) {\n      return;\n    }\n\n    const captureUrlChange = (from: string | undefined, to: string | undefined): void => {\n      const parsedLoc = parseUrl(global.location.href);\n      const parsedTo = parseUrl(to as string);\n      let parsedFrom = parseUrl(from as string);\n\n      // Initial pushState doesn't provide `from` information\n      if (!parsedFrom.path) {\n        parsedFrom = parsedLoc;\n      }\n\n      // because onpopstate only tells you the \"new\" (to) value of location.href, and\n      // not the previous (from) value, we need to track the value of the current URL\n      // state ourselves\n      lastHref = to;\n\n      // Use only the path component of the URL if the URL matches the current\n      // document (almost all the time when using pushState)\n      if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        to = parsedTo.relative;\n      }\n      if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        from = parsedFrom.relative;\n      }\n\n      Breadcrumbs.addBreadcrumb({\n        category: 'navigation',\n        data: {\n          from,\n          to,\n        },\n      });\n    };\n\n    // record navigation (URL) changes\n    const oldOnPopState = global.onpopstate;\n    global.onpopstate = (...args: any[]) => {\n      const currentHref = global.location.href;\n      captureUrlChange(lastHref, currentHref);\n      if (oldOnPopState) {\n        return oldOnPopState.apply(this, args);\n      }\n    };\n\n    /**\n     * @hidden\n     */\n    function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n      // note history.pushState.length is 0; intentionally not declaring\n      // params to preserve 0 arity\n      return function(this: History, ...args: any[]): void {\n        const url = args.length > 2 ? args[2] : undefined;\n        // url argument is optional\n        if (url) {\n          // coerce to string (this is what pushState does)\n          captureUrlChange(lastHref, String(url));\n        }\n        return originalHistoryFunction.apply(this, args);\n      };\n    }\n\n    fill(global.history, 'pushState', historyReplacementFunction);\n    fill(global.history, 'replaceState', historyReplacementFunction);\n  }\n\n  /** JSDoc */\n  private _instrumentXHR(): void {\n    if (!('XMLHttpRequest' in global)) {\n      return;\n    }\n\n    /**\n     * @hidden\n     */\n    function wrapProp(prop: string, xhr: XMLHttpRequest): void {\n      // TODO: Fix XHR types\n      if (prop in xhr && typeof (xhr as { [key: string]: any })[prop] === 'function') {\n        fill(xhr, prop, original =>\n          wrap(original, {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: (original && original.name) || '<anonymous>',\n              },\n              handled: true,\n              type: 'instrument',\n            },\n          }),\n        );\n      }\n    }\n\n    const xhrproto = XMLHttpRequest.prototype;\n    fill(\n      xhrproto,\n      'open',\n      originalOpen =>\n        function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n          const url = args[1];\n          this.__sentry_xhr__ = {\n            method: args[0],\n            url: args[1],\n          };\n\n          const client = getCurrentHub().getClient<BrowserClient>();\n          const dsn = client && client.getDsn();\n          if (dsn) {\n            const filterUrl = new API(dsn).getStoreEndpoint();\n            // if Sentry key appears in URL, don't capture it as a request\n            // but rather as our own 'sentry' type breadcrumb\n            if (isString(url) && (filterUrl && url.includes(filterUrl))) {\n              this.__sentry_own_request__ = true;\n            }\n          }\n\n          return originalOpen.apply(this, args);\n        },\n    );\n\n    fill(\n      xhrproto,\n      'send',\n      originalSend =>\n        function(this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n          const xhr = this; // tslint:disable-line:no-this-assignment\n\n          if (xhr.__sentry_own_request__) {\n            addSentryBreadcrumb(args[0]);\n          }\n\n          /**\n           * @hidden\n           */\n          function onreadystatechangeHandler(): void {\n            if (xhr.readyState === 4) {\n              if (xhr.__sentry_own_request__) {\n                return;\n              }\n              try {\n                // touching statusCode in some platforms throws\n                // an exception\n                if (xhr.__sentry_xhr__) {\n                  xhr.__sentry_xhr__.status_code = xhr.status;\n                }\n              } catch (e) {\n                /* do nothing */\n              }\n              Breadcrumbs.addBreadcrumb(\n                {\n                  category: 'xhr',\n                  data: xhr.__sentry_xhr__,\n                  type: 'http',\n                },\n                {\n                  xhr,\n                },\n              );\n            }\n          }\n\n          ['onload', 'onerror', 'onprogress'].forEach(prop => {\n            wrapProp(prop, xhr);\n          });\n\n          if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n            fill(xhr, 'onreadystatechange', function(original: () => void): void {\n              return wrap(\n                original,\n                {\n                  mechanism: {\n                    data: {\n                      function: 'onreadystatechange',\n                      handler: (original && original.name) || '<anonymous>',\n                    },\n                    handled: true,\n                    type: 'instrument',\n                  },\n                },\n                onreadystatechangeHandler,\n              );\n            });\n          } else {\n            // if onreadystatechange wasn't actually set by the page on this xhr, we\n            // are free to set our own and capture the breadcrumb\n            xhr.onreadystatechange = onreadystatechangeHandler;\n          }\n          return originalSend.apply(this, args);\n        },\n    );\n  }\n\n  /**\n   * Helper that checks if integration is enabled on the client.\n   * @param breadcrumb Breadcrumb\n   * @param hint BreadcrumbHint\n   */\n  public static addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    if (getCurrentHub().getIntegration(Breadcrumbs)) {\n      getCurrentHub().addBreadcrumb(breadcrumb, hint);\n    }\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      this._instrumentConsole();\n    }\n    if (this._options.dom) {\n      this._instrumentDOM();\n    }\n    if (this._options.xhr) {\n      this._instrumentXHR();\n    }\n    if (this._options.fetch) {\n      this._instrumentFetch();\n    }\n    if (this._options.history) {\n      this._instrumentHistory();\n    }\n  }\n}\n\n/** JSDoc */\nfunction addSentryBreadcrumb(serializedData: string): void {\n  // There's always something that can go wrong with deserialization...\n  try {\n    const event: { [key: string]: any } = JSON.parse(serializedData);\n    Breadcrumbs.addBreadcrumb(\n      {\n        category: 'sentry',\n        event_id: event.event_id,\n        level: event.level || Severity.fromString('error'),\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  } catch (_oO) {\n    logger.error('Error while adding sentry type breadcrumb');\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\n\nimport { exceptionFromStacktrace } from '../parsers';\nimport { _computeStackTrace } from '../tracekit';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        return self._handler(event, hint);\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): Event | null {\n    if (!event.exception || !event.exception.values || !hint || !(hint.originalException instanceof Error)) {\n      return event;\n    }\n    const linkedErrors = this._walkErrorTree(hint.originalException, this._key);\n    event.exception.values = [...linkedErrors, ...event.exception.values];\n    return event;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n    if (!(error[key] instanceof Error) || stack.length + 1 >= this._limit) {\n      return stack;\n    }\n    const stacktrace = _computeStackTrace(error[key]);\n    const exception = exceptionFromStacktrace(stacktrace);\n    return this._walkErrorTree(error[key], key, [exception, ...stack]);\n  }\n}\n","import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils';\n\nconst global = getGlobalObject<Window>();\n\n/** UserAgent */\nexport class UserAgent implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = UserAgent.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'UserAgent';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(UserAgent)) {\n        if (!global.navigator || !global.location) {\n          return event;\n        }\n\n        // HTTP Interface: https://docs.sentry.io/clientdev/interfaces/http/?platform=javascript\n        const request = event.request || {};\n        request.url = request.url || global.location.href;\n        request.headers = request.headers || {};\n        request.headers['User-Agent'] = global.navigator.userAgent;\n\n        return {\n          ...event,\n          request,\n        };\n      }\n      return event;\n    });\n  }\n}\n","import { getCurrentHub, initAndBind, Integrations as CoreIntegrations } from '@sentry/core';\n\nimport { BrowserOptions } from './backend';\nimport { BrowserClient, ReportDialogOptions } from './client';\nimport { wrap as internalWrap } from './helpers';\nimport { Breadcrumbs, GlobalHandlers, LinkedErrors, TryCatch, UserAgent } from './integrations';\n\nexport const defaultIntegrations = [\n  new CoreIntegrations.InboundFilters(),\n  new CoreIntegrations.FunctionToString(),\n  new TryCatch(),\n  new Breadcrumbs(),\n  new GlobalHandlers(),\n  new LinkedErrors(),\n  new UserAgent(),\n];\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { configureScope } from '@sentry/browser';\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nexport function init(options: BrowserOptions = {}): void {\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = defaultIntegrations;\n  }\n  initAndBind(BrowserClient, options);\n}\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  if (!options.eventId) {\n    options.eventId = getCurrentHub().lastEventId();\n  }\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    client.showReportDialog(options);\n  }\n}\n\n/**\n * This is the getter for lastEventId.\n *\n * @returns The last event id of a captured event.\n */\nexport function lastEventId(): string | undefined {\n  return getCurrentHub().lastEventId();\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function forceLoad(): void {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nexport function onLoad(callback: () => void): void {\n  callback();\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function flush(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.flush(timeout);\n  }\n  return Promise.reject(false);\n}\n\n/**\n * A promise that resolves when all current events have been sent.\n * If you provide a timeout and the queue takes longer to drain the promise returns false.\n *\n * @param timeout Maximum time in ms the client should wait.\n */\nexport function close(timeout?: number): Promise<boolean> {\n  const client = getCurrentHub().getClient<BrowserClient>();\n  if (client) {\n    return client.close(timeout);\n  }\n  return Promise.reject(false);\n}\n\n/**\n * Wrap code within a try/catch block so the SDK is able to capture errors.\n *\n * @param fn A function to wrap.\n */\nexport function wrap(fn: Function): void {\n  // tslint:disable-next-line: no-unsafe-any\n  internalWrap(fn)();\n}\n","export {\n  Breadcrumb,\n  Request,\n  SdkInfo,\n  Event,\n  Exception,\n  Response,\n  Severity,\n  StackFrame,\n  Stacktrace,\n  Status,\n  Thread,\n  User,\n} from '@sentry/types';\n\nexport {\n  addGlobalEventProcessor,\n  addBreadcrumb,\n  captureException,\n  captureEvent,\n  captureMessage,\n  configureScope,\n  getHubFromCarrier,\n  getCurrentHub,\n  Hub,\n  Scope,\n  setContext,\n  setExtra,\n  setExtras,\n  setTag,\n  setTags,\n  setUser,\n  withScope,\n} from '@sentry/core';\n\nexport { BrowserOptions } from './backend';\nexport { BrowserClient, ReportDialogOptions } from './client';\nexport { defaultIntegrations, forceLoad, init, lastEventId, onLoad, showReportDialog, flush, close, wrap } from './sdk';\nexport { SDK_NAME, SDK_VERSION } from './version';\n\nimport { Integrations as CoreIntegrations } from '@sentry/core';\nimport { getGlobalObject } from '@sentry/utils';\n\nimport * as BrowserIntegrations from './integrations';\nimport * as Transports from './transports';\n\nlet windowIntegrations = {};\n\n// This block is needed to add compatibility with the integrations packages when used with a CDN\n// tslint:disable: no-unsafe-any\nconst _window = getGlobalObject<Window>() as any;\nif (_window.Sentry && _window.Sentry.Integrations) {\n  windowIntegrations = _window.Sentry.Integrations;\n}\n// tslint:enable: no-unsafe-any\n\nconst INTEGRATIONS = {\n  ...windowIntegrations,\n  ...CoreIntegrations,\n  ...BrowserIntegrations,\n};\n\nexport { INTEGRATIONS as Integrations, Transports };\n","import { getCurrentHub } from '@sentry/hub';\nimport { Client, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** A class object that can instanciate Client objects. */\nexport type ClientClass<F extends Client, O extends Options> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instanciate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends Options>(clientClass: ClientClass<F, O>, options: O): void {\n  if (options.debug === true) {\n    logger.enable();\n  }\n  getCurrentHub().bindClient(new clientClass(options));\n}\n"],"names":["LogLevel","Severity","Status","level","Debug","Info","Warning","Error","Fatal","Critical","Log","code","Success","RateLimit","Invalid","Failed","Unknown","SentryError","[object Object]","message","super","this","name","prototype","constructor","Object","setPrototypeOf","isError","wat","toString","call","isErrorEvent","isDOMError","isString","isPrimitive","isPlainObject","isThenable","Boolean","then","fallbackGlobalObject","getGlobalObject","process","global","window","self","uuid4","crypto","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","length","replace","c","r","Math","random","parseUrl","url","match","query","fragment","host","path","protocol","relative","getEventDescription","event","exception","values","type","value","event_id","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","__sentry__","__sentry_wrapped__","__sentry_original__","result","keys","addExceptionTypeValue","mechanism","handled","PREFIX","__SENTRY__","logger","_enabled","args","log","join","warn","error","Memo","_hasWeakSet","WeakSet","_inner","obj","has","add","i","push","delete","splice","fill","source","replacement","original","wrapped","defineProperties","enumerable","_Oo","jsonSize","encodeURI","split","utf8Length","JSON","stringify","normalizeToSize","object","depth","maxSize","serialized","normalize","normalizeValue","key","_events","document","Event","getPrototypeOf","Number","isNaN","walk","Infinity","memo","normalized","serializeValue","toJSON","err","stack","hasOwnProperty","objectifyError","acc","Array","isArray","memoize","innerKey","unmemoize","input","parse","_oO","PromiseBuffer","_limit","undefined","task","isReady","_buffer","indexOf","remove","catch","Promise","reject","timeout","resolve","capturedSetTimeout","setTimeout","all","clearTimeout","truncate","str","max","substr","safeJoin","delimiter","output","String","e","keysToEventMessage","maxLength","includedKeys","slice","isMatchingPattern","pattern","test","includes","supportsFetch","Headers","Request","Response","supportsReferrerPolicy","referrerPolicy","States","SyncPromise","PENDING","_setResult","RESOLVED","reason","REJECTED","state","_state","_resolve","_reject","_value","_executeHandlers","_handlers","h","onFail","onSuccess","handler","concat","onfulfilled","onrejected","_attachHandler","val","_","TRACEPARENT_REGEXP","Span","_traceId","_spanId","substring","_recorded","_parent","traceparent","matches","parent","span_id","trace_id","Scope","_scopeListeners","_eventProcessors","_notifyingListeners","processors","hint","index","processor","final","_notifyEventProcessors","user","_user","_notifyScopeListeners","tags","_tags","extra","_extra","fingerprint","_fingerprint","_level","transaction","_transaction","context","_context","span","_span","setSpan","scope","newScope","assign","I","_breadcrumbs","breadcrumb","maxBreadcrumbs","timestamp","Date","getTime","mergedBreadcrumb","contexts","trace","_applyFingerprint","breadcrumbs","getGlobalEventProcessors","globalEventProcessors","addGlobalEventProcessor","API_VERSION","DEFAULT_BREADCRUMBS","MAX_BREADCRUMBS","Hub","client","_version","_stack","method","top","getStackTop","version","getStack","parentScope","clone","getClient","pop","pushScope","popScope","eventId","_lastEventId","_invokeClient","beforeBreadcrumb","getOptions","finalBreadcrumb","addBreadcrumb","min","setUser","setTags","extras","setExtras","setTag","setExtra","setContext","oldHub","makeMain","integration","getIntegration","id","getSpan","sentry-trace","toTraceparent","getMainCarrier","carrier","hub","registry","getHubFromCarrier","setHubOnCarrier","getCurrentHub","hasHubOnCarrier","isOlderThan","activeDomain","mod","module","request","require","active","registryHubTopStack","callOnHub","captureException","syntheticException","originalException","withScope","DSN_REGEX","ERROR_MESSAGE","Dsn","from","_fromString","_fromComponents","_validate","withPassword","pass","port","projectId","exec","lastPath","components","component","parseInt","SENTRY_API_VERSION","API","dsn","_dsnObject","_getBaseUrl","getStoreEndpointPath","auth","sentry_key","sentry_version","getStoreEndpoint","map","encodeURIComponent","clientName","clientVersion","header","Content-Type","X-Sentry-Auth","dialogOptions","endpoint","encodedOptions","email","installedIntegrations","setupIntegrations","options","integrations","defaultIntegrations","userIntegrations","userIntegrationsNames","pickedIntegrationsNames","defaultIntegration","userIntegration","getIntegrationsToSetup","setupOnce","setupIntegration","BaseClient","backendClass","_backend","_options","_dsn","_integrations","_processing","_getBackend","eventFromException","_processEvent","finalEvent","eventFromMessage","_isClientProcessing","clientReady","_processingInterval","clearInterval","getTransport","close","transportFlushed","flush","enabled","ticked","setInterval","environment","release","dist","maxValueLength","prepared","_addIntegrations","sdk","applyToEvent","sdkInfo","integrationsArray","beforeSend","sampleRate","_isEnabled","_prepareEvent","data","sendEvent","beforeSendResult","_handleAsyncBeforeSend","processedEvent","NoopTransport","status","Skipped","BaseBackend","_transport","_setupTransport","_exception","_hint","_message","originalFunctionToString","FunctionToString","Function","apply","DEFAULT_IGNORE_ERRORS","InboundFilters","clientOptions","_mergeOptions","_shouldDropEvent","_isSentryError","_isIgnoredError","_isBlacklistedUrl","_getEventFilterUrl","_isWhitelistedUrl","ignoreInternal","ignoreErrors","_getPossibleEventMessages","some","blacklistUrls","whitelistUrls","oO","stacktrace","frames","filename","TraceKit","xt","St","Tt","kt","UNKNOWN_FUNCTION","ERROR_TYPES_RE","_has","getLocationHref","location","href","_report","_oldOnerrorHandler","_onErrorHandlerInstalled","handlers","lastException","lastExceptionStack","_notifyHandlers","isWindowError","_collectWindowErrors","inner","_traceKitWindowOnError","lineNo","columnNo","errorObj","_computeStackTrace","_augmentStackTraceWithInitialElement","processLastException","line","column","msg","groups","func","mode","arguments","_traceKitWindowOnUnhandledRejection","detail","_lastExceptionStack","_lastException","ex","incomplete","_subscribe","_installGlobalHandler","onerror","_installGlobalUnhandledRejectionHandler","onunhandledrejection","_computeStackTraceFromStackProp","submatch","parts","element","chrome","gecko","winjs","geckoEval","chromeEval","lines","reference","j","isNative","columnNumber","stackInfo","initial","unshift","partial","_computeStackTraceByWalkingCallerChain","item","functionName","funcs","recursion","curr","caller","sourceURL","fileName","lineNumber","description","computeStackTrace","opera10Regex","opera11Regex","_computeStackTraceFromStacktraceProp","lineRE1","lineRE2","lineRE3","scripts","getElementsByTagName","inlineScriptBlocks","s","src","_computeStackTraceFromOperaMultiLineMessage","_linesOfContext","STACKTRACE_LIMIT","exceptionFromStacktrace","prepareFramesForEvent","eventFromStacktrace","localStack","firstFrameFunction","lastFrameFunction","frame","colno","function","in_app","lineno","reverse","BaseTransport","getStoreEndpointWithUrlEncodedAuth","drain","FetchTransport","defaultOptions","body","fetch","response","fromHttpCode","XHRTransport","XMLHttpRequest","onreadystatechange","readyState","open","send","BrowserBackend","transportOptions","transport","_buildEvent","domException","messageEvent","exceptionKeys","sort","__serialized__","eventFromPlainObject","synthetic","stringException","attachStacktrace","SDK_NAME","SDK_VERSION","BrowserClient","platform","packages","getDsn","script","createElement","async","getReportDialogEndpoint","onLoad","onload","head","appendChild","debounceDuration","keypressTimeout","lastCapturedEvent","ignoreOnError","wrap","fn","before","sentryWrapped","wrappedArguments","arg","handleEvent","addEventProcessor","property","defineProperty","get","debounceTimer","breadcrumbEventHandler","eventName","debounce","captureBreadcrumb","target","_htmlTreeAsString","category","keypressEventHandler","tagName","isContentEditable","elem","currentElem","out","height","len","sepLength","nextStr","_htmlElementAsString","parentNode","className","classes","attr","toLowerCase","attrWhitelist","getAttribute","GlobalHandlers","stackTraceLimit","captureEvent","_eventFromGlobalHandler","TryCatch","originalCallback","getFunctionName","proto","bind","_ignoreOnError","_wrapTimeFunction","_wrapRAF","_wrapEventTarget","lastHref","Breadcrumbs","dom","history","sentry","xhr","originalConsoleLevel","breadcrumbData","fromString","addEventListener","innerOriginal","originalFetch","fetchInput","filterUrl","addSentryBreadcrumb","fetchData","status_code","isChromePackagedApp","app","runtime","hasHistoryApi","pushState","replaceState","supportsHistory","captureUrlChange","to","parsedLoc","parsedTo","parsedFrom","oldOnPopState","onpopstate","historyReplacementFunction","originalHistoryFunction","currentHref","xhrproto","originalOpen","__sentry_xhr__","__sentry_own_request__","originalSend","onreadystatechangeHandler","prop","wrapProp","_instrumentConsole","_instrumentDOM","_instrumentXHR","_instrumentFetch","_instrumentHistory","serializedData","DEFAULT_KEY","DEFAULT_LIMIT","LinkedErrors","_key","limit","_handler","linkedErrors","_walkErrorTree","UserAgent","navigator","headers","userAgent","CoreIntegrations.InboundFilters","CoreIntegrations.FunctionToString","windowIntegrations","_window","Sentry","Integrations","INTEGRATIONS","CoreIntegrations","BrowserIntegrations","clientClass","debug","enable","bindClient","initAndBind","lastEventId","showReportDialog","internalWrap"],"mappings":"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"}