{"version":3,"file":"xliffmerge.builder.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/builders/src/xliffmergebuilder/xliffmerge.builder.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n An Angular Builder to run xliffmerge.\r\n Work is based on nice blog article\r\n https://medium.com/dailyjs/angular-cli-6-under-the-hood-builders-demystified-f0690ebcf01 by Evgeny Barabanov\r\n**/\r\nimport {Observable, of} from 'rxjs';\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {asWindowsPath, getSystemPath, join, normalize, Path} from '@angular-devkit/core';\r\nimport {BuilderContext, BuilderOutput} from '@angular-devkit/architect';\r\nimport {XliffmergeBuilderSchema} from './schema';\r\nimport {XliffMerge, CommandOutput, WriterToString, ProgramOptions, IXliffMergeOptions, IConfigFile} from '@ngx-i18nsupport/ngx-i18nsupport';\r\nimport {isAbsolute} from 'path';\r\n\r\nexport class XliffmergeBuilder {\r\n\r\n    constructor(private context: BuilderContext) {\r\n    }\r\n\r\n    run(builderConfig: Partial<XliffmergeBuilderSchema>): Observable<BuilderOutput> {\r\n        const programOptions: ProgramOptions = this.createProgramOptionsFromConfig(builderConfig);\r\n        const options: IConfigFile|undefined = (programOptions.profilePath) ?\r\n            undefined :\r\n            this.createProfileContentFromConfig(builderConfig);\r\n        const ws: WriterToString = new WriterToString();\r\n        const commandOutput: CommandOutput = new CommandOutput(ws);\r\n        const xliffmerge = XliffMerge.createFromOptions(commandOutput, programOptions, options);\r\n        return xliffmerge.runAsync().pipe(\r\n            map((rc) => {\r\n                const success = (rc === 0);\r\n                if (!success) {\r\n                    this.context.logger.warn(`xliffmerge rc=${rc}`);\r\n                }\r\n                this.context.logger.info(ws.writtenData());\r\n                return {success: success};\r\n            }),\r\n            catchError((error) => {\r\n                this.context.logger.info(ws.writtenData());\r\n                this.context.logger.error('xliffmerge failed: ' + error);\r\n                return of({success: false});\r\n            })\r\n        );\r\n    }\r\n\r\n    createProgramOptionsFromConfig(builderConfig: Partial<XliffmergeBuilderSchema>): ProgramOptions {\r\n        const profile = builderConfig.profile;\r\n        if (profile) {\r\n            const wsRoot = normalize(this.context.workspaceRoot);\r\n            const profilePath = `${getSystemPath(wsRoot)}/${profile}`;\r\n            return {profilePath: profilePath};\r\n        } else {\r\n            return {};\r\n        }\r\n    }\r\n\r\n    createProfileContentFromConfig(builderConfig: Partial<XliffmergeBuilderSchema>): IConfigFile|undefined {\r\n        const xliffmergeOptions: IXliffMergeOptions|undefined = builderConfig.xliffmergeOptions;\r\n        if (xliffmergeOptions) {\r\n            const wsRoot = normalize(this.context.workspaceRoot);\r\n            // replace all pathes in options by absolute paths\r\n            xliffmergeOptions.srcDir = this.adjustPathToWorkspaceRoot(wsRoot, xliffmergeOptions.srcDir);\r\n            xliffmergeOptions.genDir = this.adjustPathToWorkspaceRoot(wsRoot, xliffmergeOptions.genDir);\r\n            xliffmergeOptions.apikeyfile = this.adjustPathToWorkspaceRoot(wsRoot, xliffmergeOptions.apikeyfile);\r\n            return {xliffmergeOptions: xliffmergeOptions};\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    private adjustPathToWorkspaceRoot(wsRoot: Path, pathToAdjust: string | undefined): string | undefined {\r\n        if (!pathToAdjust || isAbsolute(pathToAdjust)) {\r\n            return pathToAdjust;\r\n        }\r\n        const adjustedPath = join(wsRoot, pathToAdjust);\r\n        return (process.platform === 'win32') ? asWindowsPath(adjustedPath) : adjustedPath;\r\n    }\r\n}\r\n\r\nexport default XliffmergeBuilder;\r\n\r\n"]}