{"version":3,"file":"xliffmerge.builder_spec.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/builders/src/xliffmergebuilder/xliffmerge.builder_spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {join, JsonObject, normalize, virtualFs} from '@angular-devkit/core';\r\nimport {Architect, BuilderOutput, Target} from '@angular-devkit/architect';\r\nimport {createArchitect, host} from './testing_utils';\r\nimport {TestLogger} from './testlogger_spec';\r\nimport {XliffmergeBuilderSchema} from './schema';\r\nimport {IConfigFile} from '@ngx-i18nsupport/ngx-i18nsupport';\r\n\r\ndescribe('xliffmerge.builder', () => {\r\n\r\n  let architect: Architect;\r\n  const xliffmergeTargetSpec: Target = {project: 'hello-world-app', target: 'xliffmerge'};\r\n\r\n  async function runXliffmergeBuilderOnTestWorkspace(configuration: XliffmergeBuilderSchema|undefined,\r\n                                                 logger: TestLogger): Promise<BuilderOutput> {\r\n    const run = await architect.scheduleTarget(xliffmergeTargetSpec, configuration as JsonObject, {logger: logger});\r\n    const output: BuilderOutput = await run.result;\r\n    await run.stop();\r\n    return output;\r\n  }\r\n\r\n    beforeEach(async () => {\r\n      /**\r\n       * We are using a test workspace from the test folder.\r\n       * In this workspace the xliffmerge builder is already configured.\r\n       */\r\n      await host.initialize().toPromise();\r\n      const architectInfo = await createArchitect(host.root());\r\n      architect = architectInfo.architect;\r\n    });\r\n\r\n  afterEach(async () => {\r\n    host.restore().toPromise();\r\n  });\r\n\r\n    it('should show error when called with illegal profile', async () => {\r\n        const logger = new TestLogger('logger');\r\n        const profileName = 'nonexistentfile';\r\n        const builderOutput = await runXliffmergeBuilderOnTestWorkspace({profile: profileName}, logger);\r\n        expect(builderOutput.success).toBe(false);\r\n        const msg = 'could not read profile';\r\n        expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n        expect(logger.includes(profileName)).toBe(true, `filename \"${profileName}\" not found in log`);\r\n    });\r\n\r\n    it('should show error when called with illegal configuration', async () => {\r\n        const logger = new TestLogger('logger');\r\n        const xlfFileName = 'nonexistentxlffile';\r\n        const builderOutput = await runXliffmergeBuilderOnTestWorkspace({xliffmergeOptions: {i18nFile: xlfFileName}}, logger);\r\n        expect(builderOutput.success).toBe(false);\r\n        const msg = 'is not readable';\r\n        expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n        expect(logger.includes(xlfFileName)).toBe(true, `filename \"${xlfFileName}\" not found in log`);\r\n    });\r\n\r\n    it('should use profile when called with both profile and configuration', async () => {\r\n        const logger = new TestLogger('logger');\r\n        const profileName = 'nonexistentfile';\r\n        const xlfFileName = 'nonexistentxlffile';\r\n        const builderOutput = await runXliffmergeBuilderOnTestWorkspace({\r\n          profile: profileName, xliffmergeOptions: {i18nFile: xlfFileName}},\r\n          logger);\r\n        expect(builderOutput.success).toBe(false);\r\n        const msg = 'could not read profile';\r\n        expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n        expect(logger.includes(profileName)).toBe(true, `filename \"${profileName}\" not found in log`);\r\n    });\r\n\r\n    it('should run successfully with given xliffmergeOptions', async () => {\r\n        const logger = new TestLogger('logger');\r\n        const configuration: IConfigFile = {\r\n            xliffmergeOptions: {\r\n                'srcDir': 'src/i18n',\r\n                'genDir': 'src/i18nout',\r\n                languages: ['en', 'de'],\r\n              verbose: true\r\n            }\r\n        };\r\n        const generatedFileEN = join(normalize('src'),  'i18nout', 'messages.en.xlf');\r\n        const generatedFileDE = join(normalize('src'),  'i18nout', 'messages.de.xlf');\r\n        const builderOutput = await runXliffmergeBuilderOnTestWorkspace(configuration, logger);\r\n        expect(builderOutput.success).toBe(true);\r\n        const msg = 'WARNING: please translate file';\r\n        expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n        host.scopedSync().read(generatedFileEN);\r\n        host.scopedSync().read(generatedFileDE);\r\n        expect(await host.scopedSync().exists(generatedFileEN)).toBe(true, `file ${generatedFileEN} not generated`);\r\n        expect(await host.scopedSync().exists(generatedFileDE)).toBe(true, `file ${generatedFileDE} not generated`);\r\n    });\r\n\r\n    it('should run successfully with options from profile', async () => {\r\n        const logger = new TestLogger('logger');\r\n        const profileContent: IConfigFile = {\r\n            xliffmergeOptions: {\r\n                'srcDir': 'src/i18n',\r\n                'genDir': 'src/i18nout',\r\n                languages: ['en', 'de']\r\n            }\r\n        };\r\n      host.scopedSync().write(\r\n            join(normalize('.'), 'xliffmergeconfig.json'),\r\n            virtualFs.stringToFileBuffer(JSON.stringify(profileContent)));\r\n        const configuration: XliffmergeBuilderSchema = {\r\n            profile: 'xliffmergeconfig.json'\r\n        };\r\n        const generatedFileEN = join(normalize('src'),  'i18nout', 'messages.en.xlf');\r\n        const generatedFileDE = join(normalize('src'),  'i18nout', 'messages.de.xlf');\r\n      const builderOutput = await runXliffmergeBuilderOnTestWorkspace(configuration, logger);\r\n      expect(builderOutput.success).toBe(true);\r\n      const msg = 'WARNING: please translate file';\r\n      expect(logger.includes(msg)).toBe(true, `msg \"${msg}\" not found in log`);\r\n      expect(host.scopedSync().exists(generatedFileEN)).toBe(true, `file ${generatedFileEN} not generated`);\r\n      expect(host.scopedSync().exists(generatedFileDE)).toBe(true, `file ${generatedFileDE} not generated`);\r\n    });\r\n});\r\n"]}