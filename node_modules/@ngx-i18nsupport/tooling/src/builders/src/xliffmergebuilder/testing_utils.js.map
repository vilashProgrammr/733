{"version":3,"file":"testing_utils.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/builders/src/xliffmergebuilder/testing_utils.ts"],"names":[],"mappings":";;;AAAA,+CAAgG;AAChG,+DAAwF;AACxF,yDAAiF;AACjF,yDAAoD;AAEpD;;;GAGG;AACH,MAAM,kBAAkB,GAAG,gBAAS,CAAC,WAAI,CAAC,gBAAS,CAAC,SAAS,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC;AACnE,QAAA,aAAa,GAAG,WAAI,CAC/B,kBAAkB,EAClB,oCAAoC,CACrC,CAAC;AACW,QAAA,IAAI,GAAG,IAAI,yBAAe,CAAC,qBAAa,CAAC,CAAC;AAC1C,QAAA,UAAU,GAAS,gBAAS,CAAC,MAAM,CAAC,CAAC;AAElD,SAAsB,eAAe,CAAC,MAAY;;QAChD,MAAM,QAAQ,GAAG,IAAI,aAAM,CAAC,kBAAkB,EAAE,CAAC;QACjD,QAAQ,CAAC,gBAAgB,CAAC,aAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;QAClE,MAAM,gBAAgB,GAAG,oBAAa,CAAC,MAAM,CAAC,CAAC;QAE/C,MAAM,SAAS,GAAG,MAAM,mBAAY,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAI,EAAE,YAAI,CAAC,IAAI,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC/F,MAAM,aAAa,GAAG,IAAI,8BAAoB,CAC5C,gBAAgB,EAChB,gBAAgB,EAChB,IAAI,wCAAiC,CAAC,SAAS,EAAE,gBAAgB,CAAC,CACnE,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,qBAAS,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;QAEzD,OAAO;YACL,SAAS;YACT,aAAa,EAAE,aAAa;YAC5B,SAAS;SACV,CAAC;IACJ,CAAC;CAAA;AAlBD,0CAkBC","sourcesContent":["import {experimental, getSystemPath, join, normalize, Path, schema} from '@angular-devkit/core';\r\nimport {TestingArchitectHost, TestProjectHost} from '@angular-devkit/architect/testing';\r\nimport {WorkspaceNodeModulesArchitectHost} from '@angular-devkit/architect/node';\r\nimport {Architect} from '@angular-devkit/architect';\r\n\r\n/**\r\n * We are using a test workspace from the test folder.\r\n * In this workspace the xliffmerge builder is already configured.\r\n */\r\nconst ngxi18nsupportRoot = normalize(join(normalize(__dirname), '../../../..'));\r\nexport const workspaceRoot = join(\r\n  ngxi18nsupportRoot,\r\n  'src/builders/test/hello-world-app/',\r\n);\r\nexport const host = new TestProjectHost(workspaceRoot);\r\nexport const outputPath: Path = normalize('dist');\r\n\r\nexport async function createArchitect(wsRoot: Path) {\r\n  const registry = new schema.CoreSchemaRegistry();\r\n  registry.addPostTransform(schema.transforms.addUndefinedDefaults);\r\n  const workspaceSysPath = getSystemPath(wsRoot);\r\n\r\n  const workspace = await experimental.workspace.Workspace.fromPath(host, host.root(), registry);\r\n  const architectHost = new TestingArchitectHost(\r\n    workspaceSysPath,\r\n    workspaceSysPath,\r\n    new WorkspaceNodeModulesArchitectHost(workspace, workspaceSysPath),\r\n  );\r\n  const architect = new Architect(architectHost, registry);\r\n\r\n  return {\r\n    workspace,\r\n    architectHost: architectHost,\r\n    architect,\r\n  };\r\n}\r\n"]}