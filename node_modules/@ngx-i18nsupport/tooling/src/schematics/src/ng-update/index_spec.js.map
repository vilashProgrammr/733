{"version":3,"file":"index_spec.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/ng-update/index_spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {SchematicTestRunner, UnitTestTree} from '@angular-devkit/schematics/testing';\r\nimport {HostTree} from '@angular-devkit/schematics';\r\nimport {virtualFs} from '@angular-devkit/core';\r\nimport {NgUpdateOptions} from './schema';\r\nimport {\r\n    BrowserBuilderOptions,\r\n    Builders,\r\n    ProjectType,\r\n    WorkspaceProject,\r\n    WorkspaceSchema\r\n} from '../../schematics-core/utility/workspace-models';\r\nimport {IConfigFile, IXliffMergeOptions} from '@ngx-i18nsupport/ngx-i18nsupport';\r\nimport {readAngularJson, readPackageJson} from '../common/common-testing_spec';\r\nimport {extractScriptName, IPackageJson, xliffmergeBuilderName, xliffmergePackage, xliffmergeVersion} from '../common';\r\n\r\ninterface ProjectOptions {\r\n    name: string;\r\n    isDefaultProject?: boolean;\r\n    useXliffmerge?: boolean;\r\n    useXliffmergeBuilder?: boolean;\r\n    languages?: string[];\r\n}\r\n\r\ninterface PackageJsonOptions {\r\n    isLocalPackageJson?: boolean; // false for /package.json, true for /projects/<project>/package.json\r\n    project: string; // projectname for extract script\r\n    isDefaultProject?: boolean;\r\n    createExtractScriptCommandline?: boolean;\r\n    createExtractScriptBuilder?: boolean;\r\n    xliffmergeConfigFilePath?: string;\r\n    useCommandlineForLanguages?: boolean;\r\n    languages?: string[];\r\n}\r\n\r\ninterface XlifmergeConfigOptions {\r\n    project: string;\r\n    file: string;\r\n    xliffmergeOptions: IXliffMergeOptions;\r\n}\r\n\r\ndescribe('Migration to v1.1', () => {\r\n\r\n    function angularJsonProjectConfig(options: ProjectOptions): WorkspaceProject<ProjectType> {\r\n        const config = JSON.parse(JSON.stringify(projectWithoutXliffmerge));\r\n        config.root = options.isDefaultProject ? '' : `/${options.name}`;\r\n        if (options.useXliffmerge) {\r\n            if (options.useXliffmergeBuilder) {\r\n                // TODO\r\n            } else {\r\n                // commandline\r\n                if (options.languages) {\r\n                    options.languages.forEach(lang => {\r\n                        // @ts-ignore\r\n                        config.architect.build.configurations[lang] = {\r\n                            aot: true,\r\n                            outputPath: `dist/${options.name}-${lang}`,\r\n                            i18nFile: `src/i18n/messages.${lang}.xlf`,\r\n                            i18nFormat: 'xlf',\r\n                            i18nLocale: lang\r\n                        } as BrowserBuilderOptions;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return config;\r\n    }\r\n\r\n    function angularJson(projects: ProjectOptions[]): Object {\r\n        const angularJsonContent = JSON.parse(JSON.stringify(angularJsonBaseConfig));\r\n        projects.forEach(options => {\r\n            angularJsonContent.projects[options.name] = angularJsonProjectConfig(options);\r\n        });\r\n        return angularJsonContent;\r\n    }\r\n\r\n    function packageJson(options: PackageJsonOptions): Object {\r\n        const packageJsonContent = JSON.parse(JSON.stringify(packageJsonWithoutXliffmerge));\r\n        if (options.createExtractScriptCommandline) {\r\n            let languages = '';\r\n            if (options.useCommandlineForLanguages && options.languages) {\r\n                for (let i = 0; i < options.languages.length; i++) {\r\n                    if (i > 0) {\r\n                        languages += ' ';\r\n                    }\r\n                    languages += options.languages[i];\r\n                }\r\n            }\r\n            const i18nFormat = 'xlf';\r\n            const localeDir = 'src/i18n';\r\n            const defaultLanguage = 'en';\r\n            const scriptName = extractScriptName(options.project, !!options.isDefaultProject);\r\n            // @ts-ignore\r\n            packageJsonContent.scripts[scriptName] =\r\n                `ng xi18n ${options.project} --i18n-format ${i18nFormat} --output-path ${localeDir} --i18n-locale ${defaultLanguage}\\\r\n && xliffmerge --profile ${options.xliffmergeConfigFilePath} ${languages}`;\r\n        }\r\n        if (options.createExtractScriptBuilder) {\r\n            // @ts-ignore\r\n            packageJsonContent.scripts['extract-i18n'] = `todo`;\r\n        }\r\n        return packageJsonContent;\r\n    }\r\n\r\n    function xliffmergeJson(options: XlifmergeConfigOptions): IConfigFile {\r\n        return {\r\n            xliffmergeOptions: options.xliffmergeOptions\r\n        };\r\n    }\r\n\r\n    function createHost(projects: ProjectOptions[],\r\n                        packageJsons: PackageJsonOptions[],\r\n                        configs: XlifmergeConfigOptions[]): virtualFs.test.TestHost {\r\n        const map: {[path: string]: string} = {};\r\n        map['/angular.json'] = JSON.stringify(angularJson(projects), null, 2);\r\n        packageJsons.forEach(option => {\r\n            const packageJsonPath = (option.isLocalPackageJson) ? `/${option.project}/package.json` : '/package.json';\r\n            map[packageJsonPath] = JSON.stringify(packageJson(option), null, 2);\r\n        });\r\n        configs.forEach(option => {\r\n            map[`/projects/${option.project}/${option.file}`] = JSON.stringify(xliffmergeJson(option), null, 2);\r\n        });\r\n        return new virtualFs.test.TestHost(map);\r\n    }\r\n\r\n    /*\r\n    * The following cases are handled by the migration schemactics:\r\n    * - Workspace projects containing no xliffmerge will not be touched.\r\n    * - Workspace projects containing xliffmerge pre 1.0 will are migrated to 1.1 builder configuration\r\n    * - Workspace projects containing 1.0 xliffmerge command line extraction are migrated to 1.1 builder configuration\r\n     */\r\n    const testRunner = new SchematicTestRunner(\r\n        'migrations',\r\n        require.resolve('../migration-collection.json'),\r\n    );\r\n    const defaultOptions: NgUpdateOptions = {};\r\n    let host: virtualFs.test.TestHost;\r\n    let appTree: UnitTestTree;\r\n    const projectWithoutXliffmerge: WorkspaceProject<ProjectType> = {\r\n        root: '',\r\n        sourceRoot: 'src',\r\n        projectType: ProjectType.Application,\r\n        prefix: 'app',\r\n        schematics: {},\r\n        architect: {\r\n            build: {\r\n                builder: Builders.Browser,\r\n                options: {\r\n                    outputPath: 'dist/sampleapp',\r\n                    index: 'src/index.html',\r\n                    main: 'src/main.ts',\r\n                    polyfills: 'src/polyfills.ts',\r\n                    tsConfig: 'src/tsconfig.app.json',\r\n                    assets: [],\r\n                    styles: [\r\n                        'src/styles.css'\r\n                    ],\r\n                    scripts: []\r\n                },\r\n                configurations: {\r\n                    production: {\r\n                        fileReplacements: [\r\n                            {\r\n                                replace: 'src/environments/environment.ts',\r\n                                with: 'src/environments/environment.prod.ts'\r\n                            }\r\n                        ],\r\n                        optimization: true,\r\n                        outputHashing: 'all',\r\n                        sourceMap: false,\r\n                        extractCss: true,\r\n                        namedChunks: false,\r\n                        aot: true,\r\n                        extractLicenses: true,\r\n                        vendorChunk: false,\r\n                        buildOptimizer: true\r\n                    }\r\n                }\r\n            },\r\n            serve: {\r\n                builder: Builders.DevServer,\r\n                options: {\r\n                    browserTarget: 'sampleapp:build'\r\n                },\r\n                configurations: {\r\n                    production: {\r\n                        browserTarget: 'sampleapp:build:production'\r\n                    }\r\n                }\r\n            },\r\n            'extract-i18n': {\r\n                builder: Builders.ExtractI18n,\r\n                options: {\r\n                    browserTarget: 'sampleapp:build'\r\n                }\r\n            },\r\n            test: {\r\n                builder: Builders.Karma,\r\n                options: {\r\n                    main: 'src/test.ts',\r\n                    polyfills: 'src/polyfills.ts',\r\n                    tsConfig: 'src/tsconfig.spec.json',\r\n                    karmaConfig: 'src/karma.conf.js',\r\n                    styles: [\r\n                        'src/styles.css'\r\n                    ],\r\n                    scripts: [],\r\n                    assets: [\r\n                    ]\r\n                }\r\n            },\r\n            lint: {\r\n                builder: Builders.TsLint,\r\n                options: {\r\n                    tsConfig: [\r\n                        'src/tsconfig.app.json',\r\n                        'src/tsconfig.spec.json'\r\n                    ],\r\n                    exclude: [\r\n                        '**/node_modules/**'\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const angularJsonBaseConfig: WorkspaceSchema = {\r\n        $schema: './node_modules/@angular/cli/lib/config/schema.json',\r\n        version: 1,\r\n        newProjectRoot: 'projects',\r\n        projects: {\r\n        },\r\n        defaultProject: 'sampleapp'\r\n    };\r\n    const packageJsonWithoutXliffmerge = {\r\n        name: 'blah',\r\n        scripts: {}\r\n    };\r\n\r\n    beforeEach(() => {\r\n        appTree = new UnitTestTree(new HostTree());\r\n    });\r\n\r\n    describe('Migration from pre 1.0 to 1.1', () => {\r\n\r\n    });\r\n\r\n    describe('Migration from 1.0 to 1.1', () => {\r\n\r\n        beforeEach(() => {\r\n        });\r\n\r\n        it('should log error on empty workspace', () => {\r\n            host = createHost([], [], []);\r\n            appTree = new UnitTestTree(new HostTree(host));\r\n            let loggerOutput = '';\r\n            testRunner.logger.subscribe(entry => {\r\n                loggerOutput = loggerOutput + entry.message;\r\n            });\r\n            appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n            expect(loggerOutput).toContain('Did not find any projects in angular.json');\r\n        });\r\n\r\n        it('should log message on workspace with no projects containing xliffmerge', () => {\r\n            const noXliffmergeProject: ProjectOptions = {\r\n                name: 'projectwithoutxlifmerge'\r\n            };\r\n            const packageOptions: PackageJsonOptions = {\r\n                project: ''\r\n            };\r\n            host = createHost([noXliffmergeProject], [packageOptions], []);\r\n            appTree = new UnitTestTree(new HostTree(host));\r\n            let loggerOutput = '';\r\n            testRunner.logger.subscribe(entry => {\r\n                loggerOutput = loggerOutput + entry.message;\r\n            });\r\n            appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n            expect(loggerOutput).toContain('Did not find any projects using xliffmerge in angular.json');\r\n        });\r\n\r\n        it('should show error when there is a missing config file', () => {\r\n            const xliffmergeProject: ProjectOptions = {\r\n                name: 'projectWithXliffmerge'\r\n            };\r\n            const packageOptions: PackageJsonOptions = {\r\n                project: xliffmergeProject.name,\r\n                createExtractScriptCommandline: true,\r\n                xliffmergeConfigFilePath: 'test/xliffmerge.config',\r\n                languages: ['en', 'de']\r\n            };\r\n            host = createHost([xliffmergeProject], [packageOptions], []);\r\n            appTree = new UnitTestTree(new HostTree(host));\r\n            let loggerOutput = '';\r\n            testRunner.logger.subscribe(entry => {\r\n                loggerOutput = loggerOutput + entry.message;\r\n            });\r\n            appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n            expect(loggerOutput).toContain('Could not find config file \"//test/xliffmerge.config\"');\r\n        });\r\n\r\n        it('should migrate extraction via command line to extraction via builder', () => {\r\n            const xliffmergeProject: ProjectOptions = {\r\n                name: 'projectWithXliffmerge'\r\n            };\r\n            const xliffmergeConfigOptions: XlifmergeConfigOptions = {\r\n                project: xliffmergeProject.name,\r\n                file: 'xliffmerge.json',\r\n                xliffmergeOptions: {\r\n                    i18nFormat: 'xlf2',\r\n                    autotranslate: ['fr']\r\n                }\r\n            };\r\n            const globalPackageOptions: PackageJsonOptions = {\r\n                project: xliffmergeProject.name,\r\n                createExtractScriptCommandline: true,\r\n                xliffmergeConfigFilePath: `projects/${xliffmergeProject.name}/${xliffmergeConfigOptions.file}`,\r\n                languages: ['en', 'de'],\r\n                useCommandlineForLanguages: true\r\n            };\r\n            host = createHost([xliffmergeProject], [globalPackageOptions], [xliffmergeConfigOptions]);\r\n            appTree = new UnitTestTree(new HostTree(host));\r\n            let loggerOutput = '';\r\n            testRunner.logger.subscribe(entry => {\r\n                loggerOutput = loggerOutput + entry.message;\r\n            });\r\n            expect(appTree.exists('/projects/projectWithXliffmerge/xliffmerge.json')).toBeTruthy('config file not found');\r\n            appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n\r\n            // Check angular.json changes\r\n            expect(loggerOutput).toContain('added architect builder xliffmerge to project projectWithXliffmerge');\r\n            const angularJsonAfterMigration: WorkspaceSchema = readAngularJson(appTree);\r\n            expect(angularJsonAfterMigration).toBeTruthy();\r\n            // @ts-ignore\r\n            const builderSpec = angularJsonAfterMigration.projects['projectWithXliffmerge'].architect[xliffmergeBuilderName];\r\n            expect(builderSpec.builder).toBe('@ngx-i18nsupport/tooling:xliffmerge');\r\n            // configuration should be transferred to builder spec\r\n            expect(builderSpec.options.xliffmergeOptions.i18nFormat).toEqual('xlf2');\r\n            expect(builderSpec.options.xliffmergeOptions.autotranslate).toEqual(['fr']);\r\n            expect(builderSpec.options.xliffmergeOptions.languages).toEqual(['en', 'de']);\r\n\r\n            // Check package.json changes\r\n            expect(loggerOutput).toContain('added npm script to extract i18n message');\r\n            const packageJsonAfterMigration: IPackageJson = readPackageJson(appTree, undefined);\r\n            expect(packageJsonAfterMigration).toBeTruthy();\r\n            expect(packageJsonAfterMigration.scripts[extractScriptName(xliffmergeProject.name, false)])\r\n                .toContain(`ng run ${xliffmergeProject.name}:${xliffmergeBuilderName}`);\r\n\r\n            expect(packageJsonAfterMigration.devDependencies[xliffmergePackage]).toBe(xliffmergeVersion);\r\n\r\n            // Check config file changes\r\n            // config file should have been deleted\r\n            expect(appTree.exists('/projects/projectWithXliffmerge/xliffmerge.json')).toBeFalsy();\r\n        });\r\n\r\n        it('should migrate extraction script without project name to script with project name', () => {\r\n            const xliffmergeProject: ProjectOptions = {\r\n                name: 'projectWithXliffmerge',\r\n                isDefaultProject: false,\r\n            };\r\n            const xliffmergeConfigOptions: XlifmergeConfigOptions = {\r\n                project: xliffmergeProject.name,\r\n                file: 'xliffmerge.json',\r\n                xliffmergeOptions: {\r\n                    i18nFormat: 'xlf2',\r\n                    autotranslate: ['fr']\r\n                }\r\n            };\r\n            const globalPackageOptions: PackageJsonOptions = {\r\n                project: xliffmergeProject.name,\r\n                isDefaultProject: true,\r\n                createExtractScriptCommandline: true,\r\n                xliffmergeConfigFilePath: `projects/${xliffmergeProject.name}/${xliffmergeConfigOptions.file}`,\r\n                languages: ['en', 'de'],\r\n                useCommandlineForLanguages: true\r\n            };\r\n            host = createHost([xliffmergeProject], [globalPackageOptions], [xliffmergeConfigOptions]);\r\n            appTree = new UnitTestTree(new HostTree(host));\r\n            let loggerOutput = '';\r\n            testRunner.logger.subscribe(entry => {\r\n                loggerOutput = loggerOutput + entry.message;\r\n            });\r\n            expect(appTree.exists('/projects/projectWithXliffmerge/xliffmerge.json')).toBeTruthy('config file not found');\r\n            appTree = testRunner.runSchematic('update-1', defaultOptions, appTree);\r\n\r\n            // Check angular.json changes\r\n            expect(loggerOutput).toContain('removed script extract-i18n ');\r\n            const angularJsonAfterMigration: WorkspaceSchema = readAngularJson(appTree);\r\n            expect(angularJsonAfterMigration).toBeTruthy();\r\n            // @ts-ignore\r\n            const builderSpec = angularJsonAfterMigration.projects['projectWithXliffmerge'].architect[xliffmergeBuilderName];\r\n            expect(builderSpec.builder).toBe('@ngx-i18nsupport/tooling:xliffmerge');\r\n            // configuration should be transferred to builder spec\r\n            expect(builderSpec.options.xliffmergeOptions.i18nFormat).toEqual('xlf2');\r\n            expect(builderSpec.options.xliffmergeOptions.autotranslate).toEqual(['fr']);\r\n            expect(builderSpec.options.xliffmergeOptions.languages).toEqual(['en', 'de']);\r\n\r\n            // Check package.json changes\r\n            expect(loggerOutput).toContain('added npm script to extract i18n message');\r\n            const packageJsonAfterMigration: IPackageJson = readPackageJson(appTree, undefined);\r\n            expect(packageJsonAfterMigration).toBeTruthy();\r\n            expect(packageJsonAfterMigration.scripts[extractScriptName(xliffmergeProject.name, false)])\r\n                .toContain(`ng run ${xliffmergeProject.name}:${xliffmergeBuilderName}`);\r\n\r\n            expect(packageJsonAfterMigration.devDependencies[xliffmergePackage]).toBe(xliffmergeVersion);\r\n\r\n            // Check config file changes\r\n            // config file should have been deleted\r\n            expect(appTree.exists('/projects/projectWithXliffmerge/xliffmerge.json')).toBeFalsy();\r\n        });\r\n\r\n    });\r\n\r\n});\r\n"]}