{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/ng-update/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {Rule, SchematicContext, SchematicsException, Tree} from '@angular-devkit/schematics';\r\nimport chalk from 'chalk';\r\nimport {\r\n    addXliffmergeDependencyToPackageJson,\r\n    defaultI18nFormat, defaultI18nLocale, extractScriptName,\r\n    OptionsAfterSetup,\r\n    PackageJsonSnapshot,\r\n    setupCommonOptions,\r\n    WorkspaceSnaphot, xliffmergeBuilderName, xliffmergeBuilderSpec\r\n} from '../common';\r\nimport {ExtractScript} from '../common/extract-script';\r\nimport {NgUpdateOptions} from './schema';\r\nimport {XliffmergeConfigJsonSnapshot} from '../common/xliffmerge-config-json-snapshot';\r\nimport {IConfigFile} from '@ngx-i18nsupport/ngx-i18nsupport';\r\n\r\nfunction setupOptions(optionsFromCommandline: NgUpdateOptions,\r\n                      extractScript: ExtractScript,\r\n                      extractScriptPath: string,\r\n                      host: Tree,\r\n                      context: SchematicContext): OptionsAfterSetup {\r\n    const options = setupCommonOptions(optionsFromCommandline, host, context);\r\n    let  xliffmergeOptions: IConfigFile|null;\r\n    const ws = new WorkspaceSnaphot(host, context);\r\n    const optionsFromBuilder = ws.getActualXliffmergeConfigFromWorkspace(options.project);\r\n    if (optionsFromBuilder) {\r\n        options.useXliffmergeBuilder = true;\r\n        if (optionsFromBuilder.profile) {\r\n            options.profileUsedByBuilder = optionsFromBuilder.profile;\r\n        }\r\n        xliffmergeOptions = optionsFromBuilder;\r\n    } else {\r\n        // read xliffmerge.json used in extract script\r\n        xliffmergeOptions = getProfileContent(extractScript, extractScriptPath, host, context).content;\r\n    }\r\n    if (!xliffmergeOptions) {\r\n        const msg = 'No builder configuration and also no config file \"xliffmerge.json\" could be found. ' +\r\n            'Please install @ngx-i18nsupport via \"ng add @ngx-i18nsupport/tooling\" to create it';\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    options.useXliffmergeBuilder = false;\r\n    if (!xliffmergeOptions.xliffmergeOptions) {\r\n        xliffmergeOptions.xliffmergeOptions = {};\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.i18nFormat) {\r\n        options.i18nFormat = xliffmergeOptions.xliffmergeOptions.i18nFormat;\r\n    } else {\r\n        options.i18nFormat = defaultI18nFormat;\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.srcDir) {\r\n        options.srcDir = xliffmergeOptions.xliffmergeOptions.srcDir;\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.genDir) {\r\n        options.genDir = xliffmergeOptions.xliffmergeOptions.genDir;\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.defaultLanguage) {\r\n        options.i18nLocale = xliffmergeOptions.xliffmergeOptions.defaultLanguage;\r\n    } else {\r\n        options.i18nLocale = defaultI18nLocale;\r\n    }\r\n    options.configuredLanguages = xliffmergeOptions.xliffmergeOptions.languages ? xliffmergeOptions.xliffmergeOptions.languages : [];\r\n    return options;\r\n}\r\n\r\nfunction getProfileContent(extractScript: ExtractScript,\r\n                           packageJsonPath: string,\r\n                           host: Tree,\r\n                           context: SchematicContext): {profile: string, content: IConfigFile|null} {\r\n    const profile = extractScript.xliffmergeProfile();\r\n    if (profile) {\r\n        const path = packageJsonPath + '/' + profile;\r\n        try {\r\n            const snapshot = new XliffmergeConfigJsonSnapshot(path, host, context);\r\n            return {profile: path, content: snapshot.getXliffmergeConfigJson()};\r\n        } catch (e) {\r\n            const msg = `Could not find config file \"${path}\"`;\r\n            context.logger.warn(msg);\r\n            throw new SchematicsException(msg);\r\n        }\r\n    } else {\r\n        return {profile: '', content: null};\r\n    }\r\n}\r\n\r\nexport function updateToV11(options: NgUpdateOptions): Rule {\r\n    return (host: Tree, context: SchematicContext) => {\r\n        context.logger.info('Update @ngx-i18nsupport to version 1.1');\r\n        // find all projects that are using xliffmerge\r\n        const angularJson = new WorkspaceSnaphot(host, context);\r\n        const defaultProjectName = angularJson.getDefaultProjectName();\r\n        const projects = angularJson.getAllProjects();\r\n        if (projects.length === 0) {\r\n            context.logger.warn('Did not find any projects in angular.json');\r\n            return;\r\n        }\r\n        let packageJson: PackageJsonSnapshot;\r\n        try {\r\n            packageJson = new PackageJsonSnapshot('/', host, context);\r\n        } catch (e) {\r\n            context.logger.error('Did not find package.json');\r\n            return;\r\n        }\r\n        let migrationCount = 0;\r\n        projects.forEach(project => {\r\n            const isDefaultProject = (defaultProjectName === project.name);\r\n            let extractScript: ExtractScript | null =\r\n                packageJson.getExtractScriptForProject(project.name, isDefaultProject);\r\n            if (!extractScript && !isDefaultProject) {\r\n                const extractScriptForDefaultProject = packageJson.getExtractScriptForProject(null, true);\r\n                if (extractScriptForDefaultProject && extractScriptForDefaultProject.projectName() === project.name) {\r\n                    // this script has old name extract-i18n, but should be extract-i18n-<projectname>\r\n                    packageJson.removeScript(extractScriptForDefaultProject.name);\r\n                    extractScript = new ExtractScript(\r\n                        extractScriptName(project.name, isDefaultProject),\r\n                        extractScriptForDefaultProject.content);\r\n                }\r\n            }\r\n            if (extractScript) {\r\n                if (extractScript.usesXliffmergeCommandline()) {\r\n                    options.project = project.name;\r\n                    try {\r\n                        const optionsAfterSetup: OptionsAfterSetup = setupOptions(options, extractScript, '/', host, context);\r\n                        optionsAfterSetup.isDefaultProject = isDefaultProject;\r\n                        optionsAfterSetup.project = project.name;\r\n                        const {profile, content} = getProfileContent(extractScript, '/', host, context);\r\n                        const languagesFromCommandline = extractScript.languages();\r\n                        if (content && languagesFromCommandline.length > 0) {\r\n                            if (!content.xliffmergeOptions) {\r\n                                content.xliffmergeOptions = {};\r\n                            }\r\n                            content.xliffmergeOptions.languages = languagesFromCommandline;\r\n                        }\r\n                        optionsAfterSetup.useXliffmergeBuilder = true;\r\n                        packageJson.addExtractScript(optionsAfterSetup);\r\n                        packageJson.commit();\r\n                        angularJson.addArchitectBuilderToProject(project.name,\r\n                            xliffmergeBuilderName, xliffmergeBuilderSpec, content);\r\n                        host.delete(profile);\r\n                        migrationCount++;\r\n                        // TODO config script etc...\r\n                    } catch (e) {\r\n                        context.logger.warn(`Could not migrate project ${project.name}: ${e.toString()}`);\r\n                    }\r\n                } else {\r\n                    context.logger.info(`project ${project.name} does not use xliffmerge command line`);\r\n                }\r\n            } else {\r\n                const scriptName = extractScriptName(project.name, defaultProjectName === project.name);\r\n                context.logger.info(`project ${project.name} does not use i18n (no ${scriptName} script found)`);\r\n            }\r\n        });\r\n        if (migrationCount === 0) {\r\n            context.logger.warn('Did not find any projects using xliffmerge in angular.json');\r\n        } else {\r\n            angularJson.commit();\r\n            addXliffmergeDependencyToPackageJson(false)(host, context);\r\n        }\r\n    };\r\n}\r\n\r\n/** Post-update schematic to be called when update is finished. */\r\nexport function postUpdate(): Rule {\r\n    return () => {\r\n        console.log();\r\n        console.log(chalk.green('  ✓  @ngx-i18nsupport update complete'));\r\n        console.log();\r\n        console.log(chalk.yellow('  ⚠  Please check the output above for any issues that were detected ' +\r\n            'but could not be automatically fixed.'));\r\n    };\r\n}\r\n"]}