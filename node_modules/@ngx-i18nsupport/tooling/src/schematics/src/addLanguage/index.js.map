{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/addLanguage/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Schematic to add one or more additional languages to a project using @ngx-i18nsupport.\r\n */\r\n\r\nimport {branchAndMerge, chain, noop, Rule, SchematicContext, SchematicsException, Tree} from '@angular-devkit/schematics';\r\nimport {AddLanguageOptions} from './schema';\r\nimport {\r\n    OptionsAfterSetup,\r\n    setupCommonOptions,\r\n    xliffmergeBuilderName, xliffmergeBuilderSpec, WorkspaceSnaphot, PackageJsonSnapshot\r\n} from '../common';\r\nimport {IXliffMergeOptions, IConfigFile} from '@ngx-i18nsupport/ngx-i18nsupport';\r\nimport {\r\n    defaultI18nFormat, defaultI18nLocale,\r\n    isValidLanguageSyntax\r\n} from '../common';\r\nimport {XliffmergeConfigJsonSnapshot} from '../common/xliffmerge-config-json-snapshot';\r\n\r\n/*\r\nAdd language configuration of newly added languages.\r\nThis adds the new language\r\n- to the builder configuration\r\n- or to the config file mentioned in the builder configuration\r\ndepending on what is used.\r\n */\r\nfunction addLanguagesToBuilderConfiguration(workspaceToChange: WorkspaceSnaphot, options: OptionsAfterSetup, languagesToAdd: string[]) {\r\n    const xliffmergeConf: {xliffmergeOptions: IXliffMergeOptions}|null\r\n        = workspaceToChange.getActualXliffmergeConfigFromWorkspace(options.project);\r\n    if (!xliffmergeConf) {\r\n        return (_host: Tree, context: SchematicContext) => {\r\n            const msg = 'did not find any configuration information in xliffmerge builder configuration';\r\n            context.logger.fatal(msg);\r\n            throw new SchematicsException(msg);\r\n        };\r\n    }\r\n    const foundConfiguration = {\r\n        xliffmergeOptions: xliffmergeConf.xliffmergeOptions\r\n    };\r\n    const newLanguagesArray: string[] = [];\r\n    const languages = foundConfiguration.xliffmergeOptions.languages;\r\n    if (languages) {\r\n        newLanguagesArray.push(...languages);\r\n    }\r\n    newLanguagesArray.push(...languagesToAdd);\r\n    foundConfiguration.xliffmergeOptions.languages = newLanguagesArray;\r\n    workspaceToChange.addArchitectBuilderToProject(options.project,\r\n                xliffmergeBuilderName, xliffmergeBuilderSpec, foundConfiguration);\r\n}\r\n\r\n/**\r\n * Sets all options given by commandline or defaults.\r\n * It also checks values for correctness.\r\n * @param optionsFromCommandline command line options.\r\n * @param host the tree to lookup some workspace settings.\r\n * @param context use for error logging.\r\n * @return an object where all relevant values are set.\r\n */\r\nfunction setupOptions(optionsFromCommandline: AddLanguageOptions, host: Tree, context: SchematicContext): OptionsAfterSetup {\r\n    const options: OptionsAfterSetup = setupCommonOptions(optionsFromCommandline, host, context);\r\n    let  xliffmergeOptions: IConfigFile|null;\r\n    const ws = new WorkspaceSnaphot(host, context);\r\n    const optionsFromBuilder = ws.getActualXliffmergeConfigFromWorkspace(options.project);\r\n    if (optionsFromBuilder) {\r\n        options.useXliffmergeBuilder = true;\r\n        if (optionsFromBuilder.profile) {\r\n            options.profileUsedByBuilder = optionsFromBuilder.profile;\r\n        }\r\n        xliffmergeOptions = optionsFromBuilder;\r\n    } else {\r\n        // read xliffmerge.json\r\n        try {\r\n            const snapshot = new XliffmergeConfigJsonSnapshot(`${options.path}/xliffmerge.json`, host, context);\r\n            xliffmergeOptions = snapshot.getXliffmergeConfigJson();\r\n        } catch (e) {\r\n            xliffmergeOptions = null;\r\n        }\r\n        if (!xliffmergeOptions) {\r\n            const msg = 'No builder configuration and also no config file \"xliffmerge.json\" could be found. ' +\r\n                'Please install @ngx-i18nsupport via \"ng add @ngx-i18nsupport/tooling\" to create it';\r\n            context.logger.fatal(msg);\r\n            throw new SchematicsException(msg);\r\n        }\r\n        options.useXliffmergeBuilder = false;\r\n    }\r\n    if (!xliffmergeOptions.xliffmergeOptions) {\r\n        xliffmergeOptions.xliffmergeOptions = {};\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.i18nFormat) {\r\n        options.i18nFormat = xliffmergeOptions.xliffmergeOptions.i18nFormat;\r\n    } else {\r\n        options.i18nFormat = defaultI18nFormat;\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.srcDir) {\r\n        options.srcDir = xliffmergeOptions.xliffmergeOptions.srcDir;\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.genDir) {\r\n        options.genDir = xliffmergeOptions.xliffmergeOptions.genDir;\r\n    }\r\n    if (xliffmergeOptions.xliffmergeOptions.defaultLanguage) {\r\n        options.i18nLocale = xliffmergeOptions.xliffmergeOptions.defaultLanguage;\r\n    } else {\r\n        options.i18nLocale = defaultI18nLocale;\r\n    }\r\n    if (optionsFromCommandline.language && optionsFromCommandline.languages) {\r\n        const msg = 'Only language as parameter or --languages can be used, not both.';\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    if (optionsFromCommandline.language) {\r\n        options.parsedLanguages = [optionsFromCommandline.language];\r\n    } else {\r\n        if (!optionsFromCommandline.languages) {\r\n            options.parsedLanguages = [];\r\n        } else {\r\n            options.parsedLanguages = optionsFromCommandline.languages.split(',');\r\n        }\r\n    }\r\n    if (options.parsedLanguages.length === 0) {\r\n        const msg = 'At least 1 language must be specified.';\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    if (options.parsedLanguages.indexOf(options.i18nLocale) >= 0) {\r\n        const msg = `Language \"${options.i18nLocale}\" is already configured (as default language).`;\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    options.configuredLanguages = xliffmergeOptions.xliffmergeOptions.languages ? xliffmergeOptions.xliffmergeOptions.languages : [];\r\n    // check languages\r\n    for (const lang of options.parsedLanguages) {\r\n        if (options.configuredLanguages.indexOf(lang) >= 0) {\r\n            const msg = `Language \"${lang}\" is already configured.`;\r\n            context.logger.fatal(msg);\r\n            throw new SchematicsException(msg);\r\n        }\r\n    }\r\n    for (const lang of options.parsedLanguages) {\r\n        if (!isValidLanguageSyntax(lang)) {\r\n            const msg = `\"${lang}\" is not a valid language code.`;\r\n            context.logger.fatal(msg);\r\n            throw new SchematicsException(msg);\r\n        }\r\n    }\r\n    return options;\r\n}\r\n\r\n/**\r\n * The schematic factory addLanguage.\r\n * @param optionsFromCommandline contains the languages to be added.\r\n */\r\nexport function addLanguage(optionsFromCommandline: AddLanguageOptions): Rule {\r\n    return (host: Tree, context: SchematicContext) => {\r\n        const options: OptionsAfterSetup = setupOptions(optionsFromCommandline, host, context);\r\n        const xliffmergeConfigChanges: Rule = (options.useXliffmergeBuilder) ? noop() : (tree: Tree, context2: SchematicContext) => {\r\n            const xliffmergeConfigSnapshot = new XliffmergeConfigJsonSnapshot(`${options.path}/xliffmerge.json`, tree, context2);\r\n            xliffmergeConfigSnapshot.addLanguagesToXliffmergeConfiguration(languagesToAdd);\r\n            xliffmergeConfigSnapshot.commit();\r\n        };\r\n        const languagesToAdd = options.parsedLanguages\r\n            .filter(lang => lang !== options.i18nLocale);\r\n        const angularJsonChanges = (tree: Tree, context2: SchematicContext) => {\r\n            const ws: WorkspaceSnaphot = new WorkspaceSnaphot(tree, context2);\r\n            languagesToAdd\r\n                .forEach(lang => ws.addLanguageConfigurationToProject(options, lang));\r\n            if (options.useXliffmergeBuilder) {\r\n                addLanguagesToBuilderConfiguration(ws, options, languagesToAdd);\r\n            }\r\n            ws.commit();\r\n        };\r\n        const packageJsonChanges: Rule = (tree: Tree, context2: SchematicContext) => {\r\n            const packageJson: PackageJsonSnapshot = new PackageJsonSnapshot('/', tree, context2);\r\n            packageJson.changeExtractScript(options);\r\n            languagesToAdd\r\n                .forEach(lang => packageJson.addStartScript(options, lang));\r\n            packageJson.commit();\r\n        };\r\n        return chain([\r\n            branchAndMerge(\r\n                chain([\r\n                    angularJsonChanges,\r\n                    packageJsonChanges,\r\n                    xliffmergeConfigChanges]\r\n                )\r\n            )\r\n        ])(host, context);\r\n    };\r\n}\r\n"]}