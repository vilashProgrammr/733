{"version":3,"file":"index_spec.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/addLanguage/index_spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tree } from '@angular-devkit/schematics';\r\nimport { SchematicTestRunner, UnitTestTree } from '@angular-devkit/schematics/testing';\r\nimport * as path from 'path';\r\nimport {\r\n    readAngularJson,\r\n    readPackageJson,\r\n    readXliffmergeJson,\r\n    workspaceOptions,\r\n    appOptions,\r\n    readXliffmergeConfigFromWorkspace\r\n} from '../common/common-testing_spec';\r\nimport {AddLanguageOptions} from './schema';\r\nimport {WorkspaceSchema} from '../../schematics-core/utility/workspace-models';\r\n\r\nconst collectionPath = path.join(__dirname, '../collection.json');\r\n\r\ndescribe('addLanguage', () => {\r\n    const testRunner = new SchematicTestRunner('schematics', collectionPath);\r\n\r\n    function runSchematic(options: AddLanguageOptions, tree: Tree): UnitTestTree {\r\n        return testRunner.runSchematic('addLanguage', options, tree);\r\n    }\r\n\r\n    it('should throw an exception that there is no workspace when run on an empty tree', () => {\r\n        try {\r\n            runSchematic({}, Tree.empty());\r\n            fail('expected exception (no workspace found) did not occur');\r\n        } catch (e) {\r\n            expect(e.message).toContain('Could not find a workspace');\r\n        }\r\n    });\r\n\r\n    describe('with workspace without installed tooling', () => {\r\n\r\n        let appTree: UnitTestTree;\r\n        beforeEach(() => {\r\n            appTree = testRunner.runExternalSchematic('@schematics/angular', 'workspace', workspaceOptions);\r\n            appTree = testRunner.runExternalSchematic('@schematics/angular', 'application', appOptions, appTree);\r\n        });\r\n\r\n        it('should throw an exception when called with no existing project', () => {\r\n            try {\r\n                runSchematic({project: 'foo'}, appTree);\r\n                fail('expected exception (workspace contains no project named) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('Workspace contains no project named');\r\n            }\r\n        });\r\n\r\n        it('should throw an exception when called on a workspace without ngx-i18nsupport installed', () => {\r\n            try {\r\n                runSchematic({language: 'de'}, appTree);\r\n                fail('expected exception (Config file \"xliffmerge.json\" not found.) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('No builder configuration and also no config file');\r\n            }\r\n        });\r\n    });\r\n\r\n    describe('with one instrumented project using old style xliffmerge command line and config file', () => {\r\n\r\n        let appTree: UnitTestTree;\r\n        beforeEach(() => {\r\n            appTree = testRunner.runExternalSchematic('@schematics/angular', 'workspace', workspaceOptions);\r\n            appTree = testRunner.runExternalSchematic('@schematics/angular', 'application', appOptions, appTree);\r\n            appTree = testRunner.runSchematic('ng-add', {useXliffmergeBuilder: false}, appTree);\r\n        });\r\n\r\n        it('should throw an exception when called without a language', () => {\r\n            try {\r\n                runSchematic({}, appTree);\r\n                fail('expected exception (At least 1 language must be specified.) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('At least 1 language must be specified.');\r\n            }\r\n        });\r\n\r\n        it('should throw an exception when called with both language and languages', () => {\r\n            try {\r\n                runSchematic({languages: 'a,b', language: 'c'}, appTree);\r\n                fail('expected exception (Only language as parameter or --languages can be used, not both.) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('Only language as parameter or --languages can be used, not both.');\r\n            }\r\n        });\r\n\r\n        it('should throw an exception when called with any invalid language code', () => {\r\n            try {\r\n                runSchematic({languages: 'a,b,x*'}, appTree);\r\n                fail('expected exception (is not a valid language code) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('is not a valid language code');\r\n            }\r\n        });\r\n\r\n        it('should throw an exception when trying to add the default language', () => {\r\n            try {\r\n                runSchematic({language: 'en'}, appTree);\r\n                fail('expected exception (Language \"en\" is already configured) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('Language \"en\" is already configured');\r\n            }\r\n        });\r\n\r\n        it('should throw an exception when trying to add an already existing language', () => {\r\n            // first add a language\r\n            appTree = runSchematic({language: 'de'}, appTree);\r\n            // then try to do it again\r\n            try {\r\n                appTree = runSchematic({language: 'de'}, appTree);\r\n                fail('expected exception (Language \"de\" is already configured) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('Language \"de\" is already configured');\r\n            }\r\n        });\r\n\r\n        it('should add a language to workspace', () => {\r\n            const lang = 'de';\r\n            const tree = runSchematic({language: lang}, appTree);\r\n            // there should be a start script for new language\r\n            const packageJson = readPackageJson(tree);\r\n            const startScript = packageJson.scripts['start-' + lang];\r\n            expect(startScript).toBeTruthy();\r\n            expect(startScript).toBe(\r\n                'ng serve --configuration=' + lang);\r\n            // there should be a build and serve configuration\r\n            const angularJson: WorkspaceSchema = readAngularJson(tree);\r\n            // @ts-ignore\r\n            expect(angularJson.projects.bar.architect.build.configurations[lang]).toBeTruthy();\r\n            // @ts-ignore\r\n            expect(angularJson.projects.bar.architect.build.configurations[lang] as any).toEqual({\r\n                aot: true,\r\n                outputPath: 'dist/bar-de',\r\n                i18nFile: 'src/i18n/messages.de.xlf',\r\n                i18nFormat: 'xlf',\r\n                i18nLocale: 'de'\r\n            });\r\n            // @ts-ignore\r\n            expect(angularJson.projects.bar.architect.serve.configurations[lang]).toBeTruthy();\r\n            // @ts-ignore\r\n            expect(angularJson.projects.bar.architect.serve.configurations[lang]).toEqual({\r\n                browserTarget: 'bar:build:de'\r\n            });\r\n            // there should be no addition in extract command, because it is read from xliffmerge.json\r\n            const xliffmergeJson = readXliffmergeJson(tree, 'bar');\r\n            expect(xliffmergeJson).toBeTruthy();\r\n            if (xliffmergeJson && xliffmergeJson.xliffmergeOptions) {\r\n                expect(xliffmergeJson.xliffmergeOptions.languages).toEqual(['en', 'de']);\r\n            }\r\n            // TODO check that it is not in extract-script\r\n        });\r\n\r\n    });\r\n\r\n    describe('with one instrumented project using builder', () => {\r\n\r\n        let appTree: UnitTestTree;\r\n        beforeEach(() => {\r\n            appTree = testRunner.runExternalSchematic('@schematics/angular', 'workspace', workspaceOptions);\r\n            appTree = testRunner.runExternalSchematic('@schematics/angular', 'application', appOptions, appTree);\r\n            appTree = testRunner.runSchematic('ng-add', {}, appTree);\r\n        });\r\n\r\n        it('should throw an exception when called without a language', () => {\r\n            try {\r\n                runSchematic({}, appTree);\r\n                fail('expected exception (At least 1 language must be specified.) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('At least 1 language must be specified.');\r\n            }\r\n        });\r\n\r\n        it('should throw an exception when called with both language and languages', () => {\r\n            try {\r\n                runSchematic({languages: 'a,b', language: 'c'}, appTree);\r\n                fail('expected exception (Only language as parameter or --languages can be used, not both.) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('Only language as parameter or --languages can be used, not both.');\r\n            }\r\n        });\r\n\r\n        it('should throw an exception when called with any invalid language code', () => {\r\n            try {\r\n                runSchematic({languages: 'a,b,x*'}, appTree);\r\n                fail('expected exception (is not a valid language code) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('is not a valid language code');\r\n            }\r\n        });\r\n\r\n        it('should throw an exception when trying to add the default language', () => {\r\n            try {\r\n                runSchematic({language: 'en'}, appTree);\r\n                fail('expected exception (Language \"en\" is already configured) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('Language \"en\" is already configured');\r\n            }\r\n        });\r\n\r\n        it('should throw an exception when trying to add an already existing language', () => {\r\n            // first add a language\r\n            appTree = runSchematic({language: 'de'}, appTree);\r\n            // then try to do it again\r\n            try {\r\n                runSchematic({language: 'de'}, appTree);\r\n                fail('expected exception (Language \"de\" is already configured) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('Language \"de\" is already configured');\r\n            }\r\n        });\r\n\r\n        it('should add a language to workspace', () => {\r\n            const lang = 'de';\r\n            const tree = runSchematic({language: lang}, appTree);\r\n            // there should be a start script for new language\r\n            const packageJson = readPackageJson(tree);\r\n            const startScript = packageJson.scripts['start-' + lang];\r\n            expect(startScript).toBeTruthy();\r\n            expect(startScript).toBe(\r\n                'ng serve --configuration=' + lang);\r\n            // there should be a build and serve configuration\r\n            const angularJson: WorkspaceSchema = readAngularJson(tree);\r\n            // @ts-ignore\r\n            expect(angularJson.projects.bar.architect.build.configurations[lang]).toBeTruthy();\r\n            // @ts-ignore\r\n            expect(angularJson.projects.bar.architect.build.configurations[lang] as any).toEqual({\r\n                aot: true,\r\n                outputPath: 'dist/bar-de',\r\n                i18nFile: 'src/i18n/messages.de.xlf',\r\n                i18nFormat: 'xlf',\r\n                i18nLocale: 'de'\r\n            });\r\n            // @ts-ignore\r\n            expect(angularJson.projects.bar.architect.serve.configurations[lang]).toBeTruthy();\r\n            // @ts-ignore\r\n            expect(angularJson.projects.bar.architect.serve.configurations[lang]).toEqual({\r\n                browserTarget: 'bar:build:de'\r\n            });\r\n            // there should be no addition in extract command, because it is read from xliffmerge.json\r\n            const xliffmergeJson = readXliffmergeConfigFromWorkspace(tree, 'bar');\r\n            expect(xliffmergeJson).toBeTruthy();\r\n            if (xliffmergeJson && xliffmergeJson.xliffmergeOptions) {\r\n                expect(xliffmergeJson.xliffmergeOptions.languages).toEqual(['en', 'de']);\r\n            }\r\n        });\r\n\r\n    });\r\n});\r\n"]}