{"version":3,"file":"index_spec.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/ng-add/index_spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tree} from '@angular-devkit/schematics';\r\nimport {Schema as ApplicationOptions} from '@schematics/angular/application/schema';\r\nimport {Schema as LibraryOptions} from '@schematics/angular/application/schema';\r\nimport { SchematicTestRunner, UnitTestTree } from '@angular-devkit/schematics/testing';\r\nimport {IXliffMergeOptions} from '@ngx-i18nsupport/ngx-i18nsupport';\r\nimport * as pathUtils from 'path';\r\nimport {extractScriptName, xliffmergeBuilderName, xliffmergePackage, xliffmergeVersion} from '../common';\r\nimport {NgAddOptions} from './schema';\r\nimport {readAngularJson, readAsJson, readPackageJson, workspaceOptions, appOptions, libOptions} from '../common/common-testing_spec';\r\nimport {WorkspaceSchema} from '../../schematics-core/utility/workspace-models';\r\nimport {IConfigFile} from '@ngx-i18nsupport/ngx-i18nsupport';\r\n\r\nconst collectionPath = pathUtils.join(__dirname, '../collection.json');\r\n\r\ndescribe('ng-add', () => {\r\n\r\n  const testRunner = new SchematicTestRunner('schematics', collectionPath);\r\n\r\n  function runSchematic(options: NgAddOptions, tree: Tree): UnitTestTree {\r\n      return testRunner.runSchematic('ng-add', options, tree);\r\n  }\r\n\r\n  it('should throw an exception that there is no workspace when run on an empty tree', () => {\r\n    try {\r\n        runSchematic({}, Tree.empty());\r\n        fail('expected exception (no workspace found) did not occur');\r\n    } catch (e) {\r\n        expect(e.message).toContain('Could not find a workspace');\r\n    }\r\n  });\r\n\r\n  describe('with one project', () => {\r\n\r\n      let appTree: UnitTestTree;\r\n      beforeEach(async () => {\r\n          appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions).toPromise();\r\n          appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'application', appOptions, appTree).toPromise();\r\n      });\r\n\r\n      it('should throw an exception when called with no existing project', () => {\r\n          try {\r\n              runSchematic({project: 'foo'}, appTree);\r\n              fail('expected exception (workspace contains no project named) did not occur');\r\n          } catch (e) {\r\n              expect(e.message).toContain('Workspace contains no project named');\r\n          }\r\n      });\r\n\r\n      it('should throw an exception when called with invalid language code as default language', () => {\r\n          try {\r\n              runSchematic({i18nLocale: 'a,b'}, appTree);\r\n              fail('expected exception (is not a valid language code) did not occur');\r\n          } catch (e) {\r\n              expect(e.message).toContain('is not a valid language code');\r\n          }\r\n      });\r\n\r\n      it('should throw an exception when called with any invalid language code', () => {\r\n          try {\r\n              runSchematic({languages: 'a,b,x*'}, appTree);\r\n              fail('expected exception (is not a valid language code) did not occur');\r\n          } catch (e) {\r\n              expect(e.message).toContain('is not a valid language code');\r\n          }\r\n      });\r\n\r\n      it('should create xliffmerge configuration file when called with doNotUseBuilder option', () => {\r\n          const tree = runSchematic({useXliffmergeBuilder: false}, appTree);\r\n          expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n          const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n          expect(configFile.xliffmergeOptions).toBeTruthy();\r\n          expect(configFile.xliffmergeOptions.i18nFormat).toBe('xlf');\r\n          expect(configFile.xliffmergeOptions.defaultLanguage).toBe('en');\r\n          expect(configFile.xliffmergeOptions.languages).toEqual(['en']);\r\n          expect(configFile.xliffmergeOptions.srcDir).toBe('src/i18n');\r\n          expect(configFile.xliffmergeOptions.genDir).toBe('src/i18n');\r\n      });\r\n\r\n      it('should create xliffmerge configuration file with first given language as default', () => {\r\n          const tree = runSchematic({useXliffmergeBuilder: false, languages: 'de'}, appTree);\r\n          expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n          const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n          expect(configFile.xliffmergeOptions).toBeTruthy();\r\n          // de is default because it is the first in list\r\n          expect(configFile.xliffmergeOptions.defaultLanguage).toBe('de');\r\n          expect(configFile.xliffmergeOptions.languages).toEqual(['de']);\r\n      });\r\n\r\n      it('should create xliffmerge configuration file containing all given languages', () => {\r\n          const tree = runSchematic({useXliffmergeBuilder: false, languages: 'de,fr,ru'}, appTree);\r\n          expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n          const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n          expect(configFile.xliffmergeOptions).toBeTruthy();\r\n          // de is default because it is the first in list\r\n          expect(configFile.xliffmergeOptions.defaultLanguage).toBe('de');\r\n          expect(configFile.xliffmergeOptions.languages).toEqual(['de', 'fr', 'ru']);\r\n      });\r\n\r\n      it('should create xliffmerge configuration file containing all given languages and default language', () => {\r\n          const tree = runSchematic({useXliffmergeBuilder: false, i18nLocale: 'en', languages: 'de,fr,ru'}, appTree);\r\n          expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n          const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n          expect(configFile.xliffmergeOptions).toBeTruthy();\r\n          // en is default, becuase it was explicitly set\r\n          expect(configFile.xliffmergeOptions.defaultLanguage).toBe('en');\r\n          expect(configFile.xliffmergeOptions.languages).toEqual(['en', 'de', 'fr', 'ru']);\r\n      });\r\n\r\n      it('should create xliffmerge configuration with specified xlf format', () => {\r\n          const tree = runSchematic({useXliffmergeBuilder: false, i18nLocale: 'en', i18nFormat: 'xlf2'}, appTree);\r\n          expect(tree.files).toContain('/projects/bar/xliffmerge.json');\r\n          const configFile = readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, '/projects/bar/xliffmerge.json');\r\n          expect(configFile.xliffmergeOptions).toBeTruthy();\r\n          expect(configFile.xliffmergeOptions.i18nFormat).toBe('xlf2');\r\n      });\r\n\r\n      it('should add xliffmerge dev dependency to package.json', () => {\r\n          const tree = runSchematic( {}, appTree);\r\n          const packageJson = readPackageJson(tree);\r\n          expect(packageJson.devDependencies[xliffmergePackage]).toBe(xliffmergeVersion);\r\n      });\r\n\r\n      it('should add configurations for non default languages to angular.json', () => {\r\n          const tree = runSchematic({languages: 'en,de'}, appTree);\r\n          const angularJson: WorkspaceSchema = readAngularJson(tree);\r\n          // @ts-ignore\r\n          expect(angularJson.projects.bar.architect.build.configurations.en).toBeFalsy();\r\n          // @ts-ignore\r\n          expect(angularJson.projects.bar.architect.build.configurations.de).toBeTruthy();\r\n          // @ts-ignore\r\n          expect(angularJson.projects.bar.architect.build.configurations.de as any).toEqual({\r\n              aot: true,\r\n              outputPath: 'dist/bar-de',\r\n              i18nFile: 'src/i18n/messages.de.xlf',\r\n              i18nFormat: 'xlf',\r\n              i18nLocale: 'de'\r\n          });\r\n          // @ts-ignore\r\n          expect(angularJson.projects.bar.architect.serve.configurations.de).toBeTruthy();\r\n          // @ts-ignore\r\n          expect(angularJson.projects.bar.architect.serve.configurations.de).toEqual({\r\n              browserTarget: 'bar:build:de'\r\n          });\r\n      });\r\n\r\n      it('should add npm script \"extract-i18n\" to package.json using command line xliffmerge', () => {\r\n          const tree = runSchematic({useXliffmergeBuilder: false}, appTree);\r\n          const packageJson = readPackageJson(tree);\r\n          const extractScript = packageJson.scripts[extractScriptName('bar', true)];\r\n          expect(extractScript).toBeTruthy();\r\n          expect(extractScript).toBe(\r\n              'ng xi18n bar --i18n-format xlf --output-path i18n --i18n-locale en && xliffmerge --profile xliffmerge.json');\r\n      });\r\n\r\n      it('should add npm script \"extract-i18n\" to package.json including language list as command line parameter', () => {\r\n          const tree = runSchematic({useXliffmergeBuilder: false, useCommandlineForLanguages: true, languages: 'en,de'}, appTree);\r\n          const packageJson = readPackageJson(tree);\r\n          const extractScript = packageJson.scripts['extract-i18n'];\r\n          expect(extractScript).toBeTruthy();\r\n          expect(extractScript).toBe(\r\n              'ng xi18n bar --i18n-format xlf --output-path i18n --i18n-locale en && xliffmerge --profile xliffmerge.json en de');\r\n      });\r\n\r\n      it('should add npm script \"start-xyz\" to package.json when called with language xyz', () => {\r\n          const lang = 'xyz';\r\n          const tree = runSchematic({useXliffmergeBuilder: false, i18nLocale: 'de', languages: lang}, appTree);\r\n          const packageJson = readPackageJson(tree);\r\n          const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n          expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n          const startScript = packageJson.scripts['start-' + lang];\r\n          expect(startScript).toBeTruthy();\r\n          expect(startScript).toBe(\r\n              'ng serve --configuration=' + lang);\r\n      });\r\n\r\n      it('should add npm script \"start-xyz\" to package.json when called with language xyz' +\r\n          'even if project is set, but it is the default project', () => {\r\n          // normally, when you specify a project \"bar\", start script should be called start-bar-xyz\r\n          // but if bar is the default project, it is just called start-xyz.\r\n          const lang = 'xyz';\r\n          const tree = runSchematic({useXliffmergeBuilder: false, i18nLocale: 'de', project: 'bar', languages: lang}, appTree);\r\n          const packageJson = readPackageJson(tree);\r\n          const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n          expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n          const startScript = packageJson.scripts['start-' + lang];\r\n          expect(startScript).toBeTruthy();\r\n          expect(startScript).toBe(\r\n              'ng serve --configuration=' + lang);\r\n      });\r\n\r\n      it('should configure builder with defaults when called without any parameters', () => {\r\n          const tree = runSchematic({}, appTree);\r\n          const angularJson = readAngularJson(tree);\r\n          // @ts-ignore\r\n          const builderEntry: any = angularJson.projects['bar'].architect[xliffmergeBuilderName];\r\n          expect(builderEntry).toBeTruthy('no xliffmerge builder entry found');\r\n          expect(builderEntry.builder).toBe('@ngx-i18nsupport/tooling:xliffmerge');\r\n          const options: IConfigFile = builderEntry.options;\r\n          expect(options).toBeTruthy('no xliffmerge builder options found');\r\n          expect(options.xliffmergeOptions).toBeTruthy();\r\n          if (options.xliffmergeOptions) {\r\n              expect(options.xliffmergeOptions.i18nFormat).toBe('xlf');\r\n              expect(options.xliffmergeOptions.srcDir).toBe('src/i18n');\r\n              expect(options.xliffmergeOptions.genDir).toBe('src/i18n');\r\n              expect(options.xliffmergeOptions.defaultLanguage).toBe('en');\r\n              expect(options.xliffmergeOptions.languages).toEqual(['en']);\r\n          }\r\n      });\r\n\r\n      it('should configure builder with given parametest', () => {\r\n          const tree = runSchematic({i18nFormat: 'xlf2', localePath: 'xy', i18nLocale: 'de', languages: 'en,fr,ru'}, appTree);\r\n          const angularJson = readAngularJson(tree);\r\n          // @ts-ignore\r\n          const builderEntry: any = angularJson.projects['bar'].architect[xliffmergeBuilderName];\r\n          expect(builderEntry).toBeTruthy('no xliffmerge builder entry found');\r\n          expect(builderEntry.builder).toBe('@ngx-i18nsupport/tooling:xliffmerge');\r\n          const options: IConfigFile = builderEntry.options;\r\n          expect(options).toBeTruthy('no xliffmerge builder options found');\r\n          expect(options.xliffmergeOptions).toBeTruthy();\r\n          if (options.xliffmergeOptions) {\r\n              expect(options.xliffmergeOptions.i18nFormat).toBe('xlf2');\r\n              expect(options.xliffmergeOptions.srcDir).toBe('src/xy');\r\n              expect(options.xliffmergeOptions.genDir).toBe('src/xy');\r\n              expect(options.xliffmergeOptions.defaultLanguage).toBe('de');\r\n              expect(options.xliffmergeOptions.languages).toEqual(['de', 'en', 'fr', 'ru']);\r\n          }\r\n      });\r\n\r\n      it('should add npm script \"extract-i18n\" to package.json using builder xliffmerge', () => {\r\n          const tree = runSchematic({}, appTree);\r\n          const packageJson = readPackageJson(tree);\r\n          const extractScript = packageJson.scripts[extractScriptName('bar', true)];\r\n          expect(extractScript).toBeTruthy();\r\n          expect(extractScript).toBe(\r\n              'ng xi18n bar --i18n-format xlf --output-path i18n --i18n-locale en && ng run bar:xliffmerge');\r\n      });\r\n\r\n      it('should add npm script \"start-xyz\" to package.json when called with language xyz', () => {\r\n          const lang = 'xyz';\r\n          const tree = runSchematic({i18nLocale: 'de', languages: lang}, appTree);\r\n          const packageJson = readPackageJson(tree);\r\n          const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n          expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n          const startScript = packageJson.scripts['start-' + lang];\r\n          expect(startScript).toBeTruthy();\r\n          expect(startScript).toBe(\r\n              'ng serve --configuration=' + lang);\r\n      });\r\n\r\n      it('should add npm script \"start-xyz\" to package.json when called with language xyz' +\r\n          'even if project is set, but it is the default project', () => {\r\n          // normally, when you specify a project \"bar\", start script should be called start-bar-xyz\r\n          // but if bar is the default project, it is just called start-xyz.\r\n          const lang = 'xyz';\r\n          const tree = runSchematic({i18nLocale: 'de', project: 'bar', languages: lang}, appTree);\r\n          const packageJson = readPackageJson(tree);\r\n          const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n          expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n          const startScript = packageJson.scripts['start-' + lang];\r\n          expect(startScript).toBeTruthy();\r\n          expect(startScript).toBe(\r\n              'ng serve --configuration=' + lang);\r\n      });\r\n  });\r\n\r\n    describe('with multiple projects', () => {\r\n\r\n        const appOptions1: ApplicationOptions = Object.assign({}, appOptions, {name: 'bar'});\r\n\r\n        const appOptions2: ApplicationOptions = Object.assign({}, appOptions, {name: 'foo'});\r\n\r\n        const libOptions1: LibraryOptions = Object.assign({}, libOptions, {name: 'foolib'});\r\n\r\n        let appTree: UnitTestTree;\r\n        beforeEach(async () => {\r\n            appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'workspace', workspaceOptions).toPromise();\r\n            appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'application', appOptions1, appTree).toPromise();\r\n            appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'application', appOptions2, appTree).toPromise();\r\n            appTree = await testRunner.runExternalSchematicAsync('@schematics/angular', 'library', libOptions1, appTree).toPromise();\r\n        });\r\n\r\n        it('should throw an exception when called with a library project', () => {\r\n            try {\r\n                runSchematic({project: 'foolib'}, appTree);\r\n                fail('expected exception (called on library) did not occur');\r\n            } catch (e) {\r\n                expect(e.message).toContain('Project must be of type \"application\"');\r\n            }\r\n        });\r\n\r\n        it('should add npm script \"start-foolib-xyz\" to package.json when called with language xyz', () => {\r\n            // when you specify a project \"foo\", start script should be called start-foo-xyz\r\n            const lang = 'xyz';\r\n            const tree = runSchematic({i18nLocale: 'de', project: 'foo', languages: lang}, appTree);\r\n            const packageJson = readPackageJson(tree);\r\n            const startScriptDefaultLang = packageJson.scripts['start-de'];\r\n            expect(startScriptDefaultLang).toBeFalsy(); // no start script for default lang needed\r\n            const startScript = packageJson.scripts['start-foo-' + lang];\r\n            expect(startScript).toBeTruthy();\r\n            expect(startScript).toBe(\r\n                'ng serve foo --configuration=' + lang);\r\n        });\r\n\r\n        it('should add npm script \"extract-i18n\" to package.json using command line xliffmerge', () => {\r\n            const tree = runSchematic({project: 'foo', useXliffmergeBuilder: false}, appTree);\r\n            const packageJson = readPackageJson(tree);\r\n            const extractScript = packageJson.scripts[extractScriptName('foo', false)];\r\n            expect(extractScript).toBeTruthy();\r\n            // here output-path should be src/i18n, because it is relative to project root for non default projects\r\n            expect(extractScript).toBe(\r\n                'ng xi18n foo --i18n-format xlf --output-path src/i18n --i18n-locale en && xliffmerge --profile xliffmerge.json');\r\n        });\r\n\r\n    });\r\n});\r\n"]}