{"version":3,"file":"common-functions.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/common/common-functions.ts"],"names":[],"mappings":";AAAA;;IAEI;;AAIJ,2DAAmG;AACnG,2CAAiE;AACjE,4DAAwE;AAExE;;;;;;;GAOG;AACH,SAAgB,qBAAqB,CAAC,IAAY;IAC9C,MAAM,OAAO,GAAG,wCAAwC,CAAC;IACzD,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC9B,CAAC;AAHD,sDAGC;AAED;;GAEG;AACH,SAAgB,6BAA6B,CAAC,OAA0B,EAAE,QAAgB;IACtF,OAAO;QACH,GAAG,EAAE,IAAI;QACT,UAAU,EAAE,QAAQ,OAAO,CAAC,OAAO,IAAI,QAAQ,EAAE;QACjD,QAAQ,EAAE,GAAG,OAAO,CAAC,MAAM,aAAa,QAAQ,MAAM;QACtD,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,UAAU,EAAE,QAAQ;KACvB,CAAC;AACN,CAAC;AARD,sEAQC;AAED;;GAEG;AACH,SAAgB,6BAA6B,CAAC,OAA0B,EAAE,QAAgB;IACtF,OAAO;QACH,aAAa,EAAE,GAAG,OAAO,CAAC,OAAO,UAAU,QAAQ,EAAE;KACxD,CAAC;AACN,CAAC;AAJD,sEAIC;AAED;;;GAGG;AACH,SAAgB,oCAAoC,CAAC,WAA8B;IAC/E,OAAO,CAAC,IAAU,EAAE,OAAyB,EAAE,EAAE;QAC7C,MAAM,sBAAsB,GAAmB;YAC3C,IAAI,EAAE,oCAAkB,CAAC,GAAG;YAC5B,IAAI,EAAE,6BAAiB;YACvB,OAAO,EAAE,6BAAiB;YAC1B,SAAS,EAAE,IAAI;SAClB,CAAC;QACF,0CAAwB,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC;QACvD,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,CAAC,OAAO,CAAC,IAAI,8BAAsB,EAAE,CAAC,CAAC;SACjD;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;AACN,CAAC;AAdD,oFAcC","sourcesContent":["/**\r\n * Functions shared between the schematics.\r\n **/\r\n\r\nimport {OptionsAfterSetup} from './options-after-setup';\r\nimport {SchematicContext, Tree} from '@angular-devkit/schematics';\r\nimport {addPackageJsonDependency, NodeDependency, NodeDependencyType} from '../../schematics-core';\r\nimport {xliffmergePackage, xliffmergeVersion} from './constants';\r\nimport {NodePackageInstallTask} from '@angular-devkit/schematics/tasks';\r\n\r\n/**\r\n * Check syntax of language code.\r\n * (pattern copied from xliffmerge)\r\n * Must be compatible with XML Schema type xsd:language.\r\n * Pattern: [a-zA-Z]{1,8}((-|_)[a-zA-Z0-9]{1,8})*\r\n * @param lang the language code\r\n * @return true, if valid, false otherwise\r\n */\r\nexport function isValidLanguageSyntax(lang: string): boolean {\r\n    const pattern = /^[a-zA-Z]{1,8}([-_][a-zA-Z0-9]{1,8})*$/;\r\n    return pattern.test(lang);\r\n}\r\n\r\n/**\r\n * returns the build configuration to be set.\r\n */\r\nexport function buildConfigurationForLanguage(options: OptionsAfterSetup, language: string): any {\r\n    return {\r\n        aot: true,\r\n        outputPath: `dist/${options.project}-${language}`,\r\n        i18nFile: `${options.genDir}/messages.${language}.xlf`,\r\n        i18nFormat: options.i18nFormat,\r\n        i18nLocale: language\r\n    };\r\n}\r\n\r\n/**\r\n * returns the serve configuration to be set.\r\n */\r\nexport function serveConfigurationForLanguage(options: OptionsAfterSetup, language: string): any {\r\n    return {\r\n        browserTarget: `${options.project}:build:${language}`\r\n    };\r\n}\r\n\r\n/**\r\n * Add dev dependencies to actual xliffmerge version to package.json\r\n * @param skipInstall wether install should be skipped\r\n */\r\nexport function addXliffmergeDependencyToPackageJson(skipInstall: boolean|undefined) {\r\n    return (host: Tree, context: SchematicContext) => {\r\n        const dependencyToXliffmerge: NodeDependency = {\r\n            type: NodeDependencyType.Dev,\r\n            name: xliffmergePackage,\r\n            version: xliffmergeVersion,\r\n            overwrite: true\r\n        };\r\n        addPackageJsonDependency(host, dependencyToXliffmerge);\r\n        if (!skipInstall) {\r\n            context.addTask(new NodePackageInstallTask());\r\n        }\r\n        return host;\r\n    };\r\n}\r\n\r\n"]}