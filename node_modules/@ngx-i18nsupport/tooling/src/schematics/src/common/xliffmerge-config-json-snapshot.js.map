{"version":3,"file":"xliffmerge-config-json-snapshot.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/common/xliffmerge-config-json-snapshot.ts"],"names":[],"mappings":";;AAAA,2DAAuF;AAGvF;;;;GAIG;AACH,MAAa,4BAA4B;IAKrC;;;;;;;OAOG;IACH,YAAY,QAAgB,EAAU,IAAU,EAAU,OAA0B;QAA9C,SAAI,GAAJ,IAAI,CAAM;QAAU,YAAO,GAAP,OAAO,CAAmB;QAChF,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;QAC3B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;IAChE,CAAC;IAEM,uBAAuB;QAC1B,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAED;;;OAGG;IACI,MAAM;QACT,MAAM,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;IAC/D,CAAC;IAED;;;;OAIG;IACI,qCAAqC,CACxC,cAAwB;QAExB,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,EAAE;YAC9C,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,GAAG,EAAE,CAAC;SACpD;QACD,MAAM,iBAAiB,GAAa,EAAE,CAAC;QACvC,MAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,SAAS,CAAC;QACxE,IAAI,SAAS,EAAE;YACX,iBAAiB,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC;SACxC;QACD,iBAAiB,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;QAC1C,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,SAAS,GAAG,iBAAiB,CAAC;QAC1E,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,UAAU,mBAAmB,CAAC,CAAC;SAC3E;IACL,CAAC;IAED;;;OAGG;IACK,wBAAwB;QAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,EAAE;YACV,MAAM,GAAG,GAAG,+CAA+C,IAAI,CAAC,UAAU,GAAG,CAAC;YAC9E,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aAClC;YACD,MAAM,IAAI,gCAAmB,CAAC,GAAG,CAAC,CAAC;SACtC;QACD,MAAM,aAAa,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAChD,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAgB,CAAC;IACpD,CAAC;CACJ;AAtED,oEAsEC","sourcesContent":["import {SchematicContext, SchematicsException, Tree} from '@angular-devkit/schematics';\r\nimport {IConfigFile} from '@ngx-i18nsupport/ngx-i18nsupport';\r\n\r\n/**\r\n * Read and edit functionality on xliffmerge.json\r\n * It allows changes on xliffmerge.json file.\r\n * At the end we call commit() to write angular.json.\r\n */\r\nexport class XliffmergeConfigJsonSnapshot {\r\n\r\n    private readonly xliffmergeConfigJson: IConfigFile;\r\n    private readonly configPath: string;\r\n\r\n    /**\r\n     * Create it.\r\n     * Read the file xliffmerge.json\r\n     * @param filename filename to config file (including name)\r\n     * @param host host tree\r\n     * @param context context (used for logging)\r\n     * @throws SchematicsException when package.json does not exists.\r\n     */\r\n    constructor(filename: string, private host: Tree, private context?: SchematicContext) {\r\n        this.configPath = filename;\r\n        this.xliffmergeConfigJson = this.readXliffmergeConfigJson();\r\n    }\r\n\r\n    public getXliffmergeConfigJson(): IConfigFile {\r\n        return this.xliffmergeConfigJson;\r\n    }\r\n\r\n    /**\r\n     * Commit all changes done on workspace.\r\n     * (writes angular.json)\r\n     */\r\n    public commit() {\r\n        const newConfigJsonContent = JSON.stringify(this.xliffmergeConfigJson, null, 2);\r\n        this.host.overwrite(this.configPath, newConfigJsonContent);\r\n    }\r\n\r\n    /*\r\n    Add language configuration of newly added languages.\r\n    This adds the new language to the xliffmerge.json config file.\r\n    Returns the changed config file content.\r\n     */\r\n    public addLanguagesToXliffmergeConfiguration(\r\n        languagesToAdd: string[]) {\r\n\r\n        if (!this.xliffmergeConfigJson.xliffmergeOptions) {\r\n            this.xliffmergeConfigJson.xliffmergeOptions = {};\r\n        }\r\n        const newLanguagesArray: string[] = [];\r\n        const languages = this.xliffmergeConfigJson.xliffmergeOptions.languages;\r\n        if (languages) {\r\n            newLanguagesArray.push(...languages);\r\n        }\r\n        newLanguagesArray.push(...languagesToAdd);\r\n        this.xliffmergeConfigJson.xliffmergeOptions.languages = newLanguagesArray;\r\n        if (this.context) {\r\n            this.context.logger.info(`changed ${this.configPath}, added languages`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read xliffmerge.json\r\n     * @return content or exception, if file does not exist.\r\n     */\r\n    private readXliffmergeConfigJson(): IConfigFile {\r\n        const content = this.host.read(this.configPath);\r\n        if (!content) {\r\n            const msg = `Did not find any configuration information (${this.configPath})`;\r\n            if (this.context) {\r\n                this.context.logger.fatal(msg);\r\n            }\r\n            throw new SchematicsException(msg);\r\n        }\r\n        const contentString = content.toString('UTF-8');\r\n        return JSON.parse(contentString) as IConfigFile;\r\n    }\r\n}\r\n"]}