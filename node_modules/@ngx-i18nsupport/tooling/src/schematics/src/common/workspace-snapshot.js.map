{"version":3,"file":"workspace-snapshot.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/common/workspace-snapshot.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Additional angular.json specific tool functions that are not part of normal project.ts\r\n */\r\n\r\nimport {SchematicContext, SchematicsException, Tree} from '@angular-devkit/schematics';\r\nimport {ProjectType, WorkspaceProject, WorkspaceSchema} from '../../schematics-core/utility/workspace-models';\r\nimport {OptionsAfterSetup} from './options-after-setup';\r\nimport {xliffmergeBuilderName, xliffmergeBuilderSpec} from './constants';\r\nimport {buildConfigurationForLanguage, serveConfigurationForLanguage} from './common-functions';\r\nimport {IXliffMergeOptions} from '@ngx-i18nsupport/ngx-i18nsupport';\r\n\r\n/**\r\n * Read and edit functionality on angular.json\r\n * It allows multiple changes on angular.json file.\r\n * At the end we call commit() to write angular.json.\r\n */\r\nexport class WorkspaceSnaphot {\r\n    private readonly workspace: WorkspaceSchema;\r\n\r\n    /**\r\n     * Create it.\r\n     * Read the file angular.json\r\n     * @param host host tree\r\n     * @param context context (used for logging)\r\n     * @throws SchematicsException when angular.json does not exists.\r\n     */\r\n    constructor(private host: Tree, private context?: SchematicContext) {\r\n        this.workspace = this.readAngularJson();\r\n    }\r\n\r\n    /**\r\n     * Commit all changes done on workspace.\r\n     * (writes angular.json)\r\n     */\r\n    public commit() {\r\n        const newAngularJsonContent = JSON.stringify(this.workspace, null, 2);\r\n        this.host.overwrite('/angular.json', newAngularJsonContent);\r\n    }\r\n\r\n    /**\r\n     * Get project from angular.json.\r\n     * @param projectName Name of project\r\n     * @throws an exception if angular.json or project does not exist.\r\n     */\r\n    public getProjectByName(\r\n        projectName: string,\r\n    ): WorkspaceProject<ProjectType> {\r\n        const projects = this.workspace.projects;\r\n        if (!projects) {\r\n            throw new SchematicsException('angular.json does not contain projects');\r\n        }\r\n        const project = projects[projectName];\r\n        if (!project) {\r\n            throw new SchematicsException('angular.json does not contain project ' + projectName);\r\n        }\r\n        return project;\r\n    }\r\n\r\n    /**\r\n     * Return all projects.\r\n     */\r\n    public getAllProjects(): {name: string, project: WorkspaceProject<ProjectType>}[] {\r\n        return Object.keys(this.workspace.projects).map(projectName => {\r\n            return {\r\n                name: projectName,\r\n                project: this.workspace.projects[projectName]\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return name of default project.\r\n     */\r\n    public getDefaultProjectName(): string|undefined {\r\n        return this.workspace.defaultProject;\r\n    }\r\n\r\n    /**\r\n     * Add a build configuration to angular.json.\r\n     * Configuration is stored under architect.build.configurations\r\n     * @param projectName Name of project\r\n     * @param configurationName Name of configuration to add\r\n     * @param configuration configuration object\r\n     */\r\n    public addArchitectBuildConfigurationToProject(\r\n        projectName: string,\r\n        configurationName: string,\r\n        configuration: any) {\r\n\r\n        return this.addObjectToProjectPath(projectName,\r\n            'build configuration',\r\n            ['architect', 'build', 'configurations'],\r\n            configurationName, configuration);\r\n    }\r\n\r\n    /**\r\n     * Add a serve configuration to angular.json.\r\n     * Configuration is stored under architect.serve.configurations\r\n     * @param projectName Name of project\r\n     * @param configurationName Name of configuration to add\r\n     * @param configuration configuration object\r\n     */\r\n    public addArchitectServeConfigurationToProject(\r\n        projectName: string,\r\n        configurationName: string,\r\n        configuration: any) {\r\n\r\n        return this.addObjectToProjectPath(projectName,\r\n            'serve configuration',\r\n            ['architect', 'serve', 'configurations'],\r\n            configurationName, configuration);\r\n    }\r\n\r\n    /**\r\n     * Add a builder to angular.json.\r\n     * Builder is stored under architect\r\n     * @param projectName Name of project\r\n     * @param builderName Name of builder to add\r\n     * @param builder builder in syntax <class|package>:name\r\n     * @param options options\r\n     * @param configuration optional configuration object\r\n     */\r\n    public addArchitectBuilderToProject(\r\n        projectName: string,\r\n        builderName: string,\r\n        builder: string,\r\n        options: any,\r\n        configuration?: any) {\r\n\r\n        const builderSpec: any = {\r\n            builder: builder,\r\n            options: options\r\n        };\r\n        if (configuration) {\r\n            builderSpec.configuration = configuration;\r\n        }\r\n        return this.addObjectToProjectPath(projectName,\r\n            'architect builder',\r\n            ['architect'],\r\n            builderName, builderSpec);\r\n    }\r\n\r\n    /**\r\n     * Add the build and serve configuration for a given language to angular.json.\r\n     * @param options options containing project etc.\r\n     * @param language the language to be added.\r\n     */\r\n    public addLanguageConfigurationToProject(options: OptionsAfterSetup,\r\n                                                      language: string) {\r\n        this.addArchitectBuildConfigurationToProject(\r\n            options.project,\r\n            language,\r\n            buildConfigurationForLanguage(options, language)\r\n        );\r\n        if (this.context) {\r\n            this.context.logger.info(`added build configuration for language \"${language}\" to project \"${options.project}\"`);\r\n        }\r\n        this.addArchitectServeConfigurationToProject(\r\n            options.project,\r\n            language,\r\n            serveConfigurationForLanguage(options, language)\r\n        );\r\n        if (this.context) {\r\n            this.context.logger.info(`added serve configuration for language \"${language}\" to project \"${options.project}\"`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the builder configuration for xliffmerge builder to angular.json.\r\n     * @param options options containing project etc.\r\n     */\r\n    public addBuilderConfigurationToProject(options: OptionsAfterSetup) {\r\n        const baseDir = (options.isDefaultProject) ? '' : `projects/${options.project}/`;\r\n        const builderOptions = {\r\n            xliffmergeOptions: {\r\n                i18nFormat: options.i18nFormat,\r\n                srcDir: `${baseDir}${options.srcDir}`,\r\n                genDir: `${baseDir}${options.genDir}`,\r\n                defaultLanguage: options.parsedLanguages[0],\r\n                languages: options.parsedLanguages\r\n            }\r\n        };\r\n        this.addArchitectBuilderToProject(\r\n            options.project,\r\n            xliffmergeBuilderName,\r\n            xliffmergeBuilderSpec,\r\n            builderOptions\r\n        );\r\n        if (this.context) {\r\n            this.context.logger.info(`added builder xliffmerge to project \"${options.project}\"`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read the xliffmerge configuration form the builder options.\r\n     * @param projectName name of project\r\n     */\r\n    public getActualXliffmergeConfigFromWorkspace(projectName: string)\r\n        : {xliffmergeOptions: IXliffMergeOptions, profile?: string} | null {\r\n        if (!projectName) {\r\n            return null;\r\n        }\r\n        const project: WorkspaceProject<ProjectType>|null = this.getProjectByName(projectName);\r\n        if (!project || !project.architect) {\r\n            return null;\r\n        }\r\n        const xliffmergeBuilder = project.architect['xliffmerge'];\r\n        if (!xliffmergeBuilder || !xliffmergeBuilder.options) {\r\n            return null;\r\n        }\r\n        if (xliffmergeBuilder.options && xliffmergeBuilder.options.xliffmergeOptions) {\r\n            return xliffmergeBuilder.options;\r\n        } else if (xliffmergeBuilder.options.profile) {\r\n            // read profile\r\n            const content = this.host.read(xliffmergeBuilder.options.profile);\r\n            if (!content) {\r\n                return null;\r\n            }\r\n            const contentString = content.toString('UTF-8');\r\n            const profileContent = JSON.parse(contentString) as {xliffmergeOptions: IXliffMergeOptions};\r\n            return {\r\n                xliffmergeOptions: profileContent.xliffmergeOptions,\r\n                profile: xliffmergeBuilder.options.profile\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * (private) Add an object to angular.json.\r\n     * Object is stored under path given as parameter.\r\n     * @param objectType Type of object, will be shown in log (either a build or serve configuration or a builder)\r\n     * @param projectName Name of project\r\n     * @param path path in project, like ['architect', 'build', 'configurations']\r\n     * @param objectName Name of object to add\r\n     * @param objectToAdd object to be added (either a configuration or a builder)\r\n     */\r\n    private addObjectToProjectPath(\r\n        projectName: string,\r\n        objectType: string,\r\n        path: string[],\r\n        objectName: string,\r\n        objectToAdd: any) {\r\n\r\n        const projects = this.workspace.projects;\r\n        if (!projects) {\r\n            throw new SchematicsException('angular.json does not contain projects');\r\n        }\r\n        const project = projects[projectName];\r\n        if (!project) {\r\n            throw new SchematicsException('angular.json does not contain project ' + projectName);\r\n        }\r\n        const container = this.getObjectFromProjectUsingPath(projectName, project, path);\r\n        const addedOrChanged = (container[objectName]) ? 'changed' : 'added';\r\n        container[objectName] = objectToAdd;\r\n        if (this.context) {\r\n            this.context.logger.info(`${addedOrChanged} ${objectType} ${objectName} to project ${projectName}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * (private) get a special object from project by navigating a path\r\n     * Throws an exception if path does not exist.\r\n     * @param projectName Name of project.\r\n     * @param project the project read from angular.json\r\n     * @param path path like ['architect', 'build', 'configurations']\r\n     * @return the object at the path position\r\n     * @throws SchematicsException if path does not exist.\r\n     */\r\n    private getObjectFromProjectUsingPath(projectName: string, project: WorkspaceProject<ProjectType>, path: string[]): any {\r\n        let object: any = project;\r\n        let currentPath = '';\r\n        for (let i = 0; i < path.length; i++) {\r\n            currentPath = currentPath + '.' + path[i];\r\n            object = object[path[i]];\r\n            if (!object) {\r\n                throw new SchematicsException('angular.json does not contain ' + currentPath + ' in project ' + projectName);\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n\r\n    /*\r\n    private helper function to read angular.json\r\n     */\r\n    private readAngularJson(): WorkspaceSchema  {\r\n        const noAngularJsonMsg = 'file angular.json not found';\r\n        if (this.host.exists('/angular.json')) {\r\n            const content = this.host.read('/angular.json');\r\n            if (!content) {\r\n                throw new SchematicsException(noAngularJsonMsg);\r\n            }\r\n            const sourceText = content.toString('utf-8');\r\n            return JSON.parse(sourceText);\r\n        } else {\r\n            throw new SchematicsException(noAngularJsonMsg);\r\n        }\r\n    }\r\n}\r\n\r\n"]}