{"version":3,"file":"options-after-setup.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/common/options-after-setup.ts"],"names":[],"mappings":";;AAAA,2DAAuF;AACvF,iEAAkE;AAGlE,2DAAgD;AA6BhD,SAAgB,kBAAkB,CAAC,sBAAqC,EAAE,IAAU,EAAE,OAAyB;IAC3G,MAAM,OAAO,GAA0C,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,sBAAsB,CAAC,CAAC;IACjG,IAAI,SAA0B,CAAC;IAC/B,IAAI;QACA,SAAS,GAAG,qBAAY,CAAC,IAAI,CAAC,CAAC;KAClC;IAAC,OAAO,CAAC,EAAE;QACR,MAAM,GAAG,GAAG,yEAAyE,CAAC;QACtF,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1B,MAAM,IAAI,gCAAmB,CAAC,GAAG,CAAC,CAAC;KACtC;IACD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE;QACrB,MAAM,GAAG,GAAG,oFAAoF,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAC7H,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1B,MAAM,IAAI,gCAAmB,CAAC,GAAG,CAAC,CAAC;KACtC;IACD,MAAM,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,OAAO,CAAC,gBAAgB,GAAG,CAAC,sBAAsB,CAAC,OAAO,IAAI,sBAAsB,CAAC,OAAO,KAAK,kBAAkB,CAAC;IACpH,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;QAClB,OAAO,CAAC,OAAO,GAAG,kBAAkB,CAAC;KACxC;IACD,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACpD,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,GAAG,GAAG,uCAAuC,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;QAC7E,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1B,MAAM,IAAI,gCAAmB,CAAC,GAAG,CAAC,CAAC;KACtC;IACD,IAAI,OAAO,CAAC,WAAW,KAAK,aAAa,EAAE;QACvC,MAAM,GAAG,GAAG,4DAA4D,GAAG,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;QACtG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC1B,MAAM,IAAI,gCAAmB,CAAC,GAAG,CAAC,CAAC;KACtC;IACD,IAAI,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE;QAC5B,OAAO,CAAC,IAAI,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;KACrC;IACD,MAAM,UAAU,GAAa,2BAAS,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAChE,OAAO,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;IAC/B,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;IACvB,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;IACvB,IAAI,OAAO,CAAC,UAAU,EAAE;QACpB,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC;QAC3D,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC;KAC9D;IACD,OAAO,CAAC,mBAAmB,GAAG,EAAE,CAAC;IACjC,OAAO,CAAC,yBAAyB,GAAG,KAAK,CAAC;IAC1C,OAAO,OAAO,CAAC;AACnB,CAAC;AA7CD,gDA6CC","sourcesContent":["import {Tree, SchematicContext, SchematicsException} from '@angular-devkit/schematics';\r\nimport {getWorkspace} from '../../schematics-core/utility/config';\r\nimport {WorkspaceSchema} from '../../schematics-core/utility/workspace-models';\r\nimport {Location} from '../../schematics-core/utility/parse-name';\r\nimport {parseName} from '../../schematics-core';\r\n\r\nexport interface CommonOptions {\r\n    path?: string; // project path, normally $projectRoot, xliffmerge-config.json will be created here\r\n    project?: string; // project name\r\n}\r\n\r\n/**\r\n * All relevant option values that are given by input, set by default or read from project.\r\n */\r\nexport interface OptionsAfterSetup {\r\n    path: string; // project path, normally $projectRoot, xliffmerge-config.json will be created here\r\n    project: string; // project name\r\n    isDefaultProject: boolean;\r\n    localePath: string;\r\n    srcDir: string;\r\n    genDir: string;\r\n    i18nFormat: string; // the used format (xlf, xlf2, xmb)\r\n    i18nLocale: string; // the default language\r\n    languages?: string; // languages given at command line as comma separated list\r\n    parsedLanguages: string[]; // languages given at command line plus default language\r\n    configuredLanguages: string[]; // languages that are already in the workspace\r\n    useComandlineForLanguages: boolean; // if set, all languages are given as command line argument to xliffmerge\r\n                                        // if not, they are configured in xliffmerge.json (preferred variant)\r\n    skipInstall?: boolean; // When true, does not install dependency packages.\r\n    useXliffmergeBuilder?: boolean; // use builder if true\r\n    profileUsedByBuilder?: string; // if builder is used and the builder is using a profile, the path of the profile\r\n}\r\n\r\nexport function setupCommonOptions(optionsFromCommandline: CommonOptions, host: Tree, context: SchematicContext): OptionsAfterSetup {\r\n    const options: OptionsAfterSetup = <OptionsAfterSetup> Object.assign({}, optionsFromCommandline);\r\n    let workspace: WorkspaceSchema;\r\n    try {\r\n        workspace = getWorkspace(host);\r\n    } catch (e) {\r\n        const msg = 'Could not find a workspace (must contain angular.json or .angular.json)';\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    if (!workspace.projects) {\r\n        const msg = 'Returned workspace contains no projects, workspace (content of angular.json) was: ' + JSON.stringify(workspace);\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    const defaultProjectName = Object.keys(workspace.projects)[0];\r\n    options.isDefaultProject = !optionsFromCommandline.project || optionsFromCommandline.project === defaultProjectName;\r\n    if (!options.project) {\r\n        options.project = defaultProjectName;\r\n    }\r\n    const project = workspace.projects[options.project];\r\n    if (!project) {\r\n        const msg = 'Workspace contains no project named \"' + options.project + '\".';\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    if (project.projectType !== 'application') {\r\n        const msg = 'Project must be of type \"application\", but it is of type \"' + project.projectType + '\".';\r\n        context.logger.fatal(msg);\r\n        throw new SchematicsException(msg);\r\n    }\r\n    if (options.path === undefined) {\r\n        options.path = `/${project.root}`;\r\n    }\r\n    const parsedPath: Location = parseName(options.path, 'anyfile');\r\n    options.path = parsedPath.path;\r\n    options.srcDir = 'src';\r\n    options.genDir = 'src';\r\n    if (options.localePath) {\r\n        options.srcDir = options.srcDir + '/' + options.localePath;\r\n        options.genDir = options.genDir + '/' + options.localePath;\r\n    }\r\n    options.configuredLanguages = [];\r\n    options.useComandlineForLanguages = false;\r\n    return options;\r\n}\r\n"]}