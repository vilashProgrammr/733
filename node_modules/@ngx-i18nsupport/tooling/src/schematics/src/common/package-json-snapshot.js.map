{"version":3,"file":"package-json-snapshot.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/common/package-json-snapshot.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Additional package.json spefific tool functions that are not part of normal package.ts\r\n */\r\n\r\nimport {SchematicContext, SchematicsException, Tree} from '@angular-devkit/schematics';\r\nimport {OptionsAfterSetup} from './options-after-setup';\r\nimport {extractScriptName} from './constants';\r\nimport {ExtractScript} from './extract-script';\r\n\r\n/**\r\n * rudimentary interface of package.json (only what is used here).\r\n */\r\nexport interface IPackageJson {\r\n    devDependencies: { [packagename: string]: string };\r\n    scripts: { [scriptname: string]: string };\r\n}\r\n\r\n/**\r\n * Read and edit functionality on package.json\r\n * It allows multiple changes on package.json file.\r\n * At the end we call commit() to write angular.json.\r\n */\r\nexport class PackageJsonSnapshot {\r\n\r\n    private readonly packageJson: IPackageJson;\r\n\r\n    /**\r\n     * Create it.\r\n     * Read the file package.json\r\n     * @param _path path where package.json is expected.\r\n     * @param host host tree\r\n     * @param context context (used for logging)\r\n     * @throws SchematicsException when package.json does not exists.\r\n     */\r\n    constructor(private _path: string, private host: Tree, private context?: SchematicContext) {\r\n        this.packageJson = this.readPackageJson();\r\n    }\r\n\r\n    /**\r\n     * Patht of package json.\r\n     */\r\n    public path(): string {\r\n        return this._path;\r\n    }\r\n\r\n    /**\r\n     * Actual content of package json.\r\n     */\r\n    public content(): string {\r\n        return JSON.stringify(this.packageJson, null, 2);\r\n    }\r\n\r\n    /**\r\n     * Commit all changes done on workspace.\r\n     * (writes angular.json)\r\n     */\r\n    public commit() {\r\n        this.host.overwrite(`${this._path}/package.json`, this.content());\r\n    }\r\n\r\n    /**\r\n     * Get a script with given name or null, if not existing.\r\n     * @param scriptName name of script\r\n     * @return content of script\r\n     */\r\n    public getScript(\r\n        scriptName: string\r\n    ): string | null {\r\n        return this.packageJson.scripts[scriptName];\r\n    }\r\n\r\n    /**\r\n     * Get the extract script, if contained in package.json.\r\n     */\r\n    public getExtractScriptForProject(project: string|null, isDefaultProject: boolean): ExtractScript|null {\r\n        const scriptname = extractScriptName(project, isDefaultProject);\r\n        const content = this.getScript(scriptname);\r\n        if (content) {\r\n            return new ExtractScript(scriptname, content);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a script to package.json\r\n     * @param scriptName name of script to be added.\r\n     * @param content content of script\r\n     */\r\n    public addOrReplaceScript(\r\n        scriptName: string,\r\n        content: string\r\n    ) {\r\n        const scriptsSection = 'scripts';\r\n        if (!this.packageJson[scriptsSection]) {\r\n            this.packageJson[scriptsSection] = {};\r\n        }\r\n        const isOverride = !!this.packageJson[scriptsSection][scriptName];\r\n        this.packageJson[scriptsSection][scriptName] = content;\r\n        if (this.context) {\r\n            if (isOverride) {\r\n                this.context.logger.info(`changed script ${scriptName} in ${this._path}/package.json`);\r\n            } else {\r\n                this.context.logger.info(`added script ${scriptName} to ${this._path}/package.json`);\r\n            }\r\n       }\r\n    }\r\n\r\n    /**\r\n     * Remove a script from package.json\r\n     * @param scriptName name of script to be removed.\r\n     */\r\n    public removeScript(scriptName: string) {\r\n        const scriptsSection = 'scripts';\r\n        if (!this.packageJson[scriptsSection]) {\r\n            return;\r\n        }\r\n        const exists = !!this.packageJson[scriptsSection][scriptName];\r\n        if (exists) {\r\n            delete this.packageJson[scriptsSection][scriptName];\r\n        }\r\n        if (this.context) {\r\n            if (exists) {\r\n                this.context.logger.info(`removed script ${scriptName} from ${this._path}/package.json`);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addExtractScript(options: OptionsAfterSetup) {\r\n        const extractScript = ExtractScript.createExtractScript(options);\r\n        this.addOrReplaceScript(\r\n            extractScript.name,\r\n            extractScript.content\r\n        );\r\n        if (this.context) {\r\n            this.context.logger.info(`added npm script to extract i18n message, run \"npm run ${extractScript.name}\" for extraction`);\r\n        }\r\n    }\r\n\r\n    /*\r\n    change extract script \"extract-i18n\" to contain newly added languages.\r\n     */\r\n    public changeExtractScript(options: OptionsAfterSetup) {\r\n        // check wether it is changed\r\n        const existingScriptContent = this.getScript(extractScriptName(options.project, options.isDefaultProject));\r\n        const extractScript = ExtractScript.createExtractScript(options);\r\n        if (existingScriptContent !== extractScript.content) {\r\n            this.addOrReplaceScript(\r\n                extractScript.name,\r\n                extractScript.content\r\n            );\r\n            if (this.context) {\r\n                this.context.logger.info(\r\n                    `changed npm script to extract i18n message, run \"npm run ${extractScript.name}\" for extraction`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a start script.\r\n     * Script will be named 'start-<language>' or 'start-<project>-<language'.\r\n     * @param options options options containing project etc.\r\n     * @param language language to be added.\r\n     */\r\n    public addStartScript(options: OptionsAfterSetup, language: string) {\r\n        const scriptName = (options.isDefaultProject) ? `start-${language}` : `start-${options.project}-${language}`;\r\n        this.addOrReplaceScript(\r\n            scriptName,\r\n            this.startScript(options, language)\r\n        );\r\n        if (this.context) {\r\n            this.context.logger.info(`added npm script to start app for language ${language}, run \"npm run ${scriptName}\"`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * returns the start script to be added.\r\n     */\r\n    private startScript(options: OptionsAfterSetup, language: string): string {\r\n        if (options.isDefaultProject) {\r\n            return `ng serve --configuration=${language}`;\r\n        } else {\r\n            return `ng serve ${options.project} --configuration=${language}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read package.json\r\n     * @host the tree to read from\r\n     * @return content or null, if file does not exist.\r\n     */\r\n    private readPackageJson(): IPackageJson {\r\n        const packageJsonPath = `${this._path}/package.json`;\r\n        const content = this.host.read(packageJsonPath);\r\n        if (!content) {\r\n            throw new SchematicsException(`${packageJsonPath} does not exist`);\r\n        }\r\n        const contentString = content.toString('UTF-8');\r\n        return JSON.parse(contentString) as IPackageJson;\r\n    }\r\n}\r\n"]}