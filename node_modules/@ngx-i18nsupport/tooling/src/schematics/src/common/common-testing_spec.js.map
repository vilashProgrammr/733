{"version":3,"file":"common-testing_spec.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/src/common/common-testing_spec.ts"],"names":[],"mappings":";AAAA;;GAEG;;AAIH,mEAA2F;AAK3F,6DAAsD;AAEzC,QAAA,gBAAgB,GAAqB;IAC9C,IAAI,EAAE,WAAW;IACjB,cAAc,EAAE,UAAU;IAC1B,OAAO,EAAE,OAAO;CACnB,CAAC;AAEW,QAAA,UAAU,GAAuB;IAC1C,IAAI,EAAE,KAAK;IACX,eAAe,EAAE,KAAK;IACtB,WAAW,EAAE,KAAK;IAClB,cAAc,EAAE,KAAK;IACrB,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,cAAK,CAAC,GAAG;IAChB,SAAS,EAAE,IAAI;IACf,eAAe,EAAE,IAAI;CACxB,CAAC;AAEW,QAAA,UAAU,GAAmB;IACtC,IAAI,EAAE,KAAK;IACX,SAAS,EAAE,YAAY;IACvB,MAAM,EAAE,KAAK;IACb,eAAe,EAAE,IAAI;IACrB,WAAW,EAAE,IAAI;IACjB,YAAY,EAAE,IAAI;CACrB,CAAC;AAEF,SAAgB,UAAU,CAAI,IAAkB,EAAE,IAAY;IAC1D,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,IAAI,CAAC,OAAO,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,OAAO,GAAG,IAAI,GAAG,oBAAoB,CAAC,CAAC;KAC1D;IACD,MAAM,aAAa,GAAG,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAChD,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAM,CAAC;AAC1C,CAAC;AAPD,gCAOC;AAED,SAAgB,eAAe,CAAC,IAAkB,EAAE,WAAoB;IACpE,MAAM,IAAI,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,WAAW,CAAC;IACrD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,GAAG,IAAI,eAAe,CAAC,CAAC;IACrD,OAAO,UAAU,CAAe,IAAI,EAAE,GAAG,IAAI,eAAe,CAAC,CAAC;AAClE,CAAC;AAJD,0CAIC;AAED,SAAgB,eAAe,CAAC,IAAkB;IAC9C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;IAC9C,OAAO,UAAU,CAAkB,IAAI,EAAE,eAAe,CAAC,CAAC;AAC9D,CAAC;AAHD,0CAGC;AAED,SAAgB,kBAAkB,CAAC,IAAkB,EAAE,WAAmB;IACtE,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,aAAa,WAAW,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC;IAC3F,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACnC,OAAO,UAAU,CAA0C,IAAI,EAAE,IAAI,CAAC,CAAC;AAC3E,CAAC;AAJD,gDAIC;AAED;;;;GAIG;AACH,SAAgB,iCAAiC,CAAC,IAAkB,EAAE,WAAmB;IACrF,MAAM,EAAE,GAAG,IAAI,qCAAgB,CAAC,IAAI,CAAC,CAAC;IACtC,OAAO,EAAE,CAAC,sCAAsC,CAAC,WAAW,CAAC,CAAC;AAClE,CAAC;AAHD,8EAGC","sourcesContent":["/**\r\n * Some common functions used by testcases.\r\n */\r\n\r\nimport {UnitTestTree} from '@angular-devkit/schematics/testing';\r\nimport {Schema as WorkspaceOptions} from '@schematics/angular/workspace/schema';\r\nimport {Schema as ApplicationOptions, Style} from '@schematics/angular/application/schema';\r\nimport {Schema as LibraryOptions} from '@schematics/angular/library/schema';\r\nimport {IPackageJson} from './package-json-snapshot';\r\nimport {WorkspaceSchema} from '../../schematics-core/utility/workspace-models';\r\nimport {IXliffMergeOptions} from '@ngx-i18nsupport/ngx-i18nsupport';\r\nimport {WorkspaceSnaphot} from './workspace-snapshot';\r\n\r\nexport const workspaceOptions: WorkspaceOptions = {\r\n    name: 'workspace',\r\n    newProjectRoot: 'projects',\r\n    version: '6.0.0',\r\n};\r\n\r\nexport const appOptions: ApplicationOptions = {\r\n    name: 'bar',\r\n    experimentalIvy: false,\r\n    inlineStyle: false,\r\n    inlineTemplate: false,\r\n    minimal: true,\r\n    routing: false,\r\n    style: Style.Css,\r\n    skipTests: true,\r\n    skipPackageJson: true,\r\n};\r\n\r\nexport const libOptions: LibraryOptions = {\r\n    name: 'bar',\r\n    entryFile: 'public_api',\r\n    prefix: 'lib',\r\n    skipPackageJson: true,\r\n    skipInstall: true,\r\n    skipTsConfig: true\r\n};\r\n\r\nexport function readAsJson<T>(tree: UnitTestTree, path: string): T {\r\n    const content = tree.read(path);\r\n    if (!content) {\r\n        throw new Error('file ' + path + ' not found in tree');\r\n    }\r\n    const contentString = content.toString('UTF-8');\r\n    return JSON.parse(contentString) as T;\r\n}\r\n\r\nexport function readPackageJson(tree: UnitTestTree, projectName?: string): IPackageJson {\r\n    const path = (!projectName) ? '' : '/' + projectName;\r\n    expect(tree.files).toContain(`${path}/package.json`);\r\n    return readAsJson<IPackageJson>(tree, `${path}/package.json`);\r\n}\r\n\r\nexport function readAngularJson(tree: UnitTestTree): WorkspaceSchema {\r\n    expect(tree.files).toContain('/angular.json');\r\n    return readAsJson<WorkspaceSchema>(tree, '/angular.json');\r\n}\r\n\r\nexport function readXliffmergeJson(tree: UnitTestTree, projectName: string): {xliffmergeOptions: IXliffMergeOptions} {\r\n    const path = projectName ? `/projects/${projectName}/xliffmerge.json` : '/xliffmerge.json';\r\n    expect(tree.files).toContain(path);\r\n    return readAsJson<{xliffmergeOptions: IXliffMergeOptions}>(tree, path);\r\n}\r\n\r\n/**\r\n * Read the xliffmerge configuration form the builder options.\r\n * @param tree Tree\r\n * @param projectName name of project\r\n */\r\nexport function readXliffmergeConfigFromWorkspace(tree: UnitTestTree, projectName: string): {xliffmergeOptions: IXliffMergeOptions}|null {\r\n    const ws = new WorkspaceSnaphot(tree);\r\n    return ws.getActualXliffmergeConfigFromWorkspace(projectName);\r\n}\r\n"]}