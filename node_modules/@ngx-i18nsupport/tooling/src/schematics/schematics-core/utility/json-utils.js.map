{"version":3,"file":"json-utils.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/schematics-core/utility/json-utils.ts"],"names":[],"mappings":";;AAgBA,SAAgB,yBAAyB,CACvC,QAAwB,EACxB,IAAmB,EACnB,YAAoB,EACpB,KAAgB,EAChB,MAAc;IAEd,MAAM,SAAS,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IAEvC,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC9B,gBAAgB;QAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACzD,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;KACrF;IAED,QAAQ,CAAC,UAAU,CACjB,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,EACnB,IAAI;UACF,IAAI,YAAY,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;UAChF,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACzB,CAAC;AACJ,CAAC;AArBD,8DAqBC;AAED,SAAgB,gCAAgC,CAC9C,QAAwB,EACxB,IAAmB,EACnB,YAAoB,EACpB,KAAgB,EAChB,MAAc;IAGd,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,yBAAyB,CAAC,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAEvE,OAAO;KACR;IAED,uBAAuB;IACvB,IAAI,eAAe,GAA2B,IAAI,CAAC;IACnD,IAAI,IAAI,GAA2B,IAAI,CAAC;IACxC,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACzD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;QAClC,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,YAAY,EAAE;YACjC,IAAI,IAAI,EAAE;gBACR,eAAe,GAAG,IAAI,CAAC;aACxB;YACD,MAAM;SACP;QACD,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,UAAU,GAAG,IAAI,CAAC;YAClB,eAAe,GAAG,IAAI,CAAC;SACxB;QACD,IAAI,GAAG,IAAI,CAAC;KACb;IAED,IAAI,UAAU,EAAE;QACd,yBAAyB,CAAC,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAEvE,OAAO;KACR;IAED,MAAM,SAAS,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IAEvC,MAAM,WAAW,GAAG,eAAe,KAAK,IAAI;QAC1C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC;QACvB,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;IAEnC,QAAQ,CAAC,WAAW,CAClB,WAAW,EACX,SAAS;UACP,IAAI,YAAY,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;UAChF,GAAG,CACN,CAAC;AACJ,CAAC;AAnDD,4EAmDC;AAGD,SAAgB,qBAAqB,CACnC,QAAwB,EACxB,IAAkB,EAClB,KAAgB,EAChB,MAAM,GAAG,CAAC;IAEV,MAAM,SAAS,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;IAEvC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;QAC5B,gBAAgB;QAChB,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACrD,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;KACrF;IAED,QAAQ,CAAC,UAAU,CACjB,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,EACnB,IAAI;UACF,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC;UACxD,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CACzB,CAAC;AACJ,CAAC;AApBD,sDAoBC;AAGD,SAAgB,uBAAuB,CACrC,IAAmB,EACnB,YAAoB;IAEpB,IAAI,SAAS,GAAuB,IAAI,CAAC;IACzC,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;QACtC,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,IAAI,YAAY,EAAE;YACtC,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC;SAC5B;KACF;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAZD,0DAYC;AAED,SAAS,YAAY,CAAC,KAAa;IACjC,OAAO,IAAI,GAAG,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/C,CAAC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport {\r\n  JsonAstArray,\r\n  JsonAstKeyValue,\r\n  JsonAstNode,\r\n  JsonAstObject,\r\n  JsonValue,\r\n} from '@angular-devkit/core';\r\nimport { UpdateRecorder } from '@angular-devkit/schematics';\r\n\r\nexport function appendPropertyInAstObject(\r\n  recorder: UpdateRecorder,\r\n  node: JsonAstObject,\r\n  propertyName: string,\r\n  value: JsonValue,\r\n  indent: number,\r\n) {\r\n  const indentStr = _buildIndent(indent);\r\n\r\n  if (node.properties.length > 0) {\r\n    // Insert comma.\r\n    const last = node.properties[node.properties.length - 1];\r\n    recorder.insertRight(last.start.offset + last.text.replace(/\\s+$/, '').length, ',');\r\n  }\r\n\r\n  recorder.insertLeft(\r\n    node.end.offset - 1,\r\n    '  '\r\n    + `\"${propertyName}\": ${JSON.stringify(value, null, 2).replace(/\\n/g, indentStr)}`\r\n    + indentStr.slice(0, -2),\r\n  );\r\n}\r\n\r\nexport function insertPropertyInAstObjectInOrder(\r\n  recorder: UpdateRecorder,\r\n  node: JsonAstObject,\r\n  propertyName: string,\r\n  value: JsonValue,\r\n  indent: number,\r\n) {\r\n\r\n  if (node.properties.length === 0) {\r\n    appendPropertyInAstObject(recorder, node, propertyName, value, indent);\r\n\r\n    return;\r\n  }\r\n\r\n  // Find insertion info.\r\n  let insertAfterProp: JsonAstKeyValue | null = null;\r\n  let prev: JsonAstKeyValue | null = null;\r\n  let isLastProp = false;\r\n  const last = node.properties[node.properties.length - 1];\r\n  for (const prop of node.properties) {\r\n    if (prop.key.value > propertyName) {\r\n      if (prev) {\r\n        insertAfterProp = prev;\r\n      }\r\n      break;\r\n    }\r\n    if (prop === last) {\r\n      isLastProp = true;\r\n      insertAfterProp = last;\r\n    }\r\n    prev = prop;\r\n  }\r\n\r\n  if (isLastProp) {\r\n    appendPropertyInAstObject(recorder, node, propertyName, value, indent);\r\n\r\n    return;\r\n  }\r\n\r\n  const indentStr = _buildIndent(indent);\r\n\r\n  const insertIndex = insertAfterProp === null\r\n    ? node.start.offset + 1\r\n    : insertAfterProp.end.offset + 1;\r\n\r\n  recorder.insertRight(\r\n    insertIndex,\r\n    indentStr\r\n    + `\"${propertyName}\": ${JSON.stringify(value, null, 2).replace(/\\n/g, indentStr)}`\r\n    + ',',\r\n  );\r\n}\r\n\r\n\r\nexport function appendValueInAstArray(\r\n  recorder: UpdateRecorder,\r\n  node: JsonAstArray,\r\n  value: JsonValue,\r\n  indent = 4,\r\n) {\r\n  const indentStr = _buildIndent(indent);\r\n\r\n  if (node.elements.length > 0) {\r\n    // Insert comma.\r\n    const last = node.elements[node.elements.length - 1];\r\n    recorder.insertRight(last.start.offset + last.text.replace(/\\s+$/, '').length, ',');\r\n  }\r\n\r\n  recorder.insertLeft(\r\n    node.end.offset - 1,\r\n    '  '\r\n    + JSON.stringify(value, null, 2).replace(/\\n/g, indentStr)\r\n    + indentStr.slice(0, -2),\r\n  );\r\n}\r\n\r\n\r\nexport function findPropertyInAstObject(\r\n  node: JsonAstObject,\r\n  propertyName: string,\r\n): JsonAstNode | null {\r\n  let maybeNode: JsonAstNode | null = null;\r\n  for (const property of node.properties) {\r\n    if (property.key.value == propertyName) {\r\n      maybeNode = property.value;\r\n    }\r\n  }\r\n\r\n  return maybeNode;\r\n}\r\n\r\nfunction _buildIndent(count: number): string {\r\n  return '\\n' + new Array(count + 1).join(' ');\r\n}\r\n"]}