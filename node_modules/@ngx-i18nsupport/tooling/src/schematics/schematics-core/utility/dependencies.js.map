{"version":3,"file":"dependencies.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/schematics-core/utility/dependencies.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { JsonAstObject, JsonParseMode, parseJsonAst } from '@angular-devkit/core';\r\nimport { SchematicsException, Tree } from '@angular-devkit/schematics';\r\nimport {\r\n  appendPropertyInAstObject,\r\n  findPropertyInAstObject,\r\n  insertPropertyInAstObjectInOrder,\r\n } from './json-utils';\r\n\r\n\r\nconst pkgJsonPath = '/package.json';\r\nexport enum NodeDependencyType {\r\n  Default = 'dependencies',\r\n  Dev = 'devDependencies',\r\n  Peer = 'peerDependencies',\r\n  Optional = 'optionalDependencies',\r\n}\r\n\r\nexport interface NodeDependency {\r\n  type: NodeDependencyType;\r\n  name: string;\r\n  version: string;\r\n  overwrite?: boolean;\r\n}\r\n\r\nexport function addPackageJsonDependency(tree: Tree, dependency: NodeDependency): void {\r\n  const packageJsonAst = _readPackageJson(tree);\r\n  const depsNode = findPropertyInAstObject(packageJsonAst, dependency.type);\r\n  const recorder = tree.beginUpdate(pkgJsonPath);\r\n  if (!depsNode) {\r\n    // Haven't found the dependencies key, add it to the root of the package.json.\r\n    appendPropertyInAstObject(recorder, packageJsonAst, dependency.type, {\r\n      [dependency.name]: dependency.version,\r\n    }, 2);\r\n  } else if (depsNode.kind === 'object') {\r\n    // check if package already added\r\n    const depNode = findPropertyInAstObject(depsNode, dependency.name);\r\n\r\n    if (!depNode) {\r\n      // Package not found, add it.\r\n      insertPropertyInAstObjectInOrder(\r\n        recorder,\r\n        depsNode,\r\n        dependency.name,\r\n        dependency.version,\r\n        4,\r\n      );\r\n    } else if (dependency.overwrite) {\r\n      // Package found, update version if overwrite.\r\n      const { end, start } = depNode;\r\n      recorder.remove(start.offset, end.offset - start.offset);\r\n      recorder.insertRight(start.offset, JSON.stringify(dependency.version));\r\n    }\r\n  }\r\n\r\n  tree.commitUpdate(recorder);\r\n}\r\n\r\nexport function getPackageJsonDependency(tree: Tree, name: string): NodeDependency | null {\r\n  const packageJson = _readPackageJson(tree);\r\n  let dep: NodeDependency | null = null;\r\n  [\r\n    NodeDependencyType.Default,\r\n    NodeDependencyType.Dev,\r\n    NodeDependencyType.Optional,\r\n    NodeDependencyType.Peer,\r\n  ].forEach(depType => {\r\n    if (dep !== null) {\r\n      return;\r\n    }\r\n    const depsNode = findPropertyInAstObject(packageJson, depType);\r\n    if (depsNode !== null && depsNode.kind === 'object') {\r\n      const depNode = findPropertyInAstObject(depsNode, name);\r\n      if (depNode !== null && depNode.kind === 'string') {\r\n        const version = depNode.value;\r\n        dep = {\r\n          type: depType,\r\n          name: name,\r\n          version: version,\r\n        };\r\n      }\r\n    }\r\n  });\r\n\r\n  return dep;\r\n}\r\n\r\nfunction _readPackageJson(tree: Tree): JsonAstObject {\r\n  const buffer = tree.read(pkgJsonPath);\r\n  if (buffer === null) {\r\n    throw new SchematicsException('Could not read package.json.');\r\n  }\r\n  const content = buffer.toString();\r\n\r\n  const packageJson = parseJsonAst(content, JsonParseMode.Strict);\r\n  if (packageJson.kind !== 'object') {\r\n    throw new SchematicsException('Invalid package.json. Was expecting an object');\r\n  }\r\n\r\n  return packageJson;\r\n}\r\n"]}