{"version":3,"file":"workspace-models.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/schematics-core/utility/workspace-models.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAIH,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,0CAA2B,CAAA;IAC3B,kCAAmB,CAAA;AACvB,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB;AAED,IAAY,QAUX;AAVD,WAAY,QAAQ;IAChB,gEAAoD,CAAA;IACpD,2DAA+C,CAAA;IAC/C,6DAAiD,CAAA;IACjD,yDAA6C,CAAA;IAC7C,2DAA+C,CAAA;IAC/C,gEAAoD,CAAA;IACpD,kEAAsD,CAAA;IACtD,sEAA0D,CAAA;IAC1D,mEAAuD,CAAA;AAC3D,CAAC,EAVW,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAUnB","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport { experimental } from '@angular-devkit/core';\r\n\r\nexport enum ProjectType {\r\n    Application = 'application',\r\n    Library = 'library',\r\n}\r\n\r\nexport enum Builders {\r\n    AppShell = '@angular-devkit/build-angular:app-shell',\r\n    Server = '@angular-devkit/build-angular:server',\r\n    Browser = '@angular-devkit/build-angular:browser',\r\n    Karma = '@angular-devkit/build-angular:karma',\r\n    TsLint = '@angular-devkit/build-angular:tslint',\r\n    NgPackagr = '@angular-devkit/build-ng-packagr:build',\r\n    DevServer = '@angular-devkit/build-angular:dev-server',\r\n    ExtractI18n = '@angular-devkit/build-angular:extract-i18n',\r\n    Protractor = '@angular-devkit/build-angular:protractor',\r\n}\r\n\r\nexport interface FileReplacements {\r\n    replace: string;\r\n    with: string;\r\n}\r\n\r\nexport interface BrowserBuilderBaseOptions {\r\n    main: string;\r\n    tsConfig: string;\r\n    fileReplacements?: FileReplacements[];\r\n    outputPath?: string;\r\n    index?: string;\r\n    polyfills: string;\r\n    assets?: object[];\r\n    styles?: string[];\r\n    scripts?: string[];\r\n    sourceMap?: boolean;\r\n}\r\n\r\nexport interface BrowserBuilderOptions extends BrowserBuilderBaseOptions {\r\n    serviceWorker?: boolean;\r\n    optimization?: boolean;\r\n    outputHashing?: 'all';\r\n    resourcesOutputPath?: string;\r\n    extractCss?: boolean;\r\n    namedChunks?: boolean;\r\n    aot?: boolean;\r\n    extractLicenses?: boolean;\r\n    vendorChunk?: boolean;\r\n    buildOptimizer?: boolean;\r\n    ngswConfigPath?: string;\r\n    budgets?: {\r\n        type: string;\r\n        maximumWarning?: string;\r\n        maximumError?: string;\r\n    }[];\r\n}\r\n\r\nexport interface ServeBuilderOptions {\r\n    browserTarget: string;\r\n}\r\nexport interface LibraryBuilderOptions {\r\n    tsConfig: string;\r\n    project: string;\r\n}\r\n\r\nexport interface ServerBuilderOptions {\r\n    outputPath: string;\r\n    tsConfig: string;\r\n    main: string;\r\n    fileReplacements?: FileReplacements[];\r\n    optimization?: {\r\n        scripts?: boolean;\r\n        styles?: boolean;\r\n    };\r\n    sourceMap?: boolean;\r\n}\r\n\r\nexport interface AppShellBuilderOptions {\r\n    browserTarget: string;\r\n    serverTarget: string;\r\n    route: string;\r\n}\r\n\r\nexport interface TestBuilderOptions extends Partial<BrowserBuilderBaseOptions> {\r\n    karmaConfig: string;\r\n}\r\n\r\nexport interface LintBuilderOptions {\r\n    tsConfig: string[] | string;\r\n    exclude?: string[];\r\n}\r\n\r\nexport interface ExtractI18nOptions {\r\n    browserTarget: string;\r\n}\r\n\r\nexport interface E2EOptions {\r\n    protractorConfig: string;\r\n    devServerTarget: string;\r\n}\r\n\r\nexport interface BuilderTarget<TBuilder extends Builders, TOptions> {\r\n    builder: TBuilder;\r\n    options: TOptions;\r\n    configurations?: {\r\n        production: Partial<TOptions>;\r\n        [key: string]: Partial<TOptions>;\r\n    };\r\n}\r\n\r\nexport type LibraryBuilderTarget = BuilderTarget<Builders.NgPackagr, LibraryBuilderOptions>;\r\nexport type BrowserBuilderTarget = BuilderTarget<Builders.Browser, BrowserBuilderOptions>;\r\nexport type ServerBuilderTarget = BuilderTarget<Builders.Server, ServerBuilderOptions>;\r\nexport type AppShellBuilderTarget = BuilderTarget<Builders.AppShell, AppShellBuilderOptions>;\r\nexport type LintBuilderTarget = BuilderTarget<Builders.TsLint, LintBuilderOptions>;\r\nexport type TestBuilderTarget = BuilderTarget<Builders.Karma, TestBuilderOptions>;\r\nexport type ServeBuilderTarget = BuilderTarget<Builders.DevServer, ServeBuilderOptions>;\r\nexport type ExtractI18nBuilderTarget = BuilderTarget<Builders.ExtractI18n, ExtractI18nOptions>;\r\nexport type E2EBuilderTarget = BuilderTarget<Builders.Protractor, E2EOptions>;\r\n\r\nexport interface WorkspaceSchema extends experimental.workspace.WorkspaceSchema {\r\n    projects: {\r\n        [key: string]: WorkspaceProject<ProjectType.Application | ProjectType.Library>;\r\n    };\r\n}\r\n\r\nexport interface WorkspaceProject<TProjectType extends ProjectType = ProjectType.Application>\r\n    extends experimental.workspace.WorkspaceProject {\r\n    /**\r\n    * Project type.\r\n    */\r\n    projectType: ProjectType;\r\n\r\n    /**\r\n     * Tool options.\r\n     */\r\n    architect?: WorkspaceTargets<TProjectType>;\r\n    /**\r\n     * Tool options.\r\n     */\r\n    targets?: WorkspaceTargets<TProjectType>;\r\n}\r\n\r\nexport interface WorkspaceTargets<TProjectType extends ProjectType = ProjectType.Application> {\r\n    build?: TProjectType extends ProjectType.Library ? LibraryBuilderTarget : BrowserBuilderTarget;\r\n    server?: ServerBuilderTarget;\r\n    lint?: LintBuilderTarget;\r\n    test?: TestBuilderTarget;\r\n    serve?: ServeBuilderTarget;\r\n    e2e?: E2EBuilderTarget;\r\n    'app-shell'?: AppShellBuilderTarget;\r\n    'extract-i18n'?: ExtractI18nBuilderTarget;\r\n    // TODO(hans): change this any to unknown when google3 supports TypeScript 3.0.\r\n    // tslint:disable-next-line:no-any\r\n    [key: string]: any;\r\n}\r\n"]}