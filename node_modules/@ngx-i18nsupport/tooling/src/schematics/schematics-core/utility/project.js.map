{"version":3,"file":"project.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/schematics-core/utility/project.ts"],"names":[],"mappings":";;AAQA,8CAAiD;AACjD,kEAA6F;AAG7F;;;GAGG;AACH,SAAgB,gBAAgB,CAAC,OAAyB;IACxD,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU;QAC7B,CAAC,CAAC,IAAI,OAAO,CAAC,UAAU,GAAG;QAC3B,CAAC,CAAC,IAAI,OAAO,CAAC,IAAI,OAAO,CAAC;IAE5B,MAAM,cAAc,GAAG,OAAO,CAAC,WAAW,KAAK,8BAAW,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;IAEvF,OAAO,GAAG,IAAI,GAAG,cAAc,EAAE,CAAC;AACpC,CAAC;AARD,4CAQC;AAED,SAAgB,UAAU,CACxB,eAAuC,EACvC,WAAmB;IAEnB,MAAM,SAAS,GAAG,iBAAiB,CAAC,eAAe,CAAC;QAClD,CAAC,CAAC,eAAe;QACjB,CAAC,CAAC,qBAAY,CAAC,eAAe,CAAC,CAAC;IAElC,OAAO,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAmC,CAAC;AAC3E,CAAC;AATD,gCASC;AAED,+EAA+E;AAC/E,kCAAkC;AAClC,SAAgB,iBAAiB,CAAC,SAAc;IAC9C,OAAO,CAAC,CAAC,CAAC,SAAS,IAAK,SAA6B,CAAC,QAAQ,CAAC,CAAC;AAClE,CAAC;AAFD,8CAEC;AAED,+EAA+E;AAC/E,kCAAkC;AAClC,SAAgB,kBAAkB,CAAC,OAAY;IAC7C,OAAO,CAAC,CAAC,CAAC,OAAO,IAAK,OAA4B,CAAC,WAAW,CAAC,CAAC;AAClE,CAAC;AAFD,gDAEC","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Tree } from '@angular-devkit/schematics';\r\nimport { getWorkspace } from '../utility/config';\r\nimport { ProjectType, WorkspaceProject, WorkspaceSchema } from '../utility/workspace-models';\r\n\r\n\r\n/**\r\n * Build a default project path for generating.\r\n * @param project The project to build the path for.\r\n */\r\nexport function buildDefaultPath(project: WorkspaceProject): string {\r\n  const root = project.sourceRoot\r\n    ? `/${project.sourceRoot}/`\r\n    : `/${project.root}/src/`;\r\n\r\n  const projectDirName = project.projectType === ProjectType.Application ? 'app' : 'lib';\r\n\r\n  return `${root}${projectDirName}`;\r\n}\r\n\r\nexport function getProject<TProjectType extends ProjectType = ProjectType.Application>(\r\n  workspaceOrHost: WorkspaceSchema | Tree,\r\n  projectName: string,\r\n): WorkspaceProject<TProjectType> {\r\n  const workspace = isWorkspaceSchema(workspaceOrHost)\r\n    ? workspaceOrHost\r\n    : getWorkspace(workspaceOrHost);\r\n\r\n  return workspace.projects[projectName] as WorkspaceProject<TProjectType>;\r\n}\r\n\r\n// TODO(hans): change this any to unknown when google3 supports TypeScript 3.0.\r\n// tslint:disable-next-line:no-any\r\nexport function isWorkspaceSchema(workspace: any): workspace is WorkspaceSchema {\r\n  return !!(workspace && (workspace as WorkspaceSchema).projects);\r\n}\r\n\r\n// TODO(hans): change this any to unknown when google3 supports TypeScript 3.0.\r\n// tslint:disable-next-line:no-any\r\nexport function isWorkspaceProject(project: any): project is WorkspaceProject {\r\n  return !!(project && (project as WorkspaceProject).projectType);\r\n}\r\n"]}