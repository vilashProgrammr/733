{"version":3,"file":"config.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/schematics-core/utility/config.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { JsonParseMode, parseJson } from '@angular-devkit/core';\r\nimport { Rule, SchematicContext, SchematicsException, Tree } from '@angular-devkit/schematics';\r\nimport { ProjectType, WorkspaceProject, WorkspaceSchema } from './workspace-models';\r\n\r\n// The interfaces below are generated from the Angular CLI configuration schema\r\n// https://github.com/angular/angular-cli/blob/master/packages/@angular/cli/lib/config/schema.json\r\nexport interface AppConfig {\r\n  /**\r\n   * Name of the app.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Directory where app files are placed.\r\n   */\r\n  appRoot?: string;\r\n  /**\r\n   * The root directory of the app.\r\n   */\r\n  root?: string;\r\n  /**\r\n   * The output directory for build results.\r\n   */\r\n  outDir?: string;\r\n  /**\r\n   * List of application assets.\r\n   */\r\n  assets?: (string | {\r\n      /**\r\n       * The pattern to match.\r\n       */\r\n      glob?: string;\r\n      /**\r\n       * The dir to search within.\r\n       */\r\n      input?: string;\r\n      /**\r\n       * The output path (relative to the outDir).\r\n       */\r\n      output?: string;\r\n  })[];\r\n  /**\r\n   * URL where files will be deployed.\r\n   */\r\n  deployUrl?: string;\r\n  /**\r\n   * Base url for the application being built.\r\n   */\r\n  baseHref?: string;\r\n  /**\r\n   * The runtime platform of the app.\r\n   */\r\n  platform?: ('browser' | 'server');\r\n  /**\r\n   * The name of the start HTML file.\r\n   */\r\n  index?: string;\r\n  /**\r\n   * The name of the main entry-point file.\r\n   */\r\n  main?: string;\r\n  /**\r\n   * The name of the polyfills file.\r\n   */\r\n  polyfills?: string;\r\n  /**\r\n   * The name of the test entry-point file.\r\n   */\r\n  test?: string;\r\n  /**\r\n   * The name of the TypeScript configuration file.\r\n   */\r\n  tsconfig?: string;\r\n  /**\r\n   * The name of the TypeScript configuration file for unit tests.\r\n   */\r\n  testTsconfig?: string;\r\n  /**\r\n   * The prefix to apply to generated selectors.\r\n   */\r\n  prefix?: string;\r\n  /**\r\n   * Experimental support for a service worker from @angular/service-worker.\r\n   */\r\n  serviceWorker?: boolean;\r\n  /**\r\n   * Global styles to be included in the build.\r\n   */\r\n  styles?: (string | {\r\n      input?: string;\r\n      [name: string]: any; // tslint:disable-line:no-any\r\n  })[];\r\n  /**\r\n   * Options to pass to style preprocessors\r\n   */\r\n  stylePreprocessorOptions?: {\r\n      /**\r\n       * Paths to include. Paths will be resolved to project root.\r\n       */\r\n      includePaths?: string[];\r\n  };\r\n  /**\r\n   * Global scripts to be included in the build.\r\n   */\r\n  scripts?: (string | {\r\n      input: string;\r\n      [name: string]: any; // tslint:disable-line:no-any\r\n  })[];\r\n  /**\r\n   * Source file for environment config.\r\n   */\r\n  environmentSource?: string;\r\n  /**\r\n   * Name and corresponding file for environment config.\r\n   */\r\n  environments?: {\r\n      [name: string]: any; // tslint:disable-line:no-any\r\n  };\r\n  appShell?: {\r\n    app: string;\r\n    route: string;\r\n  };\r\n  budgets?: {\r\n    /**\r\n     * The type of budget\r\n     */\r\n    type?: ('bundle' | 'initial' | 'allScript' | 'all' | 'anyScript' | 'any');\r\n    /**\r\n     * The name of the bundle\r\n     */\r\n    name?: string;\r\n    /**\r\n     * The baseline size for comparison.\r\n     */\r\n    baseline?: string;\r\n    /**\r\n     * The maximum threshold for warning relative to the baseline.\r\n     */\r\n    maximumWarning?: string;\r\n    /**\r\n     * The maximum threshold for error relative to the baseline.\r\n     */\r\n    maximumError?: string;\r\n    /**\r\n     * The minimum threshold for warning relative to the baseline.\r\n     */\r\n    minimumWarning?: string;\r\n    /**\r\n     * The minimum threshold for error relative to the baseline.\r\n     */\r\n    minimumError?: string;\r\n    /**\r\n     * The threshold for warning relative to the baseline (min & max).\r\n     */\r\n    warning?: string;\r\n    /**\r\n     * The threshold for error relative to the baseline (min & max).\r\n     */\r\n    error?: string;\r\n  }[];\r\n}\r\n\r\nexport interface CliConfig {\r\n  $schema?: string;\r\n  /**\r\n   * The global configuration of the project.\r\n   */\r\n  project?: {\r\n      /**\r\n       * The name of the project.\r\n       */\r\n      name?: string;\r\n      /**\r\n       * Whether or not this project was ejected.\r\n       */\r\n      ejected?: boolean;\r\n  };\r\n  /**\r\n   * Properties of the different applications in this project.\r\n   */\r\n  apps?: AppConfig[];\r\n  /**\r\n   * Configuration for end-to-end tests.\r\n   */\r\n  e2e?: {\r\n      protractor?: {\r\n          /**\r\n           * Path to the config file.\r\n           */\r\n          config?: string;\r\n      };\r\n  };\r\n  /**\r\n   * Properties to be passed to TSLint.\r\n   */\r\n  lint?: {\r\n      /**\r\n       * File glob(s) to lint.\r\n       */\r\n      files?: (string | string[]);\r\n      /**\r\n       * Location of the tsconfig.json project file.\r\n       * Will also use as files to lint if 'files' property not present.\r\n       */\r\n      project: string;\r\n      /**\r\n       * Location of the tslint.json configuration.\r\n       */\r\n      tslintConfig?: string;\r\n      /**\r\n       * File glob(s) to ignore.\r\n       */\r\n      exclude?: (string | string[]);\r\n  }[];\r\n  /**\r\n   * Configuration for unit tests.\r\n   */\r\n  test?: {\r\n      karma?: {\r\n          /**\r\n           * Path to the karma config file.\r\n           */\r\n          config?: string;\r\n      };\r\n      codeCoverage?: {\r\n          /**\r\n           * Globs to exclude from code coverage.\r\n           */\r\n          exclude?: string[];\r\n      };\r\n  };\r\n  /**\r\n   * Specify the default values for generating.\r\n   */\r\n  defaults?: {\r\n      /**\r\n       * The file extension to be used for style files.\r\n       */\r\n      styleExt?: string;\r\n      /**\r\n       * How often to check for file updates.\r\n       */\r\n      poll?: number;\r\n      /**\r\n       * Use lint to fix files after generation\r\n       */\r\n      lintFix?: boolean;\r\n      /**\r\n       * Options for generating a class.\r\n       */\r\n      class?: {\r\n          /**\r\n           * Specifies if a spec file is generated.\r\n           */\r\n          spec?: boolean;\r\n      };\r\n      /**\r\n       * Options for generating a component.\r\n       */\r\n      component?: {\r\n          /**\r\n           * Flag to indicate if a directory is created.\r\n           */\r\n          flat?: boolean;\r\n          /**\r\n           * Specifies if a spec file is generated.\r\n           */\r\n          spec?: boolean;\r\n          /**\r\n           * Specifies if the style will be in the ts file.\r\n           */\r\n          inlineStyle?: boolean;\r\n          /**\r\n           * Specifies if the template will be in the ts file.\r\n           */\r\n          inlineTemplate?: boolean;\r\n          /**\r\n           * Specifies the view encapsulation strategy.\r\n           */\r\n          viewEncapsulation?: ('Emulated' | 'Native' | 'None');\r\n          /**\r\n           * Specifies the change detection strategy.\r\n           */\r\n          changeDetection?: ('Default' | 'OnPush');\r\n      };\r\n      /**\r\n       * Options for generating a directive.\r\n       */\r\n      directive?: {\r\n          /**\r\n           * Flag to indicate if a directory is created.\r\n           */\r\n          flat?: boolean;\r\n          /**\r\n           * Specifies if a spec file is generated.\r\n           */\r\n          spec?: boolean;\r\n      };\r\n      /**\r\n       * Options for generating a guard.\r\n       */\r\n      guard?: {\r\n          /**\r\n           * Flag to indicate if a directory is created.\r\n           */\r\n          flat?: boolean;\r\n          /**\r\n           * Specifies if a spec file is generated.\r\n           */\r\n          spec?: boolean;\r\n      };\r\n      /**\r\n       * Options for generating an interface.\r\n       */\r\n      interface?: {\r\n          /**\r\n           * Prefix to apply to interface names. (i.e. I)\r\n           */\r\n          prefix?: string;\r\n      };\r\n      /**\r\n       * Options for generating a module.\r\n       */\r\n      module?: {\r\n          /**\r\n           * Flag to indicate if a directory is created.\r\n           */\r\n          flat?: boolean;\r\n          /**\r\n           * Specifies if a spec file is generated.\r\n           */\r\n          spec?: boolean;\r\n      };\r\n      /**\r\n       * Options for generating a pipe.\r\n       */\r\n      pipe?: {\r\n          /**\r\n           * Flag to indicate if a directory is created.\r\n           */\r\n          flat?: boolean;\r\n          /**\r\n           * Specifies if a spec file is generated.\r\n           */\r\n          spec?: boolean;\r\n      };\r\n      /**\r\n       * Options for generating a service.\r\n       */\r\n      service?: {\r\n          /**\r\n           * Flag to indicate if a directory is created.\r\n           */\r\n          flat?: boolean;\r\n          /**\r\n           * Specifies if a spec file is generated.\r\n           */\r\n          spec?: boolean;\r\n      };\r\n      /**\r\n       * Properties to be passed to the build command.\r\n       */\r\n      build?: {\r\n          /**\r\n           * Output sourcemaps.\r\n           */\r\n          sourcemaps?: boolean;\r\n          /**\r\n           * Base url for the application being built.\r\n           */\r\n          baseHref?: string;\r\n          /**\r\n           * The ssl key used by the server.\r\n           */\r\n          progress?: boolean;\r\n          /**\r\n           * Enable and define the file watching poll time period (milliseconds).\r\n           */\r\n          poll?: number;\r\n          /**\r\n           * Delete output path before build.\r\n           */\r\n          deleteOutputPath?: boolean;\r\n          /**\r\n           * Do not use the real path when resolving modules.\r\n           */\r\n          preserveSymlinks?: boolean;\r\n          /**\r\n           * Show circular dependency warnings on builds.\r\n           */\r\n          showCircularDependencies?: boolean;\r\n          /**\r\n           * Use a separate bundle containing code used across multiple bundles.\r\n           */\r\n          commonChunk?: boolean;\r\n          /**\r\n           * Use file name for lazy loaded chunks.\r\n           */\r\n          namedChunks?: boolean;\r\n      };\r\n      /**\r\n       * Properties to be passed to the serve command.\r\n       */\r\n      serve?: {\r\n          /**\r\n           * The port the application will be served on.\r\n           */\r\n          port?: number;\r\n          /**\r\n           * The host the application will be served on.\r\n           */\r\n          host?: string;\r\n          /**\r\n           * Enables ssl for the application.\r\n           */\r\n          ssl?: boolean;\r\n          /**\r\n           * The ssl key used by the server.\r\n           */\r\n          sslKey?: string;\r\n          /**\r\n           * The ssl certificate used by the server.\r\n           */\r\n          sslCert?: string;\r\n          /**\r\n           * Proxy configuration file.\r\n           */\r\n          proxyConfig?: string;\r\n      };\r\n      /**\r\n       * Properties about schematics.\r\n       */\r\n      schematics?: {\r\n          /**\r\n           * The schematics collection to use.\r\n           */\r\n          collection?: string;\r\n          /**\r\n           * The new app schematic.\r\n           */\r\n          newApp?: string;\r\n      };\r\n  };\r\n  /**\r\n   * Specify which package manager tool to use.\r\n   */\r\n  packageManager?: ('npm' | 'cnpm' | 'yarn' | 'default');\r\n  /**\r\n   * Allow people to disable console warnings.\r\n   */\r\n  warnings?: {\r\n      /**\r\n       * Show a warning when the user enabled the --hmr option.\r\n       */\r\n      hmrWarning?: boolean;\r\n      /**\r\n       * Show a warning when the node version is incompatible.\r\n       */\r\n      nodeDeprecation?: boolean;\r\n      /**\r\n       * Show a warning when the user installed angular-cli.\r\n       */\r\n      packageDeprecation?: boolean;\r\n      /**\r\n       * Show a warning when the global version is newer than the local one.\r\n       */\r\n      versionMismatch?: boolean;\r\n      /**\r\n       * Show a warning when the TypeScript version is incompatible\r\n       */\r\n      typescriptMismatch?: boolean;\r\n  };\r\n}\r\n\r\nexport function getWorkspacePath(host: Tree): string {\r\n  const possibleFiles = [ '/angular.json', '/.angular.json' ];\r\n  const wsPath = possibleFiles.filter(path => host.exists(path))[0];\r\n\r\n  return wsPath;\r\n}\r\n\r\nexport function getWorkspace(host: Tree): WorkspaceSchema {\r\n  const path = getWorkspacePath(host);\r\n  const configBuffer = host.read(path);\r\n  if (configBuffer === null) {\r\n    throw new SchematicsException(`Could not find (${path})`);\r\n  }\r\n  const content = configBuffer.toString();\r\n\r\n  return parseJson(content, JsonParseMode.Loose) as {} as WorkspaceSchema;\r\n}\r\n\r\nexport function addProjectToWorkspace<TProjectType extends ProjectType = ProjectType.Application>(\r\n  workspace: WorkspaceSchema,\r\n  name: string,\r\n  project: WorkspaceProject<TProjectType>,\r\n): Rule {\r\n  return (_host: Tree, _context: SchematicContext) => {\r\n\r\n    if (workspace.projects[name]) {\r\n      throw new Error(`Project '${name}' already exists in workspace.`);\r\n    }\r\n\r\n    // Add project to workspace.\r\n    workspace.projects[name] = project;\r\n\r\n    if (!workspace.defaultProject && Object.keys(workspace.projects).length === 1) {\r\n      // Make the new project the default one.\r\n      workspace.defaultProject = name;\r\n    }\r\n\r\n    return updateWorkspace(workspace);\r\n  };\r\n}\r\n\r\nexport function updateWorkspace(workspace: WorkspaceSchema): Rule {\r\n    return (host: Tree, _context: SchematicContext) => {\r\n        host.overwrite(getWorkspacePath(host), JSON.stringify(workspace, null, 2));\r\n    };\r\n}\r\n\r\nexport const configPath = '/.angular-cli.json';\r\n\r\nexport function getConfig(host: Tree): CliConfig {\r\n  const configBuffer = host.read(configPath);\r\n  if (configBuffer === null) {\r\n    throw new SchematicsException('Could not find .angular-cli.json');\r\n  }\r\n\r\n  const config = parseJson(configBuffer.toString(), JsonParseMode.Loose) as {} as CliConfig;\r\n\r\n  return config;\r\n}\r\n\r\nexport function getAppFromConfig(config: CliConfig, appIndexOrName: string): AppConfig | null {\r\n  if (!config.apps) {\r\n    return null;\r\n  }\r\n\r\n  if (parseInt(appIndexOrName, 10) >= 0) {\r\n    return config.apps[parseInt(appIndexOrName, 10)];\r\n  }\r\n\r\n  return config.apps.filter((app) => app.name === appIndexOrName)[0];\r\n}\r\n"]}