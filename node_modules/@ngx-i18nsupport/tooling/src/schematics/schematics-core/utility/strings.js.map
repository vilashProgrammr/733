{"version":3,"file":"strings.js","sourceRoot":"","sources":["../../../../../../projects/tooling/src/schematics/schematics-core/utility/strings.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst STRING_DASHERIZE_REGEXP = (/[ _]/g);\r\nconst STRING_DECAMELIZE_REGEXP = (/([a-z\\d])([A-Z])/g);\r\nconst STRING_CAMELIZE_REGEXP = (/(-|_|\\.|\\s)+(.)?/g);\r\nconst STRING_UNDERSCORE_REGEXP_1 = (/([a-z\\d])([A-Z]+)/g);\r\nconst STRING_UNDERSCORE_REGEXP_2 = (/-|\\s+/g);\r\n\r\n/**\r\n * Converts a camelized string into all lower case separated by underscores.\r\n *\r\n ```javascript\r\n decamelize('innerHTML');         // 'inner_html'\r\n decamelize('action_name');       // 'action_name'\r\n decamelize('css-class-name');    // 'css-class-name'\r\n decamelize('my favorite items'); // 'my favorite items'\r\n ```\r\n\r\n @method decamelize\r\n @param {String} str The string to decamelize.\r\n @return {String} the decamelized string.\r\n */\r\nexport function decamelize(str: string): string {\r\n    return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();\r\n}\r\n\r\n/**\r\n Replaces underscores, spaces, or camelCase with dashes.\r\n\r\n ```javascript\r\n dasherize('innerHTML');         // 'inner-html'\r\n dasherize('action_name');       // 'action-name'\r\n dasherize('css-class-name');    // 'css-class-name'\r\n dasherize('my favorite items'); // 'my-favorite-items'\r\n ```\r\n\r\n @method dasherize\r\n @param {String} str The string to dasherize.\r\n @return {String} the dasherized string.\r\n */\r\nexport function dasherize(str: string): string {\r\n    return decamelize(str).replace(STRING_DASHERIZE_REGEXP, '-');\r\n}\r\n\r\n/**\r\n Returns the lowerCamelCase form of a string.\r\n\r\n ```javascript\r\n camelize('innerHTML');          // 'innerHTML'\r\n camelize('action_name');        // 'actionName'\r\n camelize('css-class-name');     // 'cssClassName'\r\n camelize('my favorite items');  // 'myFavoriteItems'\r\n camelize('My Favorite Items');  // 'myFavoriteItems'\r\n ```\r\n\r\n @method camelize\r\n @param {String} str The string to camelize.\r\n @return {String} the camelized string.\r\n */\r\nexport function camelize(str: string): string {\r\n    return str\r\n        .replace(STRING_CAMELIZE_REGEXP, (_match: string, _separator: string, chr: string) => {\r\n            return chr ? chr.toUpperCase() : '';\r\n        })\r\n        .replace(/^([A-Z])/, (match: string) => match.toLowerCase());\r\n}\r\n\r\n/**\r\n Returns the UpperCamelCase form of a string.\r\n\r\n ```javascript\r\n 'innerHTML'.classify();          // 'InnerHTML'\r\n 'action_name'.classify();        // 'ActionName'\r\n 'css-class-name'.classify();     // 'CssClassName'\r\n 'my favorite items'.classify();  // 'MyFavoriteItems'\r\n ```\r\n\r\n @method classify\r\n @param {String} str the string to classify\r\n @return {String} the classified string\r\n */\r\nexport function classify(str: string): string {\r\n    return str.split('.').map(part => capitalize(camelize(part))).join('.');\r\n}\r\n\r\n/**\r\n More general than decamelize. Returns the lower\\_case\\_and\\_underscored\r\n form of a string.\r\n\r\n ```javascript\r\n 'innerHTML'.underscore();          // 'inner_html'\r\n 'action_name'.underscore();        // 'action_name'\r\n 'css-class-name'.underscore();     // 'css_class_name'\r\n 'my favorite items'.underscore();  // 'my_favorite_items'\r\n ```\r\n\r\n @method underscore\r\n @param {String} str The string to underscore.\r\n @return {String} the underscored string.\r\n */\r\nexport function underscore(str: string): string {\r\n    return str\r\n        .replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2')\r\n        .replace(STRING_UNDERSCORE_REGEXP_2, '_')\r\n        .toLowerCase();\r\n}\r\n\r\n/**\r\n Returns the Capitalized form of a string\r\n\r\n ```javascript\r\n 'innerHTML'.capitalize()         // 'InnerHTML'\r\n 'action_name'.capitalize()       // 'Action_name'\r\n 'css-class-name'.capitalize()    // 'Css-class-name'\r\n 'my favorite items'.capitalize() // 'My favorite items'\r\n ```\r\n\r\n @method capitalize\r\n @param {String} str The string to capitalize.\r\n @return {String} The capitalized string.\r\n */\r\nexport function capitalize(str: string): string {\r\n    return str.charAt(0).toUpperCase() + str.substr(1);\r\n}\r\n\r\n/**\r\n * Calculate the levenshtein distance of two strings.\r\n * See https://en.wikipedia.org/wiki/Levenshtein_distance.\r\n * Based off https://gist.github.com/andrei-m/982927 (for using the faster dynamic programming\r\n * version).\r\n *\r\n * @param a String a.\r\n * @param b String b.\r\n * @returns A number that represents the distance between the two strings. The greater the number\r\n *   the more distant the strings are from each others.\r\n */\r\nexport function levenshtein(a: string, b: string): number {\r\n    if (a.length == 0) {\r\n        return b.length;\r\n    }\r\n    if (b.length == 0) {\r\n        return a.length;\r\n    }\r\n\r\n    const matrix = [];\r\n\r\n    // increment along the first column of each row\r\n    for (let i = 0; i <= b.length; i++) {\r\n        matrix[i] = [i];\r\n    }\r\n\r\n    // increment each column in the first row\r\n    for (let j = 0; j <= a.length; j++) {\r\n        matrix[0][j] = j;\r\n    }\r\n\r\n    // Fill in the rest of the matrix\r\n    for (let i = 1; i <= b.length; i++) {\r\n        for (let j = 1; j <= a.length; j++) {\r\n            if (b.charAt(i - 1) == a.charAt(j - 1)) {\r\n                matrix[i][j] = matrix[i - 1][j - 1];\r\n            } else {\r\n                matrix[i][j] = Math.min(\r\n                    matrix[i - 1][j - 1] + 1, // substitution\r\n                    matrix[i][j - 1] + 1, // insertion\r\n                    matrix[i - 1][j] + 1, // deletion\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    return matrix[b.length][a.length];\r\n}\r\n"]}