{"version":3,"file":"ngx-translate-extractor.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/xliffmerge/ngx-translate-extractor.ts"],"names":[],"mappings":"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","sourcesContent":["import {ITranslationMessagesFile, ITransUnit, NORMALIZATION_FORMAT_NGXTRANSLATE} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\r\nimport {FileUtil} from '../common/file-util';\r\nimport {isNullOrUndefined} from '../common/util';\r\nimport {NgxTranslateExtractionPattern} from './ngx-translate-extraction-pattern';\r\n/**\r\n * Created by roobm on 15.03.2017.\r\n * A tool for extracting messages in ngx-translate format.\r\n * Generates a json-file to be used with ngx-translate.\r\n */\r\n\r\n/**\r\n * The interface used for translations in ngx-translate.\r\n * A hash that contains either the translation or another hash.\r\n */\r\ninterface NgxTranslations {\r\n    [id: string]: NgxTranslations | string;\r\n}\r\n\r\n/**\r\n * internal,\r\n * a message with id (a dot-separated string).\r\n */\r\ninterface NgxMessage {\r\n    id: string; // dot separated name, e.g. \"myapp.service1.message1\"\r\n    message: string; // the message, placeholder are in {{n}} syntax, e.g. \"a test with value: {{0}}\r\n}\r\n\r\nexport class NgxTranslateExtractor {\r\n\r\n    public static DefaultExtractionPattern = '@@|ngx-translate';\r\n    private extractionPattern: NgxTranslateExtractionPattern;\r\n\r\n    /**\r\n     * Check, wether extractionPattern has valid syntax.\r\n     * @param extractionPatternString extractionPatternString\r\n     * @return null, if pattern is ok, string describing the error, if it is not ok.\r\n     */\r\n    public static checkPattern(extractionPatternString: string): string {\r\n        try {\r\n          if (new NgxTranslateExtractionPattern(extractionPatternString)) {\r\n              return null;\r\n          }\r\n        } catch (error) {\r\n            return error.message;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static extract(messagesFile: ITranslationMessagesFile, extractionPattern: string, outputFile: string) {\r\n        new NgxTranslateExtractor(messagesFile, extractionPattern).extractTo(outputFile);\r\n    }\r\n\r\n    constructor(private messagesFile: ITranslationMessagesFile, extractionPatternString: string) {\r\n        this.extractionPattern = new NgxTranslateExtractionPattern(extractionPatternString);\r\n    }\r\n\r\n    /**\r\n     * Extact messages and write them to a file.\r\n     * @param outputFile outputFile\r\n     */\r\n    public extractTo(outputFile: string) {\r\n        const translations: NgxTranslations = this.toNgxTranslations(this.extract());\r\n        if (translations && Object.keys(translations).length > 0) {\r\n            FileUtil.replaceContent(outputFile, JSON.stringify(translations, null, 4), 'UTF-8');\r\n        } else {\r\n            if (FileUtil.exists(outputFile)) {\r\n                FileUtil.deleteFile(outputFile);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Extract messages and convert them to ngx translations.\r\n     *  @return the translation objects.\r\n     */\r\n    private extract(): NgxMessage[] {\r\n        const result: NgxMessage[] = [];\r\n        this.messagesFile.forEachTransUnit((tu: ITransUnit) => {\r\n            const ngxId = this.ngxTranslateIdFromTU(tu);\r\n            if (ngxId) {\r\n                const messagetext = tu.targetContentNormalized().asDisplayString(NORMALIZATION_FORMAT_NGXTRANSLATE);\r\n                result.push({id: ngxId, message: messagetext});\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Check, wether this tu should be extracted for ngx-translate usage, and return its id for ngx-translate.\r\n     * There are 2 possibilities:\r\n     * 1. description is set to \"ngx-translate\" and meaning contains the id.\r\n     * 2. id is explicitly set to a string.\r\n     * @param tu tu\r\n     * @return an ngx id or null, if this tu should not be extracted.\r\n     */\r\n    private ngxTranslateIdFromTU(tu: ITransUnit): string {\r\n        if (this.isExplicitlySetId(tu.id)) {\r\n            if (this.extractionPattern.isExplicitIdMatched(tu.id)) {\r\n                return tu.id;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        const description = tu.description();\r\n        if (description && this.extractionPattern.isDescriptionMatched(description)) {\r\n            return tu.meaning();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test, wether ID was explicitly set (via i18n=\"@myid).\r\n     * Just heuristic, an ID is explicitly, if it does not look like a generated one.\r\n     * @param id id\r\n     * @return wether ID was explicitly set (via i18n=\"@myid).\r\n     */\r\n    private isExplicitlySetId(id: string): boolean {\r\n        if (isNullOrUndefined(id)) {\r\n            return false;\r\n        }\r\n        // generated IDs are either decimal or sha1 hex\r\n        const reForGeneratedId = /^[0-9a-f]{11,}$/;\r\n        return !reForGeneratedId.test(id);\r\n    }\r\n\r\n    /**\r\n     * Convert list of relevant TUs to ngx translations object.\r\n     * @param msgList msgList\r\n     */\r\n    private toNgxTranslations(msgList: NgxMessage[]): NgxTranslations {\r\n        const translationObject: NgxTranslations = {};\r\n        msgList.forEach((msg: NgxMessage) => {\r\n            this.putInTranslationObject(translationObject, msg);\r\n        });\r\n        return translationObject;\r\n    }\r\n\r\n    /**\r\n     * Put a new messages into the translation data object.\r\n     * If you add, e.g. \"{id: 'myapp.example', message: 'test'}\",\r\n     * the translation object will then contain an object myapp that has property example:\r\n     * {myapp: {\r\n     *   example: 'test'\r\n     *   }}\r\n     * @param translationObject translationObject\r\n     * @param msg msg\r\n     */\r\n    private putInTranslationObject(translationObject: NgxTranslations, msg: NgxMessage) {\r\n        let firstPartOfId: string;\r\n        let restOfId: string;\r\n        const indexOfDot = msg.id.indexOf('.');\r\n        if (indexOfDot === 0 || indexOfDot === (msg.id.length - 1)) {\r\n            throw new Error('bad nxg-translate id \"' + msg.id + '\"');\r\n        }\r\n        if (indexOfDot < 0) {\r\n            firstPartOfId = msg.id;\r\n            restOfId = '';\r\n        } else {\r\n            firstPartOfId = msg.id.substring(0, indexOfDot);\r\n            restOfId = msg.id.substring(indexOfDot + 1);\r\n        }\r\n        let object = translationObject[firstPartOfId];\r\n        if (isNullOrUndefined(object)) {\r\n            if (restOfId === '') {\r\n                translationObject[firstPartOfId] = msg.message;\r\n                return;\r\n            }\r\n            object = {};\r\n            translationObject[firstPartOfId] = object;\r\n        } else {\r\n            if (restOfId === '') {\r\n                throw new Error('duplicate id praefix \"' + msg.id + '\"');\r\n            }\r\n        }\r\n        this.putInTranslationObject(<NgxTranslations> object, {id: restOfId, message: msg.message});\r\n    }\r\n}\r\n"]}