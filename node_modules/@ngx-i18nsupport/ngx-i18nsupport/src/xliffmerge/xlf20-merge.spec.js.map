{"version":3,"file":"xlf20-merge.spec.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/xliffmerge/xlf20-merge.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\r\nimport {XliffMerge} from './xliff-merge';\r\nimport {IConfigFile} from './i-xliff-merge-options';\r\nimport {CommandOutput} from '../common/command-output';\r\nimport {WriterToString} from '../common/writer-to-string';\r\nimport {FileUtil} from '../common/file-util';\r\nimport {ITranslationMessagesFile, ITransUnit, STATE_FINAL, STATE_NEW, STATE_TRANSLATED} from '@ngx-i18nsupport/ngx-i18nsupport-lib';\r\nimport {TranslationMessagesFileReader} from './translation-messages-file-reader';\r\nimport {getApiKey} from '../autotranslate/auto-translate-service.spec';\r\nimport {XmlReader} from './xml-reader';\r\n\r\n/**\r\n * Created by martin on 18.02.2017.\r\n * Testcases for XliffMerge Format XLIFF 2.0.\r\n */\r\n\r\ndescribe('XliffMerge XLIFF 2.0 format tests', () => {\r\n\r\n    /**\r\n     * Workdir, not in git.\r\n     * Cleaned up for every test.\r\n     * Tests, that work on files, copy everything they need into this directory.\r\n     */\r\n    const WORKDIR = 'test/work/';\r\n    const SRCDIR = 'test/testdata/i18n/';\r\n\r\n    const ENCODING = 'UTF-8';\r\n\r\n    /**\r\n     * Helper function to read XLIFF 2.0 from File\r\n     */\r\n    function readXliff2(path: string): ITranslationMessagesFile {\r\n        return TranslationMessagesFileReader.fromFile('xlf2', path, ENCODING);\r\n    }\r\n\r\n    describe('Merge process checks for format XLIFF 2.0', () => {\r\n        const MASTER1FILE = 'ngExtractedMaster1.xlf2';\r\n        const MASTER2FILE = 'ngExtractedMaster2.xlf2';\r\n        const MASTER1SRC = SRCDIR + MASTER1FILE;\r\n        const MASTER2SRC = SRCDIR + MASTER2FILE;\r\n        const MASTERFILE = 'messages.xlf2';\r\n        const MASTER = WORKDIR + MASTERFILE;\r\n\r\n        const ID_APP_RUNS = '4371668001355139802'; // an ID from ngExtractedMaster1.xlf\r\n        const ID_REMOVED_MYFIRST = '2047558209369508311'; // an ID that will be removed in master2\r\n        const ID_REMOVED_APPDESCRIPTION = '7499557905529977371'; // another removed ID\r\n        const ID_WITH_PLACEHOLDER = '9030312858648510700';\r\n        const ID_DESCRIPTION_CHANGE = 'DescriptionAndMeaning1';\r\n        const ID_DESCRIPTION_ADD = 'AddDescriptionAndMeaning';\r\n        const ID_DESCRIPTION_REMOVE = 'RemoveDescriptionAndMeaning';\r\n\r\n        beforeEach(() => {\r\n            if (!fs.existsSync(WORKDIR)) {\r\n                fs.mkdirSync(WORKDIR);\r\n            }\r\n            // cleanup workdir\r\n            FileUtil.deleteFolderContentRecursive(WORKDIR);\r\n        });\r\n\r\n        it('should fix source language, if the masters lang is not the default', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const master: ITranslationMessagesFile = readXliff2(MASTER);\r\n            expect(master.sourceLanguage()).toBe('en'); // master is german, but ng-18n extracts it as en\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('master says to have source-language=\"en\"');\r\n            expect(ws.writtenData()).toContain('changed master source-language=\"en\" to \"de\"');\r\n            const newmaster: ITranslationMessagesFile = readXliff2(MASTER);\r\n            expect(newmaster.sourceLanguage()).toBe('de'); // master is german\r\n            done();\r\n        });\r\n\r\n        it('should generate translated file for default language de from master', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    useSourceAsTarget: false\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const langFile: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            expect(langFile.sourceLanguage()).toBe('de');\r\n            expect(langFile.targetLanguage()).toBe('de');\r\n            langFile.forEachTransUnit((tu: ITransUnit) => {\r\n                expect(tu.targetContent()).toBe(tu.sourceContent());\r\n                expect(tu.targetState()).toBe('final');\r\n            });\r\n            done();\r\n        });\r\n\r\n        it('should generate translated file for all languages', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const langFileGerman: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            expect(langFileGerman.sourceLanguage()).toBe('de');\r\n            expect(langFileGerman.targetLanguage()).toBe('de');\r\n            langFileGerman.forEachTransUnit((tu: ITransUnit) => {\r\n                expect(tu.targetContent()).toBe(tu.sourceContent());\r\n                expect(tu.targetState()).toBe('final');\r\n            });\r\n            const langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            expect(langFileEnglish.sourceLanguage()).toBe('de');\r\n            expect(langFileEnglish.targetLanguage()).toBe('en');\r\n            langFileEnglish.forEachTransUnit((tu: ITransUnit) => {\r\n                expect(tu.targetContent()).toBe(tu.sourceContent());\r\n                expect(tu.targetState()).toBe('new');\r\n            });\r\n            done();\r\n        });\r\n\r\n        it('should generate translated file for all languages with empty targets for non default languages', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    useSourceAsTarget: false\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const langFileGerman: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            expect(langFileGerman.sourceLanguage()).toBe('de');\r\n            expect(langFileGerman.targetLanguage()).toBe('de');\r\n            langFileGerman.forEachTransUnit((tu: ITransUnit) => {\r\n                expect(tu.targetContent()).toBe(tu.sourceContent());\r\n                expect(tu.targetState()).toBe('final');\r\n            });\r\n            const langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            expect(langFileEnglish.sourceLanguage()).toBe('de');\r\n            expect(langFileEnglish.targetLanguage()).toBe('en');\r\n            langFileEnglish.forEachTransUnit((tu: ITransUnit) => {\r\n                expect(tu.targetContent()).toBe('');\r\n                expect(tu.targetState()).toBe('new');\r\n            });\r\n            done();\r\n        });\r\n\r\n        it('should generate translated file for all languages with set praefix and suffix (#70)', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    targetPraefix: '%%',\r\n                    targetSuffix: '!!',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const langFileGerman: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            expect(langFileGerman.sourceLanguage()).toBe('de');\r\n            expect(langFileGerman.targetLanguage()).toBe('de');\r\n            langFileGerman.forEachTransUnit((tu: ITransUnit) => {\r\n                if (!tu.targetContent().startsWith('{VAR')) {\r\n                    expect(tu.targetContent()).toBe('%%' + tu.sourceContent() + '!!');\r\n                } else {\r\n                    expect(tu.targetContent()).toBe(tu.sourceContent());\r\n                }\r\n                expect(tu.targetState()).toBe('final');\r\n            });\r\n            const langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            expect(langFileEnglish.sourceLanguage()).toBe('de');\r\n            expect(langFileEnglish.targetLanguage()).toBe('en');\r\n            langFileEnglish.forEachTransUnit((tu: ITransUnit) => {\r\n                if (!tu.targetContent().startsWith('{VAR')) {\r\n                    expect(tu.targetContent()).toBe('%%' + tu.sourceContent() + '!!');\r\n                } else {\r\n                    expect(tu.targetContent()).toBe(tu.sourceContent());\r\n                }\r\n                expect(tu.targetState()).toBe('new');\r\n            });\r\n            done();\r\n        });\r\n\r\n        it('should generate translated file with native trans unit status \"initial\", testcase for issue #57', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    useSourceAsTarget: false\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const langFileGerman: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            langFileGerman.forEachTransUnit((tu: ITransUnit) => {\r\n                // need a cast to <any> to call nativeTargetState, which is not part of the official API\r\n                expect((<any>tu).nativeTargetState()).toBe('final');\r\n            });\r\n            const langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            langFileEnglish.forEachTransUnit((tu: ITransUnit) => {\r\n                // need a cast to <any> to call nativeTargetState, which is not part of the official API\r\n                expect((<any>tu).nativeTargetState()).toBe('initial'); // #56, state should be new, but in file we expect initial\r\n            });\r\n            done();\r\n        });\r\n\r\n        it('should merge translated file for all languages', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            let ws: WriterToString = new WriterToString();\r\n            let commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            let xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n\r\n            // now translate some texts in the English version\r\n            let langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_APP_RUNS);\r\n            expect(tu).toBeTruthy();\r\n            tu.translate('App runs');\r\n            TranslationMessagesFileReader.save(langFileEnglish);\r\n\r\n            // next step, use another master\r\n            FileUtil.copy(MASTER2SRC, MASTER);\r\n            ws = new WriterToString();\r\n            commandOut = new CommandOutput(ws);\r\n            xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('merged 1 trans-units from master to \"en\"');\r\n            expect(ws.writtenData()).toContain('removed 2 unused trans-units in \"en\"');\r\n            expect(ws.writtenData()).toContain('WARNING: transferred 1 source references');\r\n\r\n            // look, that the new file contains the old translation\r\n            langFileEnglish = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            expect(langFileEnglish.transUnitWithId(ID_APP_RUNS).targetContent()).toBe('App runs');\r\n\r\n            // look, that the removed IDs are really removed.\r\n            expect(langFileEnglish.transUnitWithId(ID_REMOVED_MYFIRST)).toBeFalsy();\r\n            expect(langFileEnglish.transUnitWithId(ID_REMOVED_APPDESCRIPTION)).toBeFalsy();\r\n            done();\r\n        });\r\n\r\n        it('should merge changed source content with explicit ID to default language file (#81)', (done) => {\r\n            const ID_SOURCE_CHANGE = 'sourcechanged';\r\n            const ID_SOURCE_CHANGE_STATE_FINAL = 'sourcechanged_state_final';\r\n            const TRANSLATED_FILE = 'WithSourceContentChange.de.xlf2';\r\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithSourceContentChange.xlf2', MASTER);\r\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.de.xlf');\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('WARNING: transferred 2 changed source content from master to \"de\"');\r\n\r\n            // check that source is changed\r\n            const langFileGerman: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            const tu: ITransUnit = langFileGerman.transUnitWithId(ID_SOURCE_CHANGE);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceContent()).toBe('Test Änderung Source (geändert!)');\r\n            expect(tu.targetContent()).toBe('Test Änderung Source (geändert!)');\r\n            expect(tu.targetState()).toBe(STATE_FINAL);\r\n            done();\r\n        });\r\n\r\n        it('should merge changed source content to already translated files', (done) => {\r\n            const ID_SOURCE_CHANGE = 'sourcechanged';\r\n            const ID_SOURCE_CHANGE_STATE_FINAL = 'sourcechanged_state_final';\r\n            const TRANSLATED_FILE = 'WithSourceContentChange.en.xlf2';\r\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithSourceContentChange.xlf2', MASTER);\r\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('WARNING: transferred 2 changed source content from master to \"en\"');\r\n\r\n            // check that source is changed\r\n            const langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_SOURCE_CHANGE);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.sourceContent()).toBe('Test Änderung Source (geändert!)');\r\n            expect(tu.targetState()).toBe(STATE_NEW);\r\n            const tuFinal: ITransUnit = langFileEnglish.transUnitWithId(ID_SOURCE_CHANGE_STATE_FINAL);\r\n            expect(tuFinal).toBeTruthy();\r\n            expect(tuFinal.sourceContent()).toBe('Test Änderung Source (state final, geändert!)');\r\n            expect(tuFinal.targetState()).toBe(STATE_TRANSLATED);\r\n            done();\r\n        });\r\n\r\n        it('should merge changed descriptions and meanings to already translated files', (done) => {\r\n            const TRANSLATED_FILE = 'WithDescriptions.en.xlf2';\r\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithDescriptions.xlf2', MASTER);\r\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('WARNING: transferred 3 changed descriptions/meanings from master to \"en\"');\r\n\r\n            // check that description and meaning are changed\r\n            const langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_DESCRIPTION_CHANGE);\r\n            expect(tu).toBeTruthy();\r\n            expect(tu.description()).toBe('changed description');\r\n            expect(tu.meaning()).toBe('changed meaning');\r\n            // added description\r\n            const tuAdded: ITransUnit = langFileEnglish.transUnitWithId(ID_DESCRIPTION_ADD);\r\n            expect(tuAdded).toBeTruthy();\r\n            expect(tuAdded.description()).toBe('added description');\r\n            expect(tuAdded.meaning()).toBe('added meaning');\r\n            // removed description\r\n            const tuRemoved: ITransUnit = langFileEnglish.transUnitWithId(ID_DESCRIPTION_REMOVE);\r\n            expect(tuRemoved).toBeTruthy();\r\n            expect(tuRemoved.description()).toBeNull();\r\n            expect(tuRemoved.meaning()).toBeNull();\r\n            done();\r\n        });\r\n\r\n        it('should preserve order when merging new units (#96)', (done) => {\r\n            FileUtil.copy(SRCDIR + 'preserveOrderMaster1.xlf2', MASTER);\r\n            let ws: WriterToString = new WriterToString();\r\n            let commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'en',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            let xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n\r\n            // next step, use new master that has added 3 units\r\n            FileUtil.copy(SRCDIR + 'preserveOrderMaster2.xlf2', MASTER);\r\n            ws = new WriterToString();\r\n            commandOut = new CommandOutput(ws);\r\n            xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('merged 3 trans-units from master to \"de\"');\r\n\r\n            // look, that the new file contains the new units at the correct position\r\n            const langFileGerman = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            const addedTu = langFileGerman.transUnitWithId('addedunit1');\r\n            expect(addedTu).toBeTruthy();\r\n            expect(addedTu.sourceContent()).toBe('added unit 1');\r\n            // check position\r\n            expect(langFileGerman.editedContent().replace(/(\\r\\n|\\n|\\r)/gm, ''))\r\n                .toMatch(/addedunit1.*firstunit.*addedunit2.*lastunit.*addedunit3/);\r\n            done();\r\n        });\r\n\r\n        it('should not preserve order when merging new units when disabled via config (#108)', (done) => {\r\n            FileUtil.copy(SRCDIR + 'preserveOrderMaster1.xlf2', MASTER);\r\n            let ws: WriterToString = new WriterToString();\r\n            let commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'en',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    preserveOrder: false\r\n                }\r\n            };\r\n            let xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n\r\n            // next step, use new master that has added 3 units\r\n            FileUtil.copy(SRCDIR + 'preserveOrderMaster2.xlf2', MASTER);\r\n            ws = new WriterToString();\r\n            commandOut = new CommandOutput(ws);\r\n            xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['en', 'de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('merged 3 trans-units from master to \"de\"');\r\n\r\n            // look, that the new file contains the new units at the correct position\r\n            const langFileGerman = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            const addedTu = langFileGerman.transUnitWithId('addedunit1');\r\n            expect(addedTu).toBeTruthy();\r\n            expect(addedTu.sourceContent()).toBe('added unit 1');\r\n            // check position, new units should be at end!\r\n            expect(langFileGerman.editedContent().replace(/(\\r\\n|\\n|\\r)/gm, ''))\r\n                .toMatch(/firstunit.*lastunit.*addedunit1.*addedunit2.*addedunit3/);\r\n            done();\r\n        });\r\n\r\n        it('should not remove trailing line break when merging', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const masterContent = FileUtil.read(MASTER, XmlReader.DEFAULT_ENCODING);\r\n            expect(masterContent.endsWith('\\n')).toBeTruthy('master file should end with EOL');\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const newContent = FileUtil.read(xliffMergeCmd.generatedI18nFile('de'), XmlReader.DEFAULT_ENCODING);\r\n            expect(newContent.endsWith('\\n')).toBeTruthy('file should end with EOL');\r\n            done();\r\n        });\r\n\r\n        it('allowIdChange feature should merge only white space changed content with changed ID' +\r\n            ' to already translated files (#65)', (done) => {\r\n            const ID_ORIGINAL = 'originalId';\r\n            const ID_CHANGED = 'changedId';\r\n            const TRANSLATED_FILE = 'WithIdChange.en.xlf2';\r\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithIdChange.xlf2', MASTER);\r\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    allowIdChange: true\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('WARNING: found 2 changed id\\'s in \"en\"');\r\n\r\n            // check that changed id is merged\r\n            const langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            const tuChanged: ITransUnit = langFileEnglish.transUnitWithId(ID_CHANGED);\r\n            expect(tuChanged).toBeTruthy();\r\n            expect(tuChanged.sourceContent().trim()).toBe('Test kleine Änderung, nur white spaces!');\r\n            expect(tuChanged.targetState()).toBe(STATE_TRANSLATED);\r\n            expect(tuChanged.targetContent()).toBe('Test for a small white space change');\r\n            const tuOriginal: ITransUnit = langFileEnglish.transUnitWithId(ID_ORIGINAL);\r\n            expect(tuOriginal).toBeFalsy();\r\n            done();\r\n        });\r\n\r\n        it('allowIdChange feature should merge untranslated only white space changed content with changed ID,' +\r\n            ' but should set preserve state \"new\" (#68)', (done) => {\r\n            const ID_ORIGINAL = 'originalIdUntranslated';\r\n            const ID_CHANGED = 'changedIdUntranslated';\r\n            const TRANSLATED_FILE = 'WithIdChange.en.xlf2';\r\n            FileUtil.copy(SRCDIR + 'ngExtractedMasterWithIdChange.xlf2', MASTER);\r\n            FileUtil.copy(SRCDIR + TRANSLATED_FILE, WORKDIR + 'messages.en.xlf');\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    allowIdChange: true\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en'], verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('WARNING: found 2 changed id\\'s in \"en\"');\r\n\r\n            // check that changed id is merged\r\n            const langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            const tuChanged: ITransUnit = langFileEnglish.transUnitWithId(ID_CHANGED);\r\n            expect(tuChanged).toBeTruthy();\r\n            expect(tuChanged.sourceContent().trim()).toBe('Unübersetzt');\r\n            expect(tuChanged.targetState()).toBe(STATE_NEW);\r\n            expect(tuChanged.targetContent()).toBe(''); // not translated\r\n            const tuOriginal: ITransUnit = langFileEnglish.transUnitWithId(ID_ORIGINAL);\r\n            expect(tuOriginal).toBeFalsy();\r\n            done();\r\n        });\r\n\r\n        it('should translate messages with placeholder', (done) => {\r\n            FileUtil.copy(MASTER2SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de', 'en']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n\r\n            // now translate some texts in the English version\r\n            let langFileEnglish: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            const tu: ITransUnit = langFileEnglish.transUnitWithId(ID_WITH_PLACEHOLDER);\r\n            expect(tu).toBeTruthy();\r\n            tu.translate('Item <ph id=\"0\" equiv=\"INTERPOLATION\" disp=\"{{number()}}\"/> of <ph id=\"1\" equiv=\"INTERPOLATION_1\" disp=\"{{total()}}\"/> added.');\r\n            TranslationMessagesFileReader.save(langFileEnglish);\r\n\r\n            // look, that the new file contains the translation\r\n            langFileEnglish = readXliff2(xliffMergeCmd.generatedI18nFile('en'));\r\n            expect(langFileEnglish.transUnitWithId(ID_WITH_PLACEHOLDER).targetContent())\r\n                .toBe('Item <ph id=\"0\" equiv=\"INTERPOLATION\" disp=\"{{number()}}\"/> of <ph id=\"1\" equiv=\"INTERPOLATION_1\" disp=\"{{total()}}\"/> added.');\r\n            expect(langFileEnglish.transUnitWithId(ID_WITH_PLACEHOLDER).targetContentNormalized().asDisplayString())\r\n                .toBe('Item {{0}} of {{1}} added.');\r\n\r\n            done();\r\n        });\r\n\r\n        it('should not output a warning when autotranslate is not enabled for a language (issue #49)', (done) => {\r\n            FileUtil.copy(MASTER2SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const apiKey = getApiKey();\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    languages: ['de', 'ru', 'en'],\r\n                    autotranslate: ['ru'],\r\n                    apikey: apiKey,\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run(() => {\r\n                if (apiKey) {\r\n                    expect(ws.writtenData()).not.toContain('ERROR');\r\n                    expect(ws.writtenData()).not.toContain('Auto translation from \"de\" to \"en\"');\r\n                    expect(ws.writtenData()).toContain('Auto translation from \"de\" to \"ru\"');\r\n                } else {\r\n                    expect(ws.writtenData()).toContain('ERROR: autotranslate requires an API key');\r\n                }\r\n\r\n                done();\r\n            });\r\n        });\r\n\r\n        it('should read xlf2 format file with expected extension xlf, not xlf2 (#124)', (done) => {\r\n            const masterWithXlfSuffix = WORKDIR + 'messages.xlf'; // expected suffix for XLIFF2 is also xlf\r\n            FileUtil.copy(MASTER1SRC, masterWithXlfSuffix);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            // do not use i18nfile option here, so that the default will be used\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    useSourceAsTarget: false\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const langFile: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            expect(langFile.sourceLanguage()).toBe('de');\r\n            expect(langFile.targetLanguage()).toBe('de');\r\n            done();\r\n        });\r\n\r\n    });\r\n\r\n    describe('ngx-translate processing for format XLIFF 2.0', () => {\r\n\r\n        const MASTER1FILE = 'ngxtranslate.xlf2';\r\n        const MASTER1SRC = SRCDIR + MASTER1FILE;\r\n        const MASTER_WITHOUT_NGX_TRANSLATE_STUFF = SRCDIR + 'ngExtractedMaster1.xlf2';\r\n        const MASTERFILE = 'messages.xlf2';\r\n        const MASTER = WORKDIR + MASTERFILE;\r\n\r\n        const ID_NODESC_NOMEANING = '2047558209369508311'; // an ID without set meaning and description\r\n        const ID_MONDAY = '6830980354990918030'; // an ID from ngxtranslate.xlf with meaning \"x.y\" and description \"ngx-translate\"\r\n\r\n        beforeEach(() => {\r\n            if (!fs.existsSync(WORKDIR)) {\r\n                fs.mkdirSync(WORKDIR);\r\n            }\r\n            // cleanup workdir\r\n            FileUtil.deleteFolderContentRecursive(WORKDIR);\r\n        });\r\n\r\n        it('should return null for unset description and meaning in master xlf2 file', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const master: ITranslationMessagesFile = readXliff2(MASTER);\r\n            expect(master.transUnitWithId(ID_NODESC_NOMEANING).description()).toBeFalsy();\r\n            expect(master.transUnitWithId(ID_NODESC_NOMEANING).meaning()).toBeFalsy();\r\n            done();\r\n        });\r\n\r\n        it('should find description and meaning in master xlf2 file', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const master: ITranslationMessagesFile = readXliff2(MASTER);\r\n            expect(master.transUnitWithId(ID_MONDAY).description()).toBe('ngx-translate');\r\n            expect(master.transUnitWithId(ID_MONDAY).meaning()).toBe('dateservice.monday');\r\n            done();\r\n        });\r\n\r\n        it('should find description and meaning in translated xlf2 file', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const langFile: ITranslationMessagesFile = readXliff2(xliffMergeCmd.generatedI18nFile('de'));\r\n            expect(langFile.transUnitWithId(ID_MONDAY).description()).toBe('ngx-translate');\r\n            expect(langFile.transUnitWithId(ID_MONDAY).meaning()).toBe('dateservice.monday');\r\n            done();\r\n        });\r\n\r\n        it('should write translation json file for ngx-translate', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    supportNgxTranslate: true\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\r\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\r\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\r\n            const translation: any = JSON.parse(fileContent);\r\n            expect(translation).toBeTruthy();\r\n            expect(translation.myapp).toBeTruthy();\r\n            expect(translation.dateservice.monday).toBe(\"Montag\");\r\n            expect(translation.dateservice.friday).toBe(\"Freitag\");\r\n            expect(translation.explicitlysetids.test1).toBe(\"Explizit gesetzte ID\");\r\n            done();\r\n        });\r\n\r\n        it('should handle placeholders in json file for ngx-translate', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    supportNgxTranslate: true\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\r\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\r\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\r\n            const translation: any = JSON.parse(fileContent);\r\n            expect(translation).toBeTruthy();\r\n            expect(translation.placeholders).toBeTruthy();\r\n            expect(translation.placeholders.test1placeholder).toBe('{{0}}: Eine Nachricht mit einem Platzhalter');\r\n            expect(translation.placeholders.test2placeholder).toBe('{{0}}: Eine Nachricht mit 2 Platzhaltern: {{1}}');\r\n            expect(translation.placeholders.test2placeholderRepeated).toBe('{{0}}: Eine Nachricht mit 2 Platzhaltern: {{0}} {{1}}');\r\n            done();\r\n        });\r\n\r\n        it('should handle embedded html markup in json file for ngx-translate', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    supportNgxTranslate: true\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\r\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\r\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\r\n            const translation: any = JSON.parse(fileContent);\r\n            expect(translation).toBeTruthy();\r\n            expect(translation.embeddedhtml).toBeTruthy();\r\n            expect(translation.embeddedhtml.bold).toBe('Diese Nachricht ist <b>WICHTIG</b>');\r\n            expect(translation.embeddedhtml.boldstrong).toBe('Diese Nachricht ist <b><strong>SEHR WICHTIG</strong></b>');\r\n            expect(translation.embeddedhtml.strange).toBe('Diese Nachricht ist <strange>{{0}}</strange>');\r\n            done();\r\n        });\r\n\r\n        it('should not export @@ids to translation json file, when this is supressed in pattern (issue #62)', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    supportNgxTranslate: true,\r\n                    ngxTranslateExtractionPattern: 'ngx-translate'\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\r\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\r\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\r\n            const translation: any = JSON.parse(fileContent);\r\n            expect(translation).toBeTruthy();\r\n            expect(translation.dateservice.monday).toBe('Montag');\r\n            expect(translation.explicitlysetids).toBeFalsy();\r\n            expect(translation['alt-ngx-translate']).toBeFalsy();\r\n            done();\r\n        });\r\n\r\n        it('should export other then ngx-translate description marked entries to translation json file,' +\r\n            ' when this is specified in pattern (issue #62)', (done) => {\r\n            FileUtil.copy(MASTER1SRC, MASTER);\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de',\r\n                    srcDir: WORKDIR,\r\n                    genDir: WORKDIR,\r\n                    i18nFormat: 'xlf2',\r\n                    i18nFile: MASTERFILE,\r\n                    supportNgxTranslate: true,\r\n                    ngxTranslateExtractionPattern: 'ngx-translate|alt-ngx-translate'\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {languages: ['de']}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR');\r\n            const translationJsonFilename = xliffMergeCmd.generatedNgxTranslateFile('de');\r\n            expect(FileUtil.exists(translationJsonFilename)).toBeTruthy();\r\n            const fileContent = FileUtil.read(translationJsonFilename, 'UTF-8');\r\n            const translation: any = JSON.parse(fileContent);\r\n            expect(translation).toBeTruthy();\r\n            expect(translation.dateservice.monday).toBe('Montag');\r\n            expect(translation.explicitlysetids).toBeFalsy();\r\n            expect(translation['alt-ngx-translate'].example1).toBe('Alternate description for ngx-translate export');\r\n            done();\r\n        });\r\n\r\n    });\r\n\r\n});\r\n"]}