{"version":3,"file":"xliff-merge.spec.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/xliffmerge/xliff-merge.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {XliffMerge} from './xliff-merge';\r\nimport {ProgramOptions, IConfigFile} from './i-xliff-merge-options';\r\nimport {CommandOutput} from '../common/command-output';\r\nimport {WriterToString} from '../common/writer-to-string';\r\n\r\n/**\r\n * Created by martin on 18.02.2017.\r\n * Testcases for XliffMerge.\r\n */\r\n\r\ndescribe('XliffMerge test spec', () => {\r\n\r\n    describe('test the tooling used in the tests', () => {\r\n        it('should write output to string (Test WriterToString)', () => {\r\n            const ws: WriterToString = new WriterToString();\r\n            ws.write('test test test\\n');\r\n            ws.write('line 2');\r\n            expect(ws.writtenData()).toContain('line 2');\r\n        });\r\n    });\r\n\r\n    describe('command line and configuration checks', () => {\r\n        it('should parse -v option', () => {\r\n            const options: ProgramOptions = XliffMerge.parseArgs(['node', 'xliffmerge', '-v']);\r\n            expect(options.verbose).toBeTruthy();\r\n            expect(options.quiet).toBeFalsy();\r\n        });\r\n\r\n        it('should parse -q option', () => {\r\n            const options: ProgramOptions = XliffMerge.parseArgs(['node', 'xliffmerge', '-q']);\r\n            expect(options.quiet).toBeTruthy();\r\n            expect(options.verbose).toBeFalsy();\r\n        });\r\n\r\n        it('should output version and used parameters when called with defaults and verbose flag', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const xliffMergeCmd = new XliffMerge(commandOut, {verbose: true});\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('xliffmerge version');\r\n            expect(ws.writtenData()).toContain('Used Parameters:');\r\n            done();\r\n        });\r\n\r\n        it('should not output version and used parameters when called with defaults and both verbose and quiet flag', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const xliffMergeCmd = new XliffMerge(commandOut, {verbose: true, quiet: true});\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('xliffmerge version');\r\n            expect(ws.writtenData()).not.toContain('Used Parameters:');\r\n            done();\r\n        });\r\n\r\n        it('should output an errror (no languages) when called with defaults', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const xliffMergeCmd = new XliffMerge(commandOut, {});\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('no languages specified');\r\n            done();\r\n        });\r\n\r\n        it('should output an errror (i18nfile) when called with defaults', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const xliffMergeCmd = new XliffMerge(commandOut, {languages: ['de', 'en']});\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('i18nFile');\r\n            done();\r\n        });\r\n\r\n        it('should output an errror (could not read) when called with a non existing profile', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const xliffMergeCmd = new XliffMerge(commandOut, {verbose: true, profilePath: 'lmaa'});\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('could not read profile');\r\n            done();\r\n        });\r\n\r\n        it('should read test config file', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(\r\n                commandOut,\r\n                {profilePath: './test/testdata/xliffmergeconfig.json', verbose: true},\r\n                null);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('languages:\\tde,en');\r\n            expect(ws.writtenData()).toContain('srcDir:\\t\"test');\r\n            expect(ws.writtenData()).toContain('genDir:\\t\"test');\r\n            done();\r\n        });\r\n\r\n        it('should use package.json if no other config file given', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, null);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('usedProfilePath:\\t\"package.json\"');\r\n            done();\r\n        });\r\n\r\n        it('should output an errror (srcDir not readable) when called with a non existing srcDir', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    srcDir: 'lmaa',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('srcDir \"lmaa\" is not a directory');\r\n            done();\r\n        });\r\n\r\n        it('should output an errror (genDir not existing) when called with a non existing genDir', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    genDir: 'lmaa',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('genDir \"lmaa\" is not a directory');\r\n            done();\r\n        });\r\n\r\n        it('should output an errror (i18nFile is not readable) when called with a non existing master file', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    srcDir: 'test/testdata',\r\n                    i18nFile: 'nonexistingmaster.xlf'\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('i18nFile \"test/testdata/nonexistingmaster.xlf\" is not readable');\r\n            done();\r\n        });\r\n\r\n        it('should output an errror (language not valid) when called with an invalid language code', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'de/ch',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('language \"de/ch\" is not valid');\r\n            done();\r\n        });\r\n\r\n        it('should accept en_US (with underscore) as a valid language code (#59)', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'en_US',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('language \"en_US\" is not valid');\r\n            done();\r\n        });\r\n\r\n        it('should output an errror (i18nFormat invalid) when called with an invalid i18n format', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    i18nFormat: 'unknown',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('i18nFormat \"unknown\" invalid');\r\n            done();\r\n        });\r\n\r\n        it('should output an error when autotranslate is set to true and there is no api key set', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    autotranslate: true,\r\n                    apikey: '',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('autotranslate requires an API key');\r\n            done();\r\n        });\r\n\r\n        it('should output an error when autotranslate is set to a list of languages and there is no api key set', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    autotranslate: ['de'],\r\n                    apikey: '',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('autotranslate requires an API key');\r\n            done();\r\n        });\r\n\r\n        it('should read api key from file if apikeyfile is set', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    autotranslate: ['de'],\r\n                    apikeyfile: 'package.json',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('apikeyfile:\\tpackage.json');\r\n            expect(ws.writtenData()).toContain('apikey:\\t****');\r\n            done();\r\n        });\r\n\r\n        it('should output an error when autotranslate language is not in list of languages', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['en', 'ru'],\r\n                    autotranslate: ['de'],\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('autotranslate language \"de\" is not in list of languages');\r\n            done();\r\n        });\r\n\r\n        it('should output an error when autotranslate language is set to default language', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['en', 'ru'],\r\n                    autotranslate: ['en', 'ru'],\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).toContain('autotranslate language \"en\" cannot be translated, because it is the source language');\r\n            done();\r\n        });\r\n\r\n        it('should not output error \".. because it is the source language\"' +\r\n            ' when autotranslate language is not set to default language (issue #52)', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    defaultLanguage: 'zh-CN',\r\n                    languages: ['en', 'ja'],\r\n                    autotranslate: ['en', 'ja'],\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR');\r\n            expect(ws.writtenData()).not.toContain('autotranslate language \"en\" cannot be translated, because it is the source language');\r\n            done();\r\n        });\r\n\r\n        it('should accept i18n format xlf', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    i18nFormat: 'xlf',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('i18nFormat');\r\n            done();\r\n        });\r\n\r\n        it('should accept i18n format xlf2', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    i18nFormat: 'xlf2',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('i18nFormat');\r\n            done();\r\n        });\r\n\r\n        it('should accept i18n format xmb', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    i18nFormat: 'xmb',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('i18nFormat');\r\n            done();\r\n        });\r\n\r\n        it('should read languages from config file', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['de', 'en', 'fr'],\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('languages:\\tde,en,fr');\r\n            expect(ws.writtenData()).toContain('outputFile[de]:\tmessages.de.xlf');\r\n            expect(ws.writtenData()).toContain('outputFile[en]:\tmessages.en.xlf');\r\n            expect(ws.writtenData()).toContain('outputFile[fr]:\tmessages.fr.xlf');\r\n            done();\r\n        });\r\n\r\n        it('should accept i18nBaseFile', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    i18nBaseFile: 'custom_file',\r\n                    languages: ['de', 'en', 'fr']\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('i18nBaseFile:\t\"custom_file\"');\r\n            expect(ws.writtenData()).toContain('i18nFile:\t\"custom_file.xlf\"');\r\n            expect(ws.writtenData()).toContain('outputFile[de]:\tcustom_file.de.xlf');\r\n            expect(ws.writtenData()).toContain('outputFile[en]:\tcustom_file.en.xlf');\r\n            expect(ws.writtenData()).toContain('outputFile[fr]:\tcustom_file.fr.xlf');\r\n            expect(ws.writtenData()).toContain('i18nFile \"custom_file.xlf\" is not readable');\r\n            done();\r\n        });\r\n\r\n        it('should find syntax error \"duplicate @@\" in ngxTranslateExtractionPattern', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['de', 'en', 'fr'],\r\n                    supportNgxTranslate: true,\r\n                    ngxTranslateExtractionPattern: '@@|@@',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR: ngxTranslateExtractionPattern');\r\n            expect(ws.writtenData()).toContain('extraction pattern must not contain @@ twice');\r\n            done();\r\n        });\r\n\r\n        it('should find syntax error \"invalid description pattern\" in ngxTranslateExtractionPattern', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['de', 'en', 'fr'],\r\n                    supportNgxTranslate: true,\r\n                    ngxTranslateExtractionPattern: '@@|ng;',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('ERROR: ngxTranslateExtractionPattern');\r\n            expect(ws.writtenData()).toContain('description pattern must be an identifier containing only letters, digits, _ or -');\r\n            done();\r\n        });\r\n\r\n        it('should accept valid ngxTranslateExtractionPattern', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['de', 'en', 'fr'],\r\n                    supportNgxTranslate: true,\r\n                    ngxTranslateExtractionPattern: '@@|ngx-translate|x',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR: ngxTranslateExtractionPattern');\r\n            done();\r\n        });\r\n\r\n        it('should output default pattern when verbose and ngxTranslateSupport activated', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['de', 'en', 'fr'],\r\n                    supportNgxTranslate: true\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).not.toContain('ERROR: ngxTranslateExtractionPattern');\r\n            expect(ws.writtenData()).toContain('* ngxTranslateExtractionPattern:\\t@@|ngx-translate');\r\n            done();\r\n        });\r\n\r\n        it('should accept targetPraefix and targetSuffix parameter', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['de', 'en', 'fr'],\r\n                    targetPraefix: '%%',\r\n                    targetSuffix: '!!',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('* targetPraefix:\\t\"%%\"');\r\n            expect(ws.writtenData()).toContain('* targetSuffix:\\t\"!!\"');\r\n            done();\r\n        });\r\n\r\n        it('should output a warning when targetPraefix or targetSuffix are set, but useSourceAsTarget is disabled', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: [\"de\"],\r\n                    useSourceAsTarget: false,\r\n                    targetPraefix: '%%',\r\n                    targetSuffix: '!!',\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            const allWarnings = xliffMergeCmd.warnings().join('\\n');\r\n            expect(allWarnings).toContain('configured targetPraefix \"%%\" will not be used because \"useSourceAsTarget\" is disabled');\r\n            expect(allWarnings).toContain('configured targetSuffix \"!!\" will not be used because \"useSourceAsTarget\" is disabled');\r\n            done();\r\n        });\r\n\r\n        it('should accept beautifyOutput flag set to true', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['de', 'en', 'fr'],\r\n                    beautifyOutput: true,\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('* beautifyOutput:\\ttrue');\r\n            done();\r\n        });\r\n\r\n        it('should accept beautifyOutput flag set to false', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['de', 'en', 'fr'],\r\n                    beautifyOutput: false,\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('* beautifyOutput:\\tfalse');\r\n            done();\r\n        });\r\n\r\n        it('should use default false for beautifyOutput flag', (done) => {\r\n            const ws: WriterToString = new WriterToString();\r\n            const commandOut = new CommandOutput(ws);\r\n            const profileContent: IConfigFile = {\r\n                xliffmergeOptions: {\r\n                    languages: ['de', 'en', 'fr'],\r\n                }\r\n            };\r\n            const xliffMergeCmd = XliffMerge.createFromOptions(commandOut, {verbose: true}, profileContent);\r\n            xliffMergeCmd.run();\r\n            expect(ws.writtenData()).toContain('* beautifyOutput:\\tfalse');\r\n            done();\r\n        });\r\n\r\n    });\r\n\r\n});\r\n"]}