{"version":3,"file":"i-xliff-merge-options.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/xliffmerge/i-xliff-merge-options.ts"],"names":[],"mappings":";AAAA;;;GAGG","sourcesContent":["/**\r\n * Created by roobm on 15.03.2017.\r\n * Interfaces for command line call and config file content.\r\n */\r\n\r\n/**\r\n * Options that can be passed as program arguments.\r\n */\r\nexport interface ProgramOptions {\r\n    quiet?: boolean;\r\n    verbose?: boolean;\r\n    profilePath?: string;\r\n    languages?: string[];\r\n}\r\n\r\n/**\r\n * Definition of the possible values used in the config file\r\n */\r\nexport interface IConfigFile {\r\n    // content is wrapped in \"xliffmergeOptions\" to allow to use it embedded in another config file (e.g. tsconfig.json)\r\n    xliffmergeOptions?: IXliffMergeOptions;\r\n}\r\n\r\nexport interface IXliffMergeOptions {\r\n    quiet?: boolean;   // Flag to only output error messages\r\n    verbose?: boolean;   // Flag to generate debug output messages\r\n    allowIdChange?: boolean; // Try to find translation even when id is missing\r\n    defaultLanguage?: string;    // the default language (the language, which is used in the original templates)\r\n    languages?: string[];   // all languages, if not specified via commandline\r\n    srcDir?: string;    // Directory, where the master file is\r\n    i18nBaseFile?: string; // Basename for i18n input and output, default is 'messages'\r\n    i18nFile?: string;  // master file, if not absolute, it is relative to srcDir\r\n    i18nFormat?: string; // xlf or xmb\r\n    encoding?: string;  // encoding to write xml\r\n    genDir?: string;    // directory, where the files are written to\r\n    angularCompilerOptions?: {\r\n        genDir?: string;    // same as genDir, just to be compatible with ng-xi18n\r\n    };\r\n    removeUnusedIds?: boolean;\r\n    supportNgxTranslate?: boolean;  // Flag, wether output for ngx-translate should be generated\r\n    ngxTranslateExtractionPattern?: string; // Criteria, what messages should be used for ngx-translate output\r\n      // see details on the documentation page https://github.com/martinroob/ngx-i18nsupport/wiki/ngx-translate-usage\r\n    useSourceAsTarget?: boolean; // Flag, whether source must be used as target for new trans-units\r\n    targetPraefix?: string; // Praefix for target copied from sourced\r\n    targetSuffix?: string; // Suffix for target copied from sourced\r\n    beautifyOutput?: boolean; // beautify output\r\n    preserveOrder?: boolean; // preserve order of new trans units\r\n    autotranslate?: boolean|string[]; // enable auto translate via Google Translate\r\n        // if it is an array, list of languages to autotranslate\r\n        // if it is true, autotranslate all languages (except source language of course)\r\n        // if it is false (default) no autotranslate\r\n    apikey?: string;    // API Key for Google Translate, required if autotranslate is enabled\r\n    apikeyfile?: string;    // file name where API Key for Google Translate can be read from\r\n}\r\n\r\n"]}