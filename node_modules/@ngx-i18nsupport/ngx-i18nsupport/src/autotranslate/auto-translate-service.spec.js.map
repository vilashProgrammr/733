{"version":3,"file":"auto-translate-service.spec.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/autotranslate/auto-translate-service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\r\nimport {FileUtil} from '../common/file-util';\r\nimport {format} from 'util';\r\nimport {AutoTranslateService} from './auto-translate-service';\r\n/**\r\n * Created by roobm on 06.07.2017.\r\n * Testcases for the autotranslate service.\r\n */\r\n\r\n/**\r\n * Get google Translate API key from file.\r\n * Which file is read, is determined by env var API_KEY_FILE.\r\n * @return a (hopefully) valid API key or null\r\n */\r\nexport function getApiKey(): string {\r\n        const apikeyPath = process.env.API_KEY_FILE;\r\n        if (apikeyPath) {\r\n            if (fs.existsSync(apikeyPath)) {\r\n                return FileUtil.read(apikeyPath, 'utf-8');\r\n            } else {\r\n                throw new Error(format('api key file not found: API_KEY_FILE=%s', apikeyPath));\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n}\r\n\r\ndescribe('Autotranslate tests', () => {\r\n\r\n    let apikey: string;\r\n    let service: AutoTranslateService;\r\n\r\n    beforeEach(() => {\r\n        apikey = getApiKey();\r\n        if (apikey) {\r\n            service = new AutoTranslateService(apikey);\r\n        } else {\r\n            service = null;\r\n        }\r\n    });\r\n\r\n    it('should detect wrong api key', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        service.setApiKey('lmaa');\r\n        service.translateMultipleStrings(['a', 'b'], 'en', 'de').subscribe(() => {\r\n            expect('should not be called').toBe('');\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toContain('API key not valid');\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should detect unsupported language', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        service.translateMultipleStrings(['a', 'b'], 'en', 'klingon').subscribe(() => {\r\n            expect('should not be called').toBe('');\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toBe('Translation from \"en\" to \"klingon\" not supported');\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should translate simple words from en to de', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        service.translateMultipleStrings(['Hello', 'world'], 'en', 'de').subscribe((translations: string[]) => {\r\n            expect(translations).toBeTruthy();\r\n            expect(translations.length).toBe(2);\r\n            expect(translations[0]).toBe('Hallo');\r\n            expect(translations[1]).toBe('Welt');\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toBe(''); // should not be invoked\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should translate empty string from en to de', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        service.translateMultipleStrings(['', 'world'], 'en', 'de').subscribe((translations: string[]) => {\r\n            expect(translations).toBeTruthy();\r\n            expect(translations.length).toBe(2);\r\n            expect(translations[0]).toBe('');\r\n            expect(translations[1]).toBe('Welt');\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toBe(''); // should not be invoked\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should accept empty array of translations', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        service.translateMultipleStrings([], 'en', 'de').subscribe((translations: string[]) => {\r\n            expect(translations).toBeTruthy();\r\n            expect(translations.length).toBe(0);\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toBe(''); // should not be invoked\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should ignore region codes', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        service.translateMultipleStrings(['Hello', 'world'], 'en-uk', 'de-ch').subscribe((translations: string[]) => {\r\n            expect(translations).toBeTruthy();\r\n            expect(translations.length).toBe(2);\r\n            expect(translations[0]).toBe('Hallo');\r\n            expect(translations[1]).toBe('Welt');\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toBe(''); // should not be invoked\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should translate very large number of messages', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        const NUM = 1000; // internal google limit is 128, so service has to split it...\r\n        const manyMessages: string[] = [];\r\n        for (let i = 0; i < NUM; i++) {\r\n            manyMessages.push('Hello world!');\r\n        }\r\n        service.translateMultipleStrings(manyMessages, 'en', 'de').subscribe((translations: string[]) => {\r\n            expect(translations).toBeTruthy();\r\n            expect(translations.length).toBe(NUM);\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toBe(''); // should not be invoked\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should translate very long messages that exceeds google size limit of 5000 chars ', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        const longString = 'abcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmn' +\r\n            'opqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvwabcdefghijklmnopqrstuvw';\r\n        const longMessages: string[] = [];\r\n        const NUM = 30;  // 30 * 260char = 5200\r\n        for (let i = 0; i < NUM; i++) {\r\n            longMessages.push(longString);\r\n        }\r\n\r\n        service.translateMultipleStrings(longMessages, 'en', 'de').subscribe((translations: string[]) => {\r\n            expect(translations).toBeTruthy();\r\n            expect(translations.length).toBe(NUM);\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toBe(''); // should not be invoked\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should translate to french apostrophes (#94)', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        service.translateMultipleStrings(['Operator Logs'], 'en', 'fr').subscribe((translations: string[]) => {\r\n            expect(translations).toBeTruthy();\r\n            expect(translations.length).toBe(1);\r\n            expect(translations[0]).toBe('Journaux d&#39;opérateur');\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toBe(''); // should not be invoked\r\n            done();\r\n        });\r\n    });\r\n\r\n    it('should translate to german umlaut (#94)', (done) => {\r\n        if (!service) {\r\n            done();\r\n            return;\r\n        }\r\n        service.translateMultipleStrings(['green doors'], 'en', 'de').subscribe((translations: string[]) => {\r\n            expect(translations).toBeTruthy();\r\n            expect(translations.length).toBe(1);\r\n            expect(translations[0]).toBe('grüne Türen');\r\n            done();\r\n        }, (err) => {\r\n            expect(err.message).toBe(''); // should not be invoked\r\n            done();\r\n        });\r\n    });\r\n\r\n\r\n});\r\n"]}