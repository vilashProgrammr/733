{"version":3,"file":"file-util.js","sourceRoot":"","sources":["../../../../projects/xliffmerge/src/common/file-util.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\r\n\r\n/**\r\n * Created by martin on 17.02.2017.\r\n * Some (a few) simple utils for file operations.\r\n * Just for convenience.\r\n */\r\n\r\nexport class FileUtil {\r\n\r\n    /**\r\n     * Check for existence.\r\n     * @param filename filename\r\n     * @return wether file exists\r\n     */\r\n    public static exists(filename: string) {\r\n        return fs.existsSync(filename);\r\n    }\r\n\r\n    /**\r\n     * Read a file.\r\n     * @param filename filename\r\n     * @param encoding encoding\r\n     * @return content of file\r\n     */\r\n    public static read(filename: string, encoding: string) {\r\n        return fs.readFileSync(filename, encoding);\r\n    }\r\n\r\n    /**\r\n     * Write a file with given content.\r\n     * @param filename filename\r\n     * @param newContent newContent\r\n     * @param encoding encoding\r\n     */\r\n    public static replaceContent(filename: string, newContent: string, encoding: string) {\r\n        fs.writeFileSync(filename, newContent, {encoding: encoding});\r\n    }\r\n\r\n    public static copy(srcFile: string, destFile: string) {\r\n        const BUF_LENGTH = 64 * 1024;\r\n        const buff = Buffer.alloc(BUF_LENGTH);\r\n        const fdr = fs.openSync(srcFile, 'r');\r\n        const fdw = fs.openSync(destFile, 'w');\r\n        let bytesRead = 1;\r\n        let pos = 0;\r\n        while (bytesRead > 0) {\r\n            bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);\r\n            fs.writeSync(fdw, buff, 0, bytesRead);\r\n            pos += bytesRead;\r\n        }\r\n        fs.closeSync(fdr);\r\n        fs.closeSync(fdw);\r\n    }\r\n\r\n    /**\r\n     * Delete the folder and all of its content (rm -rf).\r\n     * @param path path\r\n     */\r\n    public static deleteFolderRecursive(path: string) {\r\n        let files = [];\r\n        if (fs.existsSync(path) ) {\r\n            files = fs.readdirSync(path);\r\n            files.forEach(function(file) {\r\n                const curPath = path + '/' + file;\r\n                if (fs.lstatSync(curPath).isDirectory()) { // recurse\r\n                    FileUtil.deleteFolderRecursive(curPath);\r\n                } else { // delete file\r\n                    fs.unlinkSync(curPath);\r\n                }\r\n            });\r\n            fs.rmdirSync(path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete folders content recursively, but do not delete folder.\r\n     * Folder is left empty at the end.\r\n     * @param path path\r\n     */\r\n    public static deleteFolderContentRecursive(path: string) {\r\n        let files = [];\r\n        if (fs.existsSync(path) ) {\r\n            files = fs.readdirSync(path);\r\n            files.forEach(function(file) {\r\n                const curPath = path + '/' + file;\r\n                if (fs.lstatSync(curPath).isDirectory()) { // recurse\r\n                    FileUtil.deleteFolderRecursive(curPath);\r\n                } else { // delete file\r\n                    fs.unlinkSync(curPath);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete a file.\r\n     * @param path path\r\n     */\r\n    public static deleteFile(path: string) {\r\n        fs.unlinkSync(path);\r\n    }\r\n}\r\n"]}