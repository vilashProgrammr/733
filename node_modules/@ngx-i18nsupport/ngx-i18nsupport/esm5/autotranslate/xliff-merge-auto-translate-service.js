/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isNullOrUndefined } from '../common/util';
import { forkJoin, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import * as entityDecoderLib from 'he';
import { STATE_NEW } from '@ngx-i18nsupport/ngx-i18nsupport-lib';
import { AutoTranslateService } from './auto-translate-service';
import { AutoTranslateResult } from './auto-translate-result';
import { AutoTranslateSummaryReport } from './auto-translate-summary-report';
/**
 * Created by martin on 07.07.2017.
 * Service to autotranslate Transunits via Google Translate.
 */
var /**
 * Created by martin on 07.07.2017.
 * Service to autotranslate Transunits via Google Translate.
 */
XliffMergeAutoTranslateService = /** @class */ (function () {
    function XliffMergeAutoTranslateService(apikey) {
        this.autoTranslateService = new AutoTranslateService(apikey);
    }
    /**
     * Auto translate file via Google Translate.
     * Will translate all new units in file.
     * @param from from
     * @param to to
     * @param languageSpecificMessagesFile languageSpecificMessagesFile
     * @return a promise with the execution result as a summary report.
     */
    /**
     * Auto translate file via Google Translate.
     * Will translate all new units in file.
     * @param {?} from from
     * @param {?} to to
     * @param {?} languageSpecificMessagesFile languageSpecificMessagesFile
     * @return {?} a promise with the execution result as a summary report.
     */
    XliffMergeAutoTranslateService.prototype.autoTranslate = /**
     * Auto translate file via Google Translate.
     * Will translate all new units in file.
     * @param {?} from from
     * @param {?} to to
     * @param {?} languageSpecificMessagesFile languageSpecificMessagesFile
     * @return {?} a promise with the execution result as a summary report.
     */
    function (from, to, languageSpecificMessagesFile) {
        return forkJoin(tslib_1.__spread([
            this.doAutoTranslateNonICUMessages(from, to, languageSpecificMessagesFile)
        ], this.doAutoTranslateICUMessages(from, to, languageSpecificMessagesFile)))
            .pipe(map((/**
         * @param {?} summaries
         * @return {?}
         */
        function (summaries) {
            /** @type {?} */
            var summary = summaries[0];
            for (var i = 1; i < summaries.length; i++) {
                summary.merge(summaries[i]);
            }
            return summary;
        })));
    };
    /**
     * Collect all units that are untranslated.
     * @param languageSpecificMessagesFile languageSpecificMessagesFile
     * @return all untranslated units
     */
    /**
     * Collect all units that are untranslated.
     * @private
     * @param {?} languageSpecificMessagesFile languageSpecificMessagesFile
     * @return {?} all untranslated units
     */
    XliffMergeAutoTranslateService.prototype.allUntranslatedTUs = /**
     * Collect all units that are untranslated.
     * @private
     * @param {?} languageSpecificMessagesFile languageSpecificMessagesFile
     * @return {?} all untranslated units
     */
    function (languageSpecificMessagesFile) {
        // collect all units, that should be auto translated
        /** @type {?} */
        var allUntranslated = [];
        languageSpecificMessagesFile.forEachTransUnit((/**
         * @param {?} tu
         * @return {?}
         */
        function (tu) {
            if (tu.targetState() === STATE_NEW) {
                allUntranslated.push(tu);
            }
        }));
        return allUntranslated;
    };
    /**
     * @private
     * @param {?} from
     * @param {?} to
     * @param {?} languageSpecificMessagesFile
     * @return {?}
     */
    XliffMergeAutoTranslateService.prototype.doAutoTranslateNonICUMessages = /**
     * @private
     * @param {?} from
     * @param {?} to
     * @param {?} languageSpecificMessagesFile
     * @return {?}
     */
    function (from, to, languageSpecificMessagesFile) {
        var _this = this;
        /** @type {?} */
        var allUntranslated = this.allUntranslatedTUs(languageSpecificMessagesFile);
        /** @type {?} */
        var allTranslatable = allUntranslated.filter((/**
         * @param {?} tu
         * @return {?}
         */
        function (tu) { return isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()); }));
        /** @type {?} */
        var allMessages = allTranslatable.map((/**
         * @param {?} tu
         * @return {?}
         */
        function (tu) {
            return tu.sourceContentNormalized().asDisplayString();
        }));
        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)
            .pipe(
        // #94 google translate might return &#.. entity refs, that must be decoded
        map((/**
         * @param {?} translations
         * @return {?}
         */
        function (translations) { return translations.map((/**
         * @param {?} encodedTranslation
         * @return {?}
         */
        function (encodedTranslation) { return entityDecoderLib.decode(encodedTranslation); })); })), map((/**
         * @param {?} translations
         * @return {?}
         */
        function (translations) {
            /** @type {?} */
            var summary = new AutoTranslateSummaryReport(from, to);
            summary.setIgnored(allUntranslated.length - allTranslatable.length);
            for (var i = 0; i < translations.length; i++) {
                /** @type {?} */
                var tu = allTranslatable[i];
                /** @type {?} */
                var translationText = translations[i];
                /** @type {?} */
                var result = _this.autoTranslateNonICUUnit(tu, translationText);
                summary.addSingleResult(tu, result);
            }
            return summary;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            /** @type {?} */
            var failSummary = new AutoTranslateSummaryReport(from, to);
            failSummary.setError(err.message, allMessages.length);
            return of(failSummary);
        })));
    };
    /**
     * @private
     * @param {?} from
     * @param {?} to
     * @param {?} languageSpecificMessagesFile
     * @return {?}
     */
    XliffMergeAutoTranslateService.prototype.doAutoTranslateICUMessages = /**
     * @private
     * @param {?} from
     * @param {?} to
     * @param {?} languageSpecificMessagesFile
     * @return {?}
     */
    function (from, to, languageSpecificMessagesFile) {
        var _this = this;
        /** @type {?} */
        var allUntranslated = this.allUntranslatedTUs(languageSpecificMessagesFile);
        /** @type {?} */
        var allTranslatableICU = allUntranslated.filter((/**
         * @param {?} tu
         * @return {?}
         */
        function (tu) { return !isNullOrUndefined(tu.sourceContentNormalized().getICUMessage()); }));
        return allTranslatableICU.map((/**
         * @param {?} tu
         * @return {?}
         */
        function (tu) {
            return _this.doAutoTranslateICUMessage(from, to, tu);
        }));
    };
    /**
     * Translate single ICU Messages.
     * @param from from
     * @param to to
     * @param tu transunit to translate (must contain ICU Message)
     * @return summary report
     */
    /**
     * Translate single ICU Messages.
     * @private
     * @param {?} from from
     * @param {?} to to
     * @param {?} tu transunit to translate (must contain ICU Message)
     * @return {?} summary report
     */
    XliffMergeAutoTranslateService.prototype.doAutoTranslateICUMessage = /**
     * Translate single ICU Messages.
     * @private
     * @param {?} from from
     * @param {?} to to
     * @param {?} tu transunit to translate (must contain ICU Message)
     * @return {?} summary report
     */
    function (from, to, tu) {
        var _this = this;
        /** @type {?} */
        var icuMessage = tu.sourceContentNormalized().getICUMessage();
        /** @type {?} */
        var categories = icuMessage.getCategories();
        // check for nested ICUs, we do not support that
        if (categories.find((/**
         * @param {?} category
         * @return {?}
         */
        function (category) { return !isNullOrUndefined(category.getMessageNormalized().getICUMessage()); }))) {
            /** @type {?} */
            var summary = new AutoTranslateSummaryReport(from, to);
            summary.setIgnored(1);
            return of(summary);
        }
        /** @type {?} */
        var allMessages = categories.map((/**
         * @param {?} category
         * @return {?}
         */
        function (category) { return category.getMessageNormalized().asDisplayString(); }));
        return this.autoTranslateService.translateMultipleStrings(allMessages, from, to)
            .pipe(
        // #94 google translate might return &#.. entity refs, that must be decoded
        map((/**
         * @param {?} translations
         * @return {?}
         */
        function (translations) { return translations.map((/**
         * @param {?} encodedTranslation
         * @return {?}
         */
        function (encodedTranslation) { return entityDecoderLib.decode(encodedTranslation); })); })), map((/**
         * @param {?} translations
         * @return {?}
         */
        function (translations) {
            /** @type {?} */
            var summary = new AutoTranslateSummaryReport(from, to);
            /** @type {?} */
            var icuTranslation = {};
            for (var i = 0; i < translations.length; i++) {
                icuTranslation[categories[i].getCategory()] = translations[i];
            }
            /** @type {?} */
            var result = _this.autoTranslateICUUnit(tu, icuTranslation);
            summary.addSingleResult(tu, result);
            return summary;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            /** @type {?} */
            var failSummary = new AutoTranslateSummaryReport(from, to);
            failSummary.setError(err.message, allMessages.length);
            return of(failSummary);
        })));
    };
    /**
     * @private
     * @param {?} tu
     * @param {?} translatedMessage
     * @return {?}
     */
    XliffMergeAutoTranslateService.prototype.autoTranslateNonICUUnit = /**
     * @private
     * @param {?} tu
     * @param {?} translatedMessage
     * @return {?}
     */
    function (tu, translatedMessage) {
        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translate(translatedMessage));
    };
    /**
     * @private
     * @param {?} tu
     * @param {?} translation
     * @return {?}
     */
    XliffMergeAutoTranslateService.prototype.autoTranslateICUUnit = /**
     * @private
     * @param {?} tu
     * @param {?} translation
     * @return {?}
     */
    function (tu, translation) {
        return this.autoTranslateUnit(tu, tu.sourceContentNormalized().translateICUMessage(translation));
    };
    /**
     * @private
     * @param {?} tu
     * @param {?} translatedMessage
     * @return {?}
     */
    XliffMergeAutoTranslateService.prototype.autoTranslateUnit = /**
     * @private
     * @param {?} tu
     * @param {?} translatedMessage
     * @return {?}
     */
    function (tu, translatedMessage) {
        /** @type {?} */
        var errors = translatedMessage.validate();
        /** @type {?} */
        var warnings = translatedMessage.validateWarnings();
        if (!isNullOrUndefined(errors)) {
            return new AutoTranslateResult(false, 'errors detected, not translated');
        }
        else if (!isNullOrUndefined(warnings)) {
            return new AutoTranslateResult(false, 'warnings detected, not translated');
        }
        else {
            tu.translate(translatedMessage);
            return new AutoTranslateResult(true, null); // success
        }
    };
    return XliffMergeAutoTranslateService;
}());
/**
 * Created by martin on 07.07.2017.
 * Service to autotranslate Transunits via Google Translate.
 */
export { XliffMergeAutoTranslateService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    XliffMergeAutoTranslateService.prototype.autoTranslateService;
}
//# sourceMappingURL=data:application/json;base64,