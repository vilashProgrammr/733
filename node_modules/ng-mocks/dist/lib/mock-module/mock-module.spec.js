"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@angular/common");
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var animations_1 = require("@angular/platform-browser/animations");
var mock_component_1 = require("../mock-component");
var mock_module_1 = require("./mock-module");
var test_fixtures_1 = require("./test-fixtures");
var ComponentSubject = (function () {
    function ComponentSubject() {
        this.test = 'test';
    }
    ComponentSubject = __decorate([
        core_1.Component({
            selector: 'component-subject',
            template: "\n    <example-component></example-component>\n    <span example-directive></span>\n    {{ test | examplePipe }}\n  "
        })
    ], ComponentSubject);
    return ComponentSubject;
}());
var SameImportsComponent = (function () {
    function SameImportsComponent() {
    }
    SameImportsComponent = __decorate([
        core_1.Component({
            selector: 'same-imports',
            template: "same imports"
        })
    ], SameImportsComponent);
    return SameImportsComponent;
}());
describe('MockModule', function () {
    var fixture;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            declarations: [
                ComponentSubject
            ],
            imports: [
                mock_module_1.MockModule(test_fixtures_1.ParentModule),
                mock_module_1.MockModule(test_fixtures_1.ModuleWithProvidersModule),
            ],
        })
            .compileComponents()
            .then(function () {
            fixture = testing_1.TestBed.createComponent(ComponentSubject);
            fixture.detectChanges();
        });
    }));
    it('should do stuff', function () {
        var mockedComponent = fixture.debugElement
            .query(platform_browser_1.By.directive(mock_component_1.MockComponent(test_fixtures_1.ExampleComponent)))
            .componentInstance;
        expect(mockedComponent).not.toBeNull();
    });
});
describe('SameImportsModules', function () {
    var fixture;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            declarations: [
                SameImportsComponent
            ],
            imports: [
                mock_module_1.MockModule(test_fixtures_1.SameImports1Module),
                mock_module_1.MockModule(test_fixtures_1.SameImports2Module),
            ],
        })
            .compileComponents()
            .then(function () {
            fixture = testing_1.TestBed.createComponent(SameImportsComponent);
            fixture.detectChanges();
        });
    }));
    it('should be imported correctly', function () {
        expect(fixture.componentInstance).toEqual(jasmine.any(SameImportsComponent));
        expect(fixture.nativeElement.innerText).toEqual('same imports');
    });
});
describe('NeverMockModules', function () {
    var fixture;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            declarations: [
                SameImportsComponent
            ],
            imports: [
                mock_module_1.MockModule(common_1.CommonModule),
                mock_module_1.MockModule(platform_browser_1.BrowserModule),
                mock_module_1.MockModule(animations_1.BrowserAnimationsModule),
            ],
        })
            .compileComponents()
            .then(function () {
            fixture = testing_1.TestBed.createComponent(SameImportsComponent);
            fixture.detectChanges();
        });
    }));
    it('should not fail when we pass them to MockModule', function () {
        expect(fixture.componentInstance).toEqual(jasmine.any(SameImportsComponent));
        expect(fixture.nativeElement.innerText).toEqual('same imports');
    });
});
describe('RouterModule', function () {
    var fixture;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            declarations: [
                test_fixtures_1.ExampleComponent,
            ],
            imports: [
                mock_module_1.MockModule(test_fixtures_1.AppRoutingModule),
            ],
        })
            .compileComponents()
            .then(function () {
            fixture = testing_1.TestBed.createComponent(test_fixtures_1.ExampleComponent);
            fixture.detectChanges();
        });
    }));
    it('should not fail when we pass RouterModule to MockModule', function () {
        expect(fixture.componentInstance).toEqual(jasmine.any(test_fixtures_1.ExampleComponent));
        expect(fixture.nativeElement.innerText).toEqual('My Example');
    });
});
describe('Usage of cached nested module', function () {
    var fixture;
    describe('1st test for root', function () {
        beforeEach(testing_1.async(function () {
            testing_1.TestBed.configureTestingModule({
                declarations: [
                    test_fixtures_1.ExampleConsumerComponent,
                ],
                imports: [
                    mock_module_1.MockModule(test_fixtures_1.LogicRootModule),
                ],
            })
                .compileComponents()
                .then(function () {
                fixture = testing_1.TestBed.createComponent(test_fixtures_1.ExampleConsumerComponent);
                fixture.detectChanges();
            });
        }));
        it('should be able to find component', function () {
            expect(fixture.componentInstance).toEqual(jasmine.any(test_fixtures_1.ExampleConsumerComponent));
        });
    });
    describe('2nd test for nested', function () {
        beforeEach(testing_1.async(function () {
            testing_1.TestBed.configureTestingModule({
                declarations: [
                    test_fixtures_1.ExampleConsumerComponent,
                ],
                imports: [
                    mock_module_1.MockModule(test_fixtures_1.LogicNestedModule),
                ],
            })
                .compileComponents()
                .then(function () {
                fixture = testing_1.TestBed.createComponent(test_fixtures_1.ExampleConsumerComponent);
                fixture.detectChanges();
            });
        }));
        it('should be able to find component', function () {
            expect(fixture.componentInstance).toEqual(jasmine.any(test_fixtures_1.ExampleConsumerComponent));
        });
    });
});
//# sourceMappingURL=mock-module.spec.js.map