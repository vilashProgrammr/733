"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var forms_1 = require("@angular/forms");
var platform_browser_1 = require("@angular/platform-browser");
var mock_component_1 = require("./mock-component");
var child_component_component_1 = require("./test-components/child-component.component");
var custom_form_control_component_1 = require("./test-components/custom-form-control.component");
var empty_component_component_1 = require("./test-components/empty-component.component");
var simple_component_component_1 = require("./test-components/simple-component.component");
var template_outlet_component_1 = require("./test-components/template-outlet.component");
var ExampleComponentContainer = (function () {
    function ExampleComponentContainer() {
        this.formControl = new forms_1.FormControl('');
    }
    ExampleComponentContainer.prototype.performActionOnChild = function (s) {
        this.childComponent.performAction(s);
    };
    __decorate([
        core_1.ViewChild(child_component_component_1.ChildComponent, { static: true }),
        __metadata("design:type", child_component_component_1.ChildComponent)
    ], ExampleComponentContainer.prototype, "childComponent", void 0);
    ExampleComponentContainer = __decorate([
        core_1.Component({
            selector: 'example-component-container',
            template: "\n    <simple-component [someInput]=\"'hi'\"\n                      [someOtherInput]=\"'bye'\"\n                      [someInput3]=true\n                      (someOutput1)=\"emitted = $event\"\n                      (someOutput2)=\"emitted = $event\">\n    </simple-component>\n    <simple-component [someInput]=\"'hi again'\" #f='seeimple'></simple-component>\n    <empty-component></empty-component>\n    <custom-form-control [formControl]=\"formControl\"></custom-form-control>\n    <empty-component id=\"ng-content-component\">doh</empty-component>\n    <empty-component id=\"ngmodel-component\" [(ngModel)]=\"someOutputHasEmitted\"></empty-component>\n    <child-component></child-component>\n    <template-outlet-component id=\"element-with-content-and-template\">\n      ng-content body header\n      <ng-template #block1><div>block 1 body</div></ng-template>\n      <ng-template #block2><span>block 2 body</span></ng-template>\n      ng-content body footer\n    </template-outlet-component>\n    <empty-component id=\"element-without-content-and-template\"></empty-component>\n    <empty-component id=\"element-with-content-only\">child of element-with-content-only</empty-component>\n  "
        })
    ], ExampleComponentContainer);
    return ExampleComponentContainer;
}());
exports.ExampleComponentContainer = ExampleComponentContainer;
describe('MockComponent', function () {
    var component;
    var fixture;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            declarations: [
                ExampleComponentContainer,
                mock_component_1.MockComponents(empty_component_component_1.EmptyComponent, simple_component_component_1.SimpleComponent, template_outlet_component_1.TemplateOutletComponent, child_component_component_1.ChildComponent, custom_form_control_component_1.CustomFormControlComponent),
            ],
            imports: [
                forms_1.FormsModule,
                forms_1.ReactiveFormsModule
            ]
        })
            .compileComponents()
            .then(function () {
            fixture = testing_1.TestBed.createComponent(ExampleComponentContainer);
            component = fixture.componentInstance;
        });
    }));
    it('should have use the original component\'s selector', function () {
        fixture.detectChanges();
        var mockedComponent = fixture.debugElement.query(platform_browser_1.By.css('simple-component'));
        expect(mockedComponent).not.toBeNull();
    });
    it('should have the input set on the mock component', function () {
        fixture.detectChanges();
        var mockedComponent = fixture.debugElement
            .query(platform_browser_1.By.directive(simple_component_component_1.SimpleComponent))
            .componentInstance;
        expect(mockedComponent.someInput).toEqual('hi');
        expect(mockedComponent.someInput2).toEqual('bye');
    });
    it('has no issues with multiple decorators on an input', function () {
        fixture.detectChanges();
        var mockedComponent = fixture.debugElement
            .query(platform_browser_1.By.directive(simple_component_component_1.SimpleComponent));
        expect(mockedComponent.componentInstance.someInput3).toEqual(true);
    });
    it('should trigger output bound behavior', function () {
        fixture.detectChanges();
        var mockedComponent = fixture.debugElement
            .query(platform_browser_1.By.directive(simple_component_component_1.SimpleComponent))
            .componentInstance;
        mockedComponent.someOutput1.emit('hi');
        expect(component.emitted).toEqual('hi');
    });
    it('should trigger output bound behavior for extended outputs', function () {
        fixture.detectChanges();
        var mockedComponent = fixture.debugElement
            .query(platform_browser_1.By.directive(simple_component_component_1.SimpleComponent))
            .componentInstance;
        mockedComponent.someOutput2.emit('hi');
        expect(component.emitted).toEqual('hi');
    });
    it('the mock should have an ng-content body', function () {
        fixture.detectChanges();
        var mockedComponent = fixture.debugElement.query(platform_browser_1.By.css('#ng-content-component'));
        expect(mockedComponent.nativeElement.innerText).toContain('doh');
    });
    it('should give each instance of a mocked component its own event emitter', function () {
        var mockedComponents = fixture.debugElement
            .queryAll(platform_browser_1.By.directive(simple_component_component_1.SimpleComponent));
        var mockedComponent1 = mockedComponents[0].componentInstance;
        var mockedComponent2 = mockedComponents[1].componentInstance;
        expect(mockedComponent1.someOutput1).not.toEqual(mockedComponent2.someOutput1);
    });
    it('should work with components w/o inputs or outputs', function () {
        var mockedComponent = fixture.debugElement
            .query(platform_browser_1.By.directive(empty_component_component_1.EmptyComponent));
        expect(mockedComponent).not.toBeNull();
    });
    it('should allow ngModel bindings', function () {
        var mockedComponent = fixture.debugElement.query(platform_browser_1.By.css('#ngmodel-component'));
        expect(mockedComponent).not.toBeNull();
    });
    it('should memoize the return value by argument', function () {
        expect(mock_component_1.MockComponent(empty_component_component_1.EmptyComponent)).toBe(mock_component_1.MockComponent(empty_component_component_1.EmptyComponent));
        expect(mock_component_1.MockComponent(simple_component_component_1.SimpleComponent)).toBe(mock_component_1.MockComponent(simple_component_component_1.SimpleComponent));
        expect(mock_component_1.MockComponent(empty_component_component_1.EmptyComponent)).not.toBe(mock_component_1.MockComponent(simple_component_component_1.SimpleComponent));
    });
    it('should set ViewChild components correctly', function () {
        fixture.detectChanges();
        expect(component.childComponent).toBeTruthy();
    });
    it('should allow spying of viewchild component methods', function () {
        var spy = spyOn(component.childComponent, 'performAction');
        component.performActionOnChild('test');
        expect(spy).toHaveBeenCalledWith('test');
    });
    describe('ReactiveForms - ControlValueAccessor', function () {
        it('should allow you simulate the component being touched', function () {
            fixture.detectChanges();
            var customFormControl = fixture.debugElement.query(platform_browser_1.By.css('custom-form-control')).componentInstance;
            customFormControl.__simulateTouch();
            expect(component.formControl.touched).toBe(true);
        });
        it('should allow you simulate a value being set', function () {
            fixture.detectChanges();
            var customFormControl = fixture.debugElement.query(platform_browser_1.By.css('custom-form-control')).componentInstance;
            customFormControl.__simulateChange('foo');
            expect(component.formControl.value).toBe('foo');
        });
    });
    describe('NgTemplateOutlet', function () {
        it('renders all @ContentChild properties and ngContent in wrappers too', function () {
            var block1;
            var block2;
            var block3;
            fixture.detectChanges();
            var templateOutlet = fixture.debugElement.query(platform_browser_1.By.css('#element-with-content-and-template'));
            expect(templateOutlet).toBeTruthy();
            var ngContent = templateOutlet;
            expect(ngContent).toBeTruthy();
            expect(ngContent.nativeElement.innerText.trim()).toEqual('ng-content body header ng-content body footer');
            block1 = templateOutlet.query(platform_browser_1.By.css('[data-key="block1"]'));
            expect(block1).toBeFalsy();
            templateOutlet.componentInstance.__render('block1');
            block1 = templateOutlet.query(platform_browser_1.By.css('[data-key="block1"]'));
            expect(block1).toBeTruthy();
            expect(block1.nativeElement.innerText.trim()).toEqual('block 1 body');
            block2 = templateOutlet.query(platform_browser_1.By.css('[data-key="block2"]'));
            expect(block2).toBeFalsy();
            templateOutlet.componentInstance.__render('block2');
            block2 = templateOutlet.query(platform_browser_1.By.css('[data-key="block2"]'));
            expect(block2).toBeTruthy();
            expect(block2.nativeElement.innerText.trim()).toEqual('block 2 body');
            block3 = templateOutlet.query(platform_browser_1.By.css('[data-key="block3"]'));
            expect(block3).toBeFalsy();
            templateOutlet.componentInstance.__render('block3');
            fixture.detectChanges();
            block3 = templateOutlet.query(platform_browser_1.By.css('[data-key="block3"]'));
            expect(block3).toBeTruthy();
            expect(block3.nativeElement.innerText.trim()).toEqual('');
        });
        it('renders nothing if no @ContentChild in component and ng-content is empty', function () {
            fixture.detectChanges();
            var templateOutlet = fixture.debugElement.query(platform_browser_1.By.css('#element-without-content-and-template'));
            expect(templateOutlet).toBeTruthy();
            expect(templateOutlet.nativeElement.innerHTML).toBeFalsy();
        });
        it('renders ng-content without wrapper if no @ContentChild in component', function () {
            fixture.detectChanges();
            var templateOutlet = fixture.debugElement.query(platform_browser_1.By.css('#element-with-content-only'));
            expect(templateOutlet).toBeTruthy();
            expect(templateOutlet.nativeElement.innerHTML.trim())
                .toEqual('child of element-with-content-only');
        });
    });
});
//# sourceMappingURL=mock-component.spec.js.map