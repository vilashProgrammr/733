"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var common_1 = require("../common");
var reflect_1 = require("../common/reflect");
var cache = new Map();
function MockComponents() {
    var components = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
    }
    return components.map(function (component) { return MockComponent(component, undefined); });
}
exports.MockComponents = MockComponents;
function MockComponent(component, metaData) {
    var cacheHit = cache.get(component);
    if (cacheHit) {
        return cacheHit;
    }
    var _a = metaData || reflect_1.directiveResolver.resolve(component), exportAs = _a.exportAs, inputs = _a.inputs, outputs = _a.outputs, queries = _a.queries, selector = _a.selector;
    var template = "<ng-content></ng-content>";
    var viewChildRefs = new Map();
    if (queries) {
        var queriesKeys = Object.keys(queries);
        var templateQueries = queriesKeys
            .map(function (key) {
            var query = queries[key];
            if (query.isViewQuery) {
                return '';
            }
            if (typeof query.selector !== 'string') {
                return '';
            }
            viewChildRefs.set(query.selector, key);
            queries["__mockView_" + key] = new core_1.ViewChild("__" + query.selector, {
                read: core_1.ViewContainerRef,
                static: query.static
            });
            return "\n          <div *ngIf=\"mockRender_" + query.selector + "\" data-key=\"" + query.selector + "\">\n            <ng-template #__" + query.selector + "></ng-template>\n          </div>\n        ";
        }).join('');
        if (templateQueries) {
            template = "\n        " + template + "\n        " + templateQueries + "\n      ";
        }
    }
    var options = {
        exportAs: exportAs,
        inputs: inputs,
        outputs: outputs,
        providers: [{
                multi: true,
                provide: forms_1.NG_VALUE_ACCESSOR,
                useExisting: core_1.forwardRef(function () { return ComponentMock; })
            },
            {
                provide: component,
                useExisting: core_1.forwardRef(function () { return ComponentMock; })
            }],
        queries: queries,
        selector: selector,
        template: template,
    };
    var ComponentMock = (function () {
        function ComponentMock(changeDetector) {
            var _this = this;
            this.__simulateChange = function (param) { };
            this.__simulateTouch = function () { };
            this.writeValue = function (value) { };
            Object.keys(component.prototype).forEach(function (method) {
                if (!_this[method]) {
                    _this[method] = function () { };
                }
            });
            (options.outputs || []).forEach(function (output) {
                _this[output.split(':')[0]] = new core_1.EventEmitter();
            });
            this.__hide = function (contentChildSelector) {
                var key = viewChildRefs.get(contentChildSelector);
                if (key) {
                    _this["mockRender_" + contentChildSelector] = false;
                    changeDetector.detectChanges();
                }
            };
            this.__render = function (contentChildSelector, $implicit, variables) {
                var key = viewChildRefs.get(contentChildSelector);
                var templateRef;
                var viewContainer;
                if (key) {
                    _this["mockRender_" + contentChildSelector] = true;
                    changeDetector.detectChanges();
                    viewContainer = _this["__mockView_" + key];
                    templateRef = _this[key];
                    if (viewContainer && templateRef) {
                        viewContainer.clear();
                        viewContainer.createEmbeddedView(templateRef, __assign({}, variables, { $implicit: $implicit }));
                    }
                }
            };
        }
        ComponentMock.prototype.registerOnChange = function (fn) {
            this.__simulateChange = fn;
        };
        ComponentMock.prototype.registerOnTouched = function (fn) {
            this.__simulateTouch = fn;
        };
        ComponentMock = __decorate([
            common_1.MockOf(component),
            __metadata("design:paramtypes", [core_1.ChangeDetectorRef])
        ], ComponentMock);
        return ComponentMock;
    }());
    var mockedComponent = core_1.Component(options)(ComponentMock);
    cache.set(component, mockedComponent);
    return mockedComponent;
}
exports.MockComponent = MockComponent;
//# sourceMappingURL=mock-component.js.map