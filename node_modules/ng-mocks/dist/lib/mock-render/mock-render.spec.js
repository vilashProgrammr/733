"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var createSpy = jasmine.createSpy;
var testing_1 = require("@angular/core/testing");
var platform_browser_1 = require("@angular/platform-browser");
var mock_render_1 = require("./mock-render");
var mock_render_fixtures_1 = require("./mock-render.fixtures");
describe('MockRender', function () {
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            declarations: [
                mock_render_fixtures_1.RenderRealComponent
            ]
        });
    });
    it('renders any template and respects dynamic params', function () {
        var spy = createSpy('mockClick');
        var assertPayload = {
            magic: Math.random(),
        };
        var fixture = mock_render_1.MockRender("\n        before\n        <render-real-component (click)=\"mockClick($event)\" [content]=\"mockContent\"></render-real-component>\n        after\n      ", {
            mockClick: spy,
            mockContent: 'injected content'
        });
        expect(fixture).toBeTruthy();
        expect(fixture.nativeElement.innerText).toEqual("before injected content after");
        fixture.componentInstance.mockContent = 'dynamic content';
        fixture.detectChanges();
        expect(fixture.nativeElement.innerText).toEqual("before dynamic content after");
        var spanElement = fixture.debugElement.query(platform_browser_1.By.css('render-real-component span'));
        expect(spanElement).toBeTruthy();
        spanElement.triggerEventHandler('click', assertPayload);
        expect(spy).toHaveBeenCalledWith(assertPayload);
    });
});
//# sourceMappingURL=mock-render.spec.js.map