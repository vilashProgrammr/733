"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var testing_1 = require("@angular/core/testing");
var forms_1 = require("@angular/forms");
var platform_browser_1 = require("@angular/platform-browser");
var ng_mocks_1 = require("ng-mocks");
var mock_directive_1 = require("./mock-directive");
var ExampleDirective = (function () {
    function ExampleDirective() {
        this.someOutput = new core_1.EventEmitter();
    }
    ExampleDirective.prototype.performAction = function (s) {
        return this;
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], ExampleDirective.prototype, "exampleDirective", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", Object)
    ], ExampleDirective.prototype, "someOutput", void 0);
    __decorate([
        core_1.Input('bah'),
        __metadata("design:type", String)
    ], ExampleDirective.prototype, "something", void 0);
    ExampleDirective = __decorate([
        core_1.Directive({
            exportAs: 'foo',
            selector: '[exampleDirective]'
        })
    ], ExampleDirective);
    return ExampleDirective;
}());
exports.ExampleDirective = ExampleDirective;
var ExampleStructuralDirective = (function () {
    function ExampleStructuralDirective() {
        this.exampleStructuralDirective = true;
    }
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], ExampleStructuralDirective.prototype, "exampleStructuralDirective", void 0);
    ExampleStructuralDirective = __decorate([
        core_1.Directive({
            selector: '[exampleStructuralDirective]'
        })
    ], ExampleStructuralDirective);
    return ExampleStructuralDirective;
}());
exports.ExampleStructuralDirective = ExampleStructuralDirective;
var ExampleComponentContainer = (function () {
    function ExampleComponentContainer() {
        this.emitted = false;
        this.foo = new forms_1.FormControl('');
    }
    ExampleComponentContainer.prototype.performActionOnChild = function (s) {
        this.childDirective.performAction(s);
    };
    __decorate([
        core_1.ViewChild(ExampleDirective, { static: false }),
        __metadata("design:type", ExampleDirective)
    ], ExampleComponentContainer.prototype, "childDirective", void 0);
    ExampleComponentContainer = __decorate([
        core_1.Component({
            selector: 'example-component-container',
            template: "\n    <div [exampleDirective]=\"'bye'\" [bah]=\"'hi'\" #f=\"foo\" (someOutput)=\"emitted = $event\"></div>\n    <div exampleDirective></div>\n    <div id=\"example-structural-directive\" *exampleStructuralDirective=\"true\">\n      hi\n    </div>\n    <input [formControl]=\"fooControl\"/>\n  "
        })
    ], ExampleComponentContainer);
    return ExampleComponentContainer;
}());
exports.ExampleComponentContainer = ExampleComponentContainer;
describe('MockDirective', function () {
    var component;
    var fixture;
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            declarations: [
                ExampleComponentContainer,
                mock_directive_1.MockDirective(forms_1.FormControlDirective),
                mock_directive_1.MockDirective(ExampleDirective),
                mock_directive_1.MockDirective(ExampleStructuralDirective)
            ]
        })
            .compileComponents();
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(ExampleComponentContainer);
        component = fixture.componentInstance;
        fixture.detectChanges();
    });
    it('should have use the original component\'s selector', function () {
        var element = fixture.debugElement.query(platform_browser_1.By.directive(ExampleDirective));
        expect(element).not.toBeNull();
    });
    it('should have the input set on the mock component', function () {
        var debugElement = fixture.debugElement.query(platform_browser_1.By.directive(ExampleDirective));
        var element = debugElement.injector.get(ExampleDirective);
        expect(element.something).toEqual('hi');
        expect(element.exampleDirective).toEqual('bye');
    });
    it('triggers output bound behavior for extended outputs', function () {
        var debugElement = fixture.debugElement.query(platform_browser_1.By.directive(ExampleDirective));
        var element = debugElement.injector.get(ExampleDirective);
        element.someOutput.emit(true);
        expect(component.emitted).toEqual(true);
    });
    it('should memoize the return value by argument', function () {
        expect(mock_directive_1.MockDirective(ExampleDirective)).toEqual(mock_directive_1.MockDirective(ExampleDirective));
        expect(mock_directive_1.MockDirective(ExampleDirective)).not.toEqual(ExampleDirective);
    });
    it('can mock formControlDirective from angular', function () {
        var debugElement = fixture.debugElement.query(platform_browser_1.By.directive(ExampleDirective));
        expect(debugElement).not.toBeNull();
    });
    it('should display structural directive content', function () {
        var mockedDirective = ng_mocks_1.MockHelper
            .findDirective(fixture.debugElement, ExampleStructuralDirective);
        mockedDirective.__render();
        fixture.detectChanges();
        expect(mockedDirective.exampleStructuralDirective).toBeTruthy();
        var debugElement = fixture.debugElement.query(platform_browser_1.By.css('#example-structural-directive'));
        expect(debugElement.nativeElement.innerHTML).toContain('hi');
    });
    it('should set ViewChild directives correctly', function () {
        fixture.detectChanges();
        expect(component.childDirective).toBeTruthy();
    });
    it('should allow spying of viewchild directive methods', function () {
        var spy = spyOn(component.childDirective, 'performAction');
        component.performActionOnChild('test');
        expect(spy).toHaveBeenCalledWith('test');
    });
});
//# sourceMappingURL=mock-directive.spec.js.map