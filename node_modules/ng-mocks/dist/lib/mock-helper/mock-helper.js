"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function nestedCheck(result, node, callback) {
    var element = callback(node);
    if (element) {
        result.push(element);
    }
    var childNodes = node.childNodes ? node.childNodes : [];
    childNodes.forEach(function (childNode) {
        nestedCheck(result, childNode, callback);
    });
}
exports.MockHelper = {
    getDirective: function (debugNode, directive) {
        try {
            return debugNode.injector.get(directive);
        }
        catch (error) {
        }
        if (!debugNode || !debugNode.parent) {
            return undefined;
        }
        var prevNode = debugNode.nativeNode.previousSibling;
        if (!prevNode || prevNode.nodeName !== '#comment') {
            return undefined;
        }
        var matches = debugNode.parent.queryAllNodes(function (node) { return node.nativeNode === prevNode; });
        if (matches.length === 0) {
            return undefined;
        }
        var matchedNode = matches[0];
        try {
            return matchedNode.injector.get(directive);
        }
        catch (error) {
            return undefined;
        }
    },
    findDirective: function (debugNode, directive) {
        var result = [];
        nestedCheck(result, debugNode, function (node) {
            try {
                return node.injector.get(directive);
            }
            catch (error) {
                return undefined;
            }
        });
        return result.length ? result[0] : undefined;
    },
    findDirectives: function (debugNode, directive) {
        var result = [];
        nestedCheck(result, debugNode, function (node) {
            try {
                return node.injector.get(directive);
            }
            catch (error) {
                return undefined;
            }
        });
        return result;
    }
};
//# sourceMappingURL=mock-helper.js.map