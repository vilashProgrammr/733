(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@ngx-translate/i18n-polyfill', ['exports', '@angular/common', '@angular/core'], factory) :
    (factory((global['ngx-translate'] = global['ngx-translate'] || {}, global['ngx-translate']['i18n-polyfill'] = {}),global.ng.common,global.ng.core));
}(this, (function (exports,common,core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p]; };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Text = (function () {
        function Text(value, sourceSpan) {
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
        Text.prototype.visit = /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitText(this, context);
            };
        return Text;
    }());
    var Expansion = (function () {
        function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
            this.switchValue = switchValue;
            this.type = type;
            this.cases = cases;
            this.sourceSpan = sourceSpan;
            this.switchValueSourceSpan = switchValueSourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
        Expansion.prototype.visit = /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitExpansion(this, context);
            };
        return Expansion;
    }());
    var ExpansionCase = (function () {
        function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
            this.value = value;
            this.expression = expression;
            this.sourceSpan = sourceSpan;
            this.valueSourceSpan = valueSourceSpan;
            this.expSourceSpan = expSourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
        ExpansionCase.prototype.visit = /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitExpansionCase(this, context);
            };
        return ExpansionCase;
    }());
    var Attribute = (function () {
        function Attribute(name, value, sourceSpan, valueSpan) {
            this.name = name;
            this.value = value;
            this.sourceSpan = sourceSpan;
            this.valueSpan = valueSpan;
        }
        /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
        Attribute.prototype.visit = /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitAttribute(this, context);
            };
        return Attribute;
    }());
    var Element = (function () {
        function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
            if (startSourceSpan === void 0) {
                startSourceSpan = null;
            }
            if (endSourceSpan === void 0) {
                endSourceSpan = null;
            }
            this.name = name;
            this.attrs = attrs;
            this.children = children;
            this.sourceSpan = sourceSpan;
            this.startSourceSpan = startSourceSpan;
            this.endSourceSpan = endSourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
        Element.prototype.visit = /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitElement(this, context);
            };
        return Element;
    }());
    var Comment = (function () {
        function Comment(value, sourceSpan) {
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
        Comment.prototype.visit = /**
         * @param {?} visitor
         * @param {?} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitComment(this, context);
            };
        return Comment;
    }());
    /**
     * @param {?} visitor
     * @param {?} nodes
     * @param {?=} context
     * @return {?}
     */
    function visitAll(visitor, nodes, context) {
        if (context === void 0) {
            context = null;
        }
        var /** @type {?} */ result = [];
        var /** @type {?} */ visit = visitor.visit
            ? function (ast) { return ((visitor.visit))(ast, context) || ast.visit(visitor, context); }
            : function (ast) { return ast.visit(visitor, context); };
        nodes.forEach(function (ast) {
            var /** @type {?} */ astResult = visit(ast);
            if (astResult) {
                result.push(astResult);
            }
        });
        return result;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var Message = (function () {
        /**
         * @param source message AST
         * @param placeholders maps placeholder names to static content
         * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
         * @param meaning
         * @param description
         * @param id
         */
        function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {
            this.nodes = nodes;
            this.placeholders = placeholders;
            this.placeholderToMessage = placeholderToMessage;
            this.meaning = meaning;
            this.description = description;
            this.id = id;
            if (nodes.length) {
                this.sources = [
                    {
                        filePath: nodes[0].sourceSpan.start.file.url,
                        startLine: nodes[0].sourceSpan.start.line + 1,
                        startCol: nodes[0].sourceSpan.start.col + 1,
                        endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,
                        endCol: nodes[0].sourceSpan.start.col + 1
                    }
                ];
            }
            else {
                this.sources = [];
            }
        }
        return Message;
    }());
    var Text$1 = (function () {
        function Text(value, sourceSpan) {
            this.value = value;
            this.sourceSpan = sourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        Text.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitText(this, context);
            };
        return Text;
    }());
    var Container = (function () {
        function Container(children, sourceSpan) {
            this.children = children;
            this.sourceSpan = sourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        Container.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitContainer(this, context);
            };
        return Container;
    }());
    var Icu = (function () {
        function Icu(expression, type, cases, sourceSpan) {
            this.expression = expression;
            this.type = type;
            this.cases = cases;
            this.sourceSpan = sourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        Icu.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitIcu(this, context);
            };
        return Icu;
    }());
    var TagPlaceholder = (function () {
        function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
            this.tag = tag;
            this.attrs = attrs;
            this.startName = startName;
            this.closeName = closeName;
            this.children = children;
            this.isVoid = isVoid;
            this.sourceSpan = sourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        TagPlaceholder.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitTagPlaceholder(this, context);
            };
        return TagPlaceholder;
    }());
    var Placeholder = (function () {
        function Placeholder(value, name, sourceSpan) {
            this.value = value;
            this.name = name;
            this.sourceSpan = sourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        Placeholder.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitPlaceholder(this, context);
            };
        return Placeholder;
    }());
    var IcuPlaceholder = (function () {
        function IcuPlaceholder(value, name, sourceSpan) {
            this.value = value;
            this.name = name;
            this.sourceSpan = sourceSpan;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        IcuPlaceholder.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                return visitor.visitIcuPlaceholder(this, context);
            };
        return IcuPlaceholder;
    }());
    var RecurseVisitor = (function () {
        function RecurseVisitor() {
        }
        /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
        RecurseVisitor.prototype.visitText = /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
            function (text, context) { };
        /**
         * @param {?} container
         * @param {?=} context
         * @return {?}
         */
        RecurseVisitor.prototype.visitContainer = /**
         * @param {?} container
         * @param {?=} context
         * @return {?}
         */
            function (container, context) {
                var _this = this;
                container.children.forEach(function (child) { return child.visit(_this); });
            };
        /**
         * @param {?} icu
         * @param {?=} context
         * @return {?}
         */
        RecurseVisitor.prototype.visitIcu = /**
         * @param {?} icu
         * @param {?=} context
         * @return {?}
         */
            function (icu, context) {
                var _this = this;
                Object.keys(icu.cases).forEach(function (k) {
                    icu.cases[k].visit(_this);
                });
            };
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        RecurseVisitor.prototype.visitTagPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) {
                var _this = this;
                ph.children.forEach(function (child) { return child.visit(_this); });
            };
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        RecurseVisitor.prototype.visitPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) { };
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        RecurseVisitor.prototype.visitIcuPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) { };
        return RecurseVisitor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Text$2 = (function () {
        function Text(value) {
            this.value = value;
        }
        /**
         * @param {?} visitor
         * @return {?}
         */
        Text.prototype.visit = /**
         * @param {?} visitor
         * @return {?}
         */
            function (visitor) {
                return visitor.visitText(this);
            };
        return Text;
    }());
    var CR = (function (_super) {
        __extends(CR, _super);
        function CR(ws) {
            if (ws === void 0) {
                ws = 0;
            }
            return _super.call(this, "\n" + new Array(ws + 1).join(" ")) || this;
        }
        return CR;
    }(Text$2));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */ ParseLocation = (function () {
        function ParseLocation(file, offset, line, col) {
            this.file = file;
            this.offset = offset;
            this.line = line;
            this.col = col;
        }
        /**
         * @return {?}
         */
        ParseLocation.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.offset != null ? this.line + ":" + this.col : "";
            };
        // Return the source around the location
        // Up to `maxChars` or `maxLines` on each side of the location
        /**
         * @param {?} maxChars
         * @param {?} maxLines
         * @return {?}
         */
        ParseLocation.prototype.getContext = /**
         * @param {?} maxChars
         * @param {?} maxLines
         * @return {?}
         */
            function (maxChars, maxLines) {
                var /** @type {?} */ content = this.file.content;
                var /** @type {?} */ startOffset = this.offset;
                if (startOffset != null) {
                    if (startOffset > content.length - 1) {
                        startOffset = content.length - 1;
                    }
                    var /** @type {?} */ endOffset = startOffset;
                    var /** @type {?} */ ctxChars = 0;
                    var /** @type {?} */ ctxLines = 0;
                    while (ctxChars < maxChars && startOffset > 0) {
                        startOffset--;
                        ctxChars++;
                        if (content[startOffset] === "\n") {
                            if (++ctxLines === maxLines) {
                                break;
                            }
                        }
                    }
                    ctxChars = 0;
                    ctxLines = 0;
                    while (ctxChars < maxChars && endOffset < content.length - 1) {
                        endOffset++;
                        ctxChars++;
                        if (content[endOffset] === "\n") {
                            if (++ctxLines === maxLines) {
                                break;
                            }
                        }
                    }
                    return {
                        before: content.substring(startOffset, this.offset),
                        after: content.substring(this.offset, endOffset + 1)
                    };
                }
                return null;
            };
        return ParseLocation;
    }());
    var ParseSourceFile = (function () {
        function ParseSourceFile(content, url) {
            if (url === void 0) {
                url = "";
            }
            this.content = content;
            this.url = url;
        }
        return ParseSourceFile;
    }());
    var ParseSourceSpan = (function () {
        function ParseSourceSpan(start, end, details) {
            if (details === void 0) {
                details = null;
            }
            this.start = start;
            this.end = end;
            this.details = details;
        }
        /**
         * @return {?}
         */
        ParseSourceSpan.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.start.file.content.substring(this.start.offset, this.end.offset);
            };
        return ParseSourceSpan;
    }());
    /** @enum {number} */
    var ParseErrorLevel = {
        WARNING: 0,
        ERROR: 1,
    };
    ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING";
    ParseErrorLevel[ParseErrorLevel.ERROR] = "ERROR";
    var ParseError = (function () {
        function ParseError(span, msg, level) {
            if (level === void 0) {
                level = ParseErrorLevel.ERROR;
            }
            this.span = span;
            this.msg = msg;
            this.level = level;
        }
        /**
         * @return {?}
         */
        ParseError.prototype.contextualMessage = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ ctx = this.span.start.getContext(100, 3);
                return ctx ? " (\"" + ctx.before + "[" + ParseErrorLevel[this.level] + " ->]" + ctx.after + "\")" : "";
            };
        /**
         * @return {?}
         */
        ParseError.prototype.toString = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ details = this.span.details ? ", " + this.span.details : "";
                return "" + this.msg + this.contextualMessage() + ": " + this.span.start + details;
            };
        return ParseError;
    }());
    /**
     * An i18n error.
     */
    var /**
     * An i18n error.
     */ I18nError = (function (_super) {
        __extends(I18nError, _super);
        function I18nError(span, msg) {
            return _super.call(this, span, msg) || this;
        }
        return I18nError;
    }(ParseError));
    /**
     * @param {?} s
     * @return {?}
     */
    function escapeRegExp(s) {
        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var InterpolationConfig = (function () {
        function InterpolationConfig(start, end) {
            this.start = start;
            this.end = end;
        }
        return InterpolationConfig;
    }());
    var /** @type {?} */ DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig("{{", "}}");

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var /** @type {?} */ $EOF = 0;
    var /** @type {?} */ $TAB = 9;
    var /** @type {?} */ $LF = 10;
    var /** @type {?} */ $VTAB = 11;
    var /** @type {?} */ $FF = 12;
    var /** @type {?} */ $CR = 13;
    var /** @type {?} */ $SPACE = 32;
    var /** @type {?} */ $BANG = 33;
    var /** @type {?} */ $DQ = 34;
    var /** @type {?} */ $HASH = 35;
    var /** @type {?} */ $$ = 36;
    var /** @type {?} */ $PERCENT = 37;
    var /** @type {?} */ $AMPERSAND = 38;
    var /** @type {?} */ $SQ = 39;
    var /** @type {?} */ $LPAREN = 40;
    var /** @type {?} */ $RPAREN = 41;
    var /** @type {?} */ $STAR = 42;
    var /** @type {?} */ $PLUS = 43;
    var /** @type {?} */ $COMMA = 44;
    var /** @type {?} */ $MINUS = 45;
    var /** @type {?} */ $PERIOD = 46;
    var /** @type {?} */ $SLASH = 47;
    var /** @type {?} */ $COLON = 58;
    var /** @type {?} */ $SEMICOLON = 59;
    var /** @type {?} */ $LT = 60;
    var /** @type {?} */ $EQ = 61;
    var /** @type {?} */ $GT = 62;
    var /** @type {?} */ $QUESTION = 63;
    var /** @type {?} */ $0 = 48;
    var /** @type {?} */ $9 = 57;
    var /** @type {?} */ $A = 65;
    var /** @type {?} */ $E = 69;
    var /** @type {?} */ $F = 70;
    var /** @type {?} */ $X = 88;
    var /** @type {?} */ $Z = 90;
    var /** @type {?} */ $LBRACKET = 91;
    var /** @type {?} */ $BACKSLASH = 92;
    var /** @type {?} */ $RBRACKET = 93;
    var /** @type {?} */ $CARET = 94;
    var /** @type {?} */ $_ = 95;
    var /** @type {?} */ $a = 97;
    var /** @type {?} */ $e = 101;
    var /** @type {?} */ $f = 102;
    var /** @type {?} */ $n = 110;
    var /** @type {?} */ $r = 114;
    var /** @type {?} */ $t = 116;
    var /** @type {?} */ $u = 117;
    var /** @type {?} */ $v = 118;
    var /** @type {?} */ $x = 120;
    var /** @type {?} */ $z = 122;
    var /** @type {?} */ $LBRACE = 123;
    var /** @type {?} */ $BAR = 124;
    var /** @type {?} */ $RBRACE = 125;
    var /** @type {?} */ $NBSP = 160;
    var /** @type {?} */ $BT = 96;
    /**
     * @param {?} code
     * @return {?}
     */
    function isWhitespace(code) {
        return (code >= $TAB && code <= $SPACE) || code === $NBSP;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isDigit(code) {
        return $0 <= code && code <= $9;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isAsciiLetter(code) {
        return (code >= $a && code <= $z) || (code >= $A && code <= $Z);
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isAsciiHexDigit(code) {
        return (code >= $a && code <= $f) || (code >= $A && code <= $F) || isDigit(code);
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /** @enum {number} */
    var TagContentType = {
        RAW_TEXT: 0,
        ESCAPABLE_RAW_TEXT: 1,
        PARSABLE_DATA: 2,
    };
    TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT";
    TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
    TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";
    /**
     * @param {?} elementName
     * @return {?}
     */
    function splitNsName(elementName) {
        if (elementName[0] !== ":") {
            return [null, elementName];
        }
        var /** @type {?} */ colonIndex = elementName.indexOf(":", 1);
        if (colonIndex === -1) {
            throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
        }
        return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
    }
    /**
     * @param {?} tagName
     * @return {?}
     */
    function isNgContainer(tagName) {
        return splitNsName(tagName)[1] === "ng-container";
    }
    /**
     * @param {?} fullName
     * @return {?}
     */
    function getNsPrefix(fullName) {
        return fullName === null ? null : splitNsName(fullName)[0];
    }
    /**
     * @param {?} prefix
     * @param {?} localName
     * @return {?}
     */
    function mergeNsAndName(prefix, localName) {
        return prefix ? ":" + prefix + ":" + localName : localName;
    }
    // see http://www.w3.org/TR/html51/syntax.html#named-character-references
    // see https://html.spec.whatwg.org/multipage/entities.json
    // This list is not exhaustive to keep the compiler footprint low.
    // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not
    // exist.
    var /** @type {?} */ NAMED_ENTITIES = {
        Aacute: "\u00C1",
        aacute: "\u00E1",
        Acirc: "\u00C2",
        acirc: "\u00E2",
        acute: "\u00B4",
        AElig: "\u00C6",
        aelig: "\u00E6",
        Agrave: "\u00C0",
        agrave: "\u00E0",
        alefsym: "\u2135",
        Alpha: "\u0391",
        alpha: "\u03B1",
        amp: "&",
        and: "\u2227",
        ang: "\u2220",
        apos: "\u0027",
        Aring: "\u00C5",
        aring: "\u00E5",
        asymp: "\u2248",
        Atilde: "\u00C3",
        atilde: "\u00E3",
        Auml: "\u00C4",
        auml: "\u00E4",
        bdquo: "\u201E",
        Beta: "\u0392",
        beta: "\u03B2",
        brvbar: "\u00A6",
        bull: "\u2022",
        cap: "\u2229",
        Ccedil: "\u00C7",
        ccedil: "\u00E7",
        cedil: "\u00B8",
        cent: "\u00A2",
        Chi: "\u03A7",
        chi: "\u03C7",
        circ: "\u02C6",
        clubs: "\u2663",
        cong: "\u2245",
        copy: "\u00A9",
        crarr: "\u21B5",
        cup: "\u222A",
        curren: "\u00A4",
        dagger: "\u2020",
        Dagger: "\u2021",
        darr: "\u2193",
        dArr: "\u21D3",
        deg: "\u00B0",
        Delta: "\u0394",
        delta: "\u03B4",
        diams: "\u2666",
        divide: "\u00F7",
        Eacute: "\u00C9",
        eacute: "\u00E9",
        Ecirc: "\u00CA",
        ecirc: "\u00EA",
        Egrave: "\u00C8",
        egrave: "\u00E8",
        empty: "\u2205",
        emsp: "\u2003",
        ensp: "\u2002",
        Epsilon: "\u0395",
        epsilon: "\u03B5",
        equiv: "\u2261",
        Eta: "\u0397",
        eta: "\u03B7",
        ETH: "\u00D0",
        eth: "\u00F0",
        Euml: "\u00CB",
        euml: "\u00EB",
        euro: "\u20AC",
        exist: "\u2203",
        fnof: "\u0192",
        forall: "\u2200",
        frac12: "\u00BD",
        frac14: "\u00BC",
        frac34: "\u00BE",
        frasl: "\u2044",
        Gamma: "\u0393",
        gamma: "\u03B3",
        ge: "\u2265",
        gt: ">",
        harr: "\u2194",
        hArr: "\u21D4",
        hearts: "\u2665",
        hellip: "\u2026",
        Iacute: "\u00CD",
        iacute: "\u00ED",
        Icirc: "\u00CE",
        icirc: "\u00EE",
        iexcl: "\u00A1",
        Igrave: "\u00CC",
        igrave: "\u00EC",
        image: "\u2111",
        infin: "\u221E",
        int: "\u222B",
        Iota: "\u0399",
        iota: "\u03B9",
        iquest: "\u00BF",
        isin: "\u2208",
        Iuml: "\u00CF",
        iuml: "\u00EF",
        Kappa: "\u039A",
        kappa: "\u03BA",
        Lambda: "\u039B",
        lambda: "\u03BB",
        lang: "\u27E8",
        laquo: "\u00AB",
        larr: "\u2190",
        lArr: "\u21D0",
        lceil: "\u2308",
        ldquo: "\u201C",
        le: "\u2264",
        lfloor: "\u230A",
        lowast: "\u2217",
        loz: "\u25CA",
        lrm: "\u200E",
        lsaquo: "\u2039",
        lsquo: "\u2018",
        lt: "<",
        macr: "\u00AF",
        mdash: "\u2014",
        micro: "\u00B5",
        middot: "\u00B7",
        minus: "\u2212",
        Mu: "\u039C",
        mu: "\u03BC",
        nabla: "\u2207",
        nbsp: "\u00A0",
        ndash: "\u2013",
        ne: "\u2260",
        ni: "\u220B",
        not: "\u00AC",
        notin: "\u2209",
        nsub: "\u2284",
        Ntilde: "\u00D1",
        ntilde: "\u00F1",
        Nu: "\u039D",
        nu: "\u03BD",
        Oacute: "\u00D3",
        oacute: "\u00F3",
        Ocirc: "\u00D4",
        ocirc: "\u00F4",
        OElig: "\u0152",
        oelig: "\u0153",
        Ograve: "\u00D2",
        ograve: "\u00F2",
        oline: "\u203E",
        Omega: "\u03A9",
        omega: "\u03C9",
        Omicron: "\u039F",
        omicron: "\u03BF",
        oplus: "\u2295",
        or: "\u2228",
        ordf: "\u00AA",
        ordm: "\u00BA",
        Oslash: "\u00D8",
        oslash: "\u00F8",
        Otilde: "\u00D5",
        otilde: "\u00F5",
        otimes: "\u2297",
        Ouml: "\u00D6",
        ouml: "\u00F6",
        para: "\u00B6",
        permil: "\u2030",
        perp: "\u22A5",
        Phi: "\u03A6",
        phi: "\u03C6",
        Pi: "\u03A0",
        pi: "\u03C0",
        piv: "\u03D6",
        plusmn: "\u00B1",
        pound: "\u00A3",
        prime: "\u2032",
        Prime: "\u2033",
        prod: "\u220F",
        prop: "\u221D",
        Psi: "\u03A8",
        psi: "\u03C8",
        quot: "\u0022",
        radic: "\u221A",
        rang: "\u27E9",
        raquo: "\u00BB",
        rarr: "\u2192",
        rArr: "\u21D2",
        rceil: "\u2309",
        rdquo: "\u201D",
        real: "\u211C",
        reg: "\u00AE",
        rfloor: "\u230B",
        Rho: "\u03A1",
        rho: "\u03C1",
        rlm: "\u200F",
        rsaquo: "\u203A",
        rsquo: "\u2019",
        sbquo: "\u201A",
        Scaron: "\u0160",
        scaron: "\u0161",
        sdot: "\u22C5",
        sect: "\u00A7",
        shy: "\u00AD",
        Sigma: "\u03A3",
        sigma: "\u03C3",
        sigmaf: "\u03C2",
        sim: "\u223C",
        spades: "\u2660",
        sub: "\u2282",
        sube: "\u2286",
        sum: "\u2211",
        sup: "\u2283",
        sup1: "\u00B9",
        sup2: "\u00B2",
        sup3: "\u00B3",
        supe: "\u2287",
        szlig: "\u00DF",
        Tau: "\u03A4",
        tau: "\u03C4",
        there4: "\u2234",
        Theta: "\u0398",
        theta: "\u03B8",
        thetasym: "\u03D1",
        thinsp: "\u2009",
        THORN: "\u00DE",
        thorn: "\u00FE",
        tilde: "\u02DC",
        times: "\u00D7",
        trade: "\u2122",
        Uacute: "\u00DA",
        uacute: "\u00FA",
        uarr: "\u2191",
        uArr: "\u21D1",
        Ucirc: "\u00DB",
        ucirc: "\u00FB",
        Ugrave: "\u00D9",
        ugrave: "\u00F9",
        uml: "\u00A8",
        upsih: "\u03D2",
        Upsilon: "\u03A5",
        upsilon: "\u03C5",
        Uuml: "\u00DC",
        uuml: "\u00FC",
        weierp: "\u2118",
        Xi: "\u039E",
        xi: "\u03BE",
        Yacute: "\u00DD",
        yacute: "\u00FD",
        yen: "\u00A5",
        yuml: "\u00FF",
        Yuml: "\u0178",
        Zeta: "\u0396",
        zeta: "\u03B6",
        zwj: "\u200D",
        zwnj: "\u200C"
    };
    // The &ngsp; pseudo-entity is denoting a space. see:
    // https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart
    var /** @type {?} */ NGSP_UNICODE = "\uE500";
    NAMED_ENTITIES["ngsp"] = NGSP_UNICODE;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var TokenType = {
        TAG_OPEN_START: 0,
        TAG_OPEN_END: 1,
        TAG_OPEN_END_VOID: 2,
        TAG_CLOSE: 3,
        TEXT: 4,
        ESCAPABLE_RAW_TEXT: 5,
        RAW_TEXT: 6,
        COMMENT_START: 7,
        COMMENT_END: 8,
        CDATA_START: 9,
        CDATA_END: 10,
        ATTR_NAME: 11,
        ATTR_VALUE: 12,
        DOC_TYPE: 13,
        EXPANSION_FORM_START: 14,
        EXPANSION_CASE_VALUE: 15,
        EXPANSION_CASE_EXP_START: 16,
        EXPANSION_CASE_EXP_END: 17,
        EXPANSION_FORM_END: 18,
        EOF: 19,
    };
    TokenType[TokenType.TAG_OPEN_START] = "TAG_OPEN_START";
    TokenType[TokenType.TAG_OPEN_END] = "TAG_OPEN_END";
    TokenType[TokenType.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID";
    TokenType[TokenType.TAG_CLOSE] = "TAG_CLOSE";
    TokenType[TokenType.TEXT] = "TEXT";
    TokenType[TokenType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
    TokenType[TokenType.RAW_TEXT] = "RAW_TEXT";
    TokenType[TokenType.COMMENT_START] = "COMMENT_START";
    TokenType[TokenType.COMMENT_END] = "COMMENT_END";
    TokenType[TokenType.CDATA_START] = "CDATA_START";
    TokenType[TokenType.CDATA_END] = "CDATA_END";
    TokenType[TokenType.ATTR_NAME] = "ATTR_NAME";
    TokenType[TokenType.ATTR_VALUE] = "ATTR_VALUE";
    TokenType[TokenType.DOC_TYPE] = "DOC_TYPE";
    TokenType[TokenType.EXPANSION_FORM_START] = "EXPANSION_FORM_START";
    TokenType[TokenType.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE";
    TokenType[TokenType.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START";
    TokenType[TokenType.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END";
    TokenType[TokenType.EXPANSION_FORM_END] = "EXPANSION_FORM_END";
    TokenType[TokenType.EOF] = "EOF";
    var Token = (function () {
        function Token(type, parts, sourceSpan) {
            this.type = type;
            this.parts = parts;
            this.sourceSpan = sourceSpan;
        }
        return Token;
    }());
    var TokenError = (function (_super) {
        __extends(TokenError, _super);
        function TokenError(errorMsg, tokenType, span) {
            var _this = _super.call(this, span, errorMsg) || this;
            _this.tokenType = tokenType;
            return _this;
        }
        return TokenError;
    }(ParseError));
    var TokenizeResult = (function () {
        function TokenizeResult(tokens, errors) {
            this.tokens = tokens;
            this.errors = errors;
        }
        return TokenizeResult;
    }());
    /**
     * @param {?} source
     * @param {?} url
     * @param {?} getTagDefinition
     * @param {?=} tokenizeExpansionForms
     * @param {?=} interpolationConfig
     * @return {?}
     */
    function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
        if (tokenizeExpansionForms === void 0) {
            tokenizeExpansionForms = false;
        }
        if (interpolationConfig === void 0) {
            interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
        }
        return new Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig).tokenize();
    }
    var /** @type {?} */ _CR_OR_CRLF_REGEXP = /\r\n?/g;
    /**
     * @param {?} charCode
     * @return {?}
     */
    function _unexpectedCharacterErrorMsg(charCode) {
        var /** @type {?} */ char = charCode === $EOF ? "EOF" : String.fromCharCode(charCode);
        return "Unexpected character \"" + char + "\"";
    }
    /**
     * @param {?} entitySrc
     * @return {?}
     */
    function _unknownEntityErrorMsg(entitySrc) {
        return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
    }
    var ControlFlowError = (function () {
        function ControlFlowError(error) {
            this.error = error;
        }
        return ControlFlowError;
    }());
    var Tokenizer = (function () {
        /**
         * @param _file The html source
         * @param _getTagDefinition
         * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
         * @param _interpolationConfig
         */
        function Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
            if (_interpolationConfig === void 0) {
                _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
            }
            this._file = _file;
            this._getTagDefinition = _getTagDefinition;
            this._tokenizeIcu = _tokenizeIcu;
            this._interpolationConfig = _interpolationConfig;
            this._peek = -1;
            this._nextPeek = -1;
            this._index = -1;
            this._line = 0;
            this._column = -1;
            this._expansionCaseStack = [];
            this._inInterpolation = false;
            this.tokens = [];
            this.errors = [];
            this._input = _file.content;
            this._length = _file.content.length;
            this._advance();
        }
        /**
         * @param {?} content
         * @return {?}
         */
        Tokenizer.prototype._processCarriageReturns = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
                // In order to keep the original position in the source, we can not
                // pre-process it.
                // Instead CRs are processed right before instantiating the tokens.
                return content.replace(_CR_OR_CRLF_REGEXP, "\n");
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype.tokenize = /**
         * @return {?}
         */
            function () {
                while (this._peek !== $EOF) {
                    var /** @type {?} */ start = this._getLocation();
                    try {
                        if (this._attemptCharCode($LT)) {
                            if (this._attemptCharCode($BANG)) {
                                if (this._attemptCharCode($LBRACKET)) {
                                    this._consumeCdata(start);
                                }
                                else if (this._attemptCharCode($MINUS)) {
                                    this._consumeComment(start);
                                }
                                else {
                                    this._consumeDocType(start);
                                }
                            }
                            else if (this._attemptCharCode($SLASH)) {
                                this._consumeTagClose(start);
                            }
                            else {
                                this._consumeTagOpen(start);
                            }
                        }
                        else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
                            this._consumeText();
                        }
                    }
                    catch (e) {
                        if (e instanceof ControlFlowError) {
                            this.errors.push(e.error);
                        }
                        else {
                            throw e;
                        }
                    }
                }
                this._beginToken(TokenType.EOF);
                this._endToken([]);
                return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
            };
        /**
         * \@internal
         * @return {?} whether an ICU token has been created
         */
        Tokenizer.prototype._tokenizeExpansionForm = /**
         * \@internal
         * @return {?} whether an ICU token has been created
         */
            function () {
                if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
                    this._consumeExpansionFormStart();
                    return true;
                }
                if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
                    this._consumeExpansionCaseStart();
                    return true;
                }
                if (this._peek === $RBRACE) {
                    if (this._isInExpansionCase()) {
                        this._consumeExpansionCaseEnd();
                        return true;
                    }
                    if (this._isInExpansionForm()) {
                        this._consumeExpansionFormEnd();
                        return true;
                    }
                }
                return false;
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._getLocation = /**
         * @return {?}
         */
            function () {
                return new ParseLocation(this._file, this._index, this._line, this._column);
            };
        /**
         * @param {?=} start
         * @param {?=} end
         * @return {?}
         */
        Tokenizer.prototype._getSpan = /**
         * @param {?=} start
         * @param {?=} end
         * @return {?}
         */
            function (start, end) {
                if (start === void 0) {
                    start = this._getLocation();
                }
                if (end === void 0) {
                    end = this._getLocation();
                }
                return new ParseSourceSpan(start, end);
            };
        /**
         * @param {?} type
         * @param {?=} start
         * @return {?}
         */
        Tokenizer.prototype._beginToken = /**
         * @param {?} type
         * @param {?=} start
         * @return {?}
         */
            function (type, start) {
                if (start === void 0) {
                    start = this._getLocation();
                }
                this._currentTokenStart = start;
                this._currentTokenType = type;
            };
        /**
         * @param {?} parts
         * @param {?=} end
         * @return {?}
         */
        Tokenizer.prototype._endToken = /**
         * @param {?} parts
         * @param {?=} end
         * @return {?}
         */
            function (parts, end) {
                if (end === void 0) {
                    end = this._getLocation();
                }
                var /** @type {?} */ token = new Token(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
                this.tokens.push(token);
                this._currentTokenStart = /** @type {?} */ ((null));
                this._currentTokenType = /** @type {?} */ ((null));
                return token;
            };
        /**
         * @param {?} msg
         * @param {?} span
         * @return {?}
         */
        Tokenizer.prototype._createError = /**
         * @param {?} msg
         * @param {?} span
         * @return {?}
         */
            function (msg, span) {
                if (this._isInExpansionForm()) {
                    msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
                }
                var /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);
                this._currentTokenStart = /** @type {?} */ ((null));
                this._currentTokenType = /** @type {?} */ ((null));
                return new ControlFlowError(error);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._advance = /**
         * @return {?}
         */
            function () {
                if (this._index >= this._length) {
                    throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
                }
                if (this._peek === $LF) {
                    this._line++;
                    this._column = 0;
                }
                else if (this._peek !== $LF && this._peek !== $CR) {
                    this._column++;
                }
                this._index++;
                this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
                this._nextPeek = this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
            };
        /**
         * @param {?} charCode
         * @return {?}
         */
        Tokenizer.prototype._attemptCharCode = /**
         * @param {?} charCode
         * @return {?}
         */
            function (charCode) {
                if (this._peek === charCode) {
                    this._advance();
                    return true;
                }
                return false;
            };
        /**
         * @param {?} charCode
         * @return {?}
         */
        Tokenizer.prototype._attemptCharCodeCaseInsensitive = /**
         * @param {?} charCode
         * @return {?}
         */
            function (charCode) {
                if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
                    this._advance();
                    return true;
                }
                return false;
            };
        /**
         * @param {?} charCode
         * @return {?}
         */
        Tokenizer.prototype._requireCharCode = /**
         * @param {?} charCode
         * @return {?}
         */
            function (charCode) {
                var /** @type {?} */ location = this._getLocation();
                if (!this._attemptCharCode(charCode)) {
                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
                }
            };
        /**
         * @param {?} chars
         * @return {?}
         */
        Tokenizer.prototype._attemptStr = /**
         * @param {?} chars
         * @return {?}
         */
            function (chars) {
                var /** @type {?} */ len = chars.length;
                if (this._index + len > this._length) {
                    return false;
                }
                var /** @type {?} */ initialPosition = this._savePosition();
                for (var /** @type {?} */ i = 0; i < len; i++) {
                    if (!this._attemptCharCode(chars.charCodeAt(i))) {
                        // If attempting to parse the string fails, we want to reset the parser
                        // to where it was before the attempt
                        this._restorePosition(initialPosition);
                        return false;
                    }
                }
                return true;
            };
        /**
         * @param {?} chars
         * @return {?}
         */
        Tokenizer.prototype._attemptStrCaseInsensitive = /**
         * @param {?} chars
         * @return {?}
         */
            function (chars) {
                for (var /** @type {?} */ i = 0; i < chars.length; i++) {
                    if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
                        return false;
                    }
                }
                return true;
            };
        /**
         * @param {?} chars
         * @return {?}
         */
        Tokenizer.prototype._requireStr = /**
         * @param {?} chars
         * @return {?}
         */
            function (chars) {
                var /** @type {?} */ location = this._getLocation();
                if (!this._attemptStr(chars)) {
                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
                }
            };
        /**
         * @param {?} predicate
         * @return {?}
         */
        Tokenizer.prototype._attemptCharCodeUntilFn = /**
         * @param {?} predicate
         * @return {?}
         */
            function (predicate) {
                while (!predicate(this._peek)) {
                    this._advance();
                }
            };
        /**
         * @param {?} predicate
         * @param {?} len
         * @return {?}
         */
        Tokenizer.prototype._requireCharCodeUntilFn = /**
         * @param {?} predicate
         * @param {?} len
         * @return {?}
         */
            function (predicate, len) {
                var /** @type {?} */ start = this._getLocation();
                this._attemptCharCodeUntilFn(predicate);
                if (this._index - start.offset < len) {
                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
                }
            };
        /**
         * @param {?} char
         * @return {?}
         */
        Tokenizer.prototype._attemptUntilChar = /**
         * @param {?} char
         * @return {?}
         */
            function (char) {
                while (this._peek !== char) {
                    this._advance();
                }
            };
        /**
         * @param {?} decodeEntities
         * @return {?}
         */
        Tokenizer.prototype._readChar = /**
         * @param {?} decodeEntities
         * @return {?}
         */
            function (decodeEntities) {
                if (decodeEntities && this._peek === $AMPERSAND) {
                    return this._decodeEntity();
                }
                else {
                    var /** @type {?} */ index = this._index;
                    this._advance();
                    return this._input[index];
                }
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._decodeEntity = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ start = this._getLocation();
                this._advance();
                if (this._attemptCharCode($HASH)) {
                    var /** @type {?} */ isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
                    var /** @type {?} */ numberStart = this._getLocation().offset;
                    this._attemptCharCodeUntilFn(isDigitEntityEnd);
                    if (this._peek !== $SEMICOLON) {
                        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
                    }
                    this._advance();
                    var /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);
                    try {
                        var /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);
                        return String.fromCharCode(charCode);
                    }
                    catch (e) {
                        var /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);
                        throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
                    }
                }
                else {
                    var /** @type {?} */ startPosition = this._savePosition();
                    this._attemptCharCodeUntilFn(isNamedEntityEnd);
                    if (this._peek !== $SEMICOLON) {
                        this._restorePosition(startPosition);
                        return "&";
                    }
                    this._advance();
                    var /** @type {?} */ name_1 = this._input.substring(start.offset + 1, this._index - 1);
                    var /** @type {?} */ char = NAMED_ENTITIES[name_1];
                    if (!char) {
                        throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
                    }
                    return char;
                }
            };
        /**
         * @param {?} decodeEntities
         * @param {?} firstCharOfEnd
         * @param {?} attemptEndRest
         * @return {?}
         */
        Tokenizer.prototype._consumeRawText = /**
         * @param {?} decodeEntities
         * @param {?} firstCharOfEnd
         * @param {?} attemptEndRest
         * @return {?}
         */
            function (decodeEntities, firstCharOfEnd, attemptEndRest) {
                var /** @type {?} */ tagCloseStart;
                var /** @type {?} */ textStart = this._getLocation();
                this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT, textStart);
                var /** @type {?} */ parts = [];
                while (true) {
                    tagCloseStart = this._getLocation();
                    if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
                        break;
                    }
                    if (this._index > tagCloseStart.offset) {
                        // add the characters consumed by the previous if statement to the output
                        parts.push(this._input.substring(tagCloseStart.offset, this._index));
                    }
                    while (this._peek !== firstCharOfEnd) {
                        parts.push(this._readChar(decodeEntities));
                    }
                }
                return this._endToken([this._processCarriageReturns(parts.join(""))], tagCloseStart);
            };
        /**
         * @param {?} start
         * @return {?}
         */
        Tokenizer.prototype._consumeComment = /**
         * @param {?} start
         * @return {?}
         */
            function (start) {
                var _this = this;
                this._beginToken(TokenType.COMMENT_START, start);
                this._requireCharCode($MINUS);
                this._endToken([]);
                var /** @type {?} */ textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr("->"); });
                this._beginToken(TokenType.COMMENT_END, textToken.sourceSpan.end);
                this._endToken([]);
            };
        /**
         * @param {?} start
         * @return {?}
         */
        Tokenizer.prototype._consumeCdata = /**
         * @param {?} start
         * @return {?}
         */
            function (start) {
                var _this = this;
                this._beginToken(TokenType.CDATA_START, start);
                this._requireStr("CDATA[");
                this._endToken([]);
                var /** @type {?} */ textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr("]>"); });
                this._beginToken(TokenType.CDATA_END, textToken.sourceSpan.end);
                this._endToken([]);
            };
        /**
         * @param {?} start
         * @return {?}
         */
        Tokenizer.prototype._consumeDocType = /**
         * @param {?} start
         * @return {?}
         */
            function (start) {
                this._beginToken(TokenType.DOC_TYPE, start);
                this._attemptUntilChar($GT);
                this._advance();
                this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._consumePrefixAndName = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ nameOrPrefixStart = this._index;
                var /** @type {?} */ prefix = ((null));
                while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
                    this._advance();
                }
                var /** @type {?} */ nameStart;
                if (this._peek === $COLON) {
                    this._advance();
                    prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
                    nameStart = this._index;
                }
                else {
                    nameStart = nameOrPrefixStart;
                }
                this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
                var /** @type {?} */ name = this._input.substring(nameStart, this._index);
                return [prefix, name];
            };
        /**
         * @param {?} start
         * @return {?}
         */
        Tokenizer.prototype._consumeTagOpen = /**
         * @param {?} start
         * @return {?}
         */
            function (start) {
                var /** @type {?} */ savedPos = this._savePosition();
                var /** @type {?} */ tagName;
                var /** @type {?} */ lowercaseTagName;
                try {
                    if (!isAsciiLetter(this._peek)) {
                        throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
                    }
                    var /** @type {?} */ nameStart = this._index;
                    this._consumeTagOpenStart(start);
                    tagName = this._input.substring(nameStart, this._index);
                    lowercaseTagName = tagName.toLowerCase();
                    this._attemptCharCodeUntilFn(isNotWhitespace);
                    while (this._peek !== $SLASH && this._peek !== $GT) {
                        this._consumeAttributeName();
                        this._attemptCharCodeUntilFn(isNotWhitespace);
                        if (this._attemptCharCode($EQ)) {
                            this._attemptCharCodeUntilFn(isNotWhitespace);
                            this._consumeAttributeValue();
                        }
                        this._attemptCharCodeUntilFn(isNotWhitespace);
                    }
                    this._consumeTagOpenEnd();
                }
                catch (e) {
                    if (e instanceof ControlFlowError) {
                        // When the start tag is invalid, assume we want a "<"
                        this._restorePosition(savedPos);
                        // Back to back text tokens are merged at the end
                        this._beginToken(TokenType.TEXT, start);
                        this._endToken(["<"]);
                        return;
                    }
                    throw e;
                }
                var /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;
                if (contentTokenType === TagContentType.RAW_TEXT) {
                    this._consumeRawTextWithTagClose(lowercaseTagName, false);
                }
                else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
                    this._consumeRawTextWithTagClose(lowercaseTagName, true);
                }
            };
        /**
         * @param {?} lowercaseTagName
         * @param {?} decodeEntities
         * @return {?}
         */
        Tokenizer.prototype._consumeRawTextWithTagClose = /**
         * @param {?} lowercaseTagName
         * @param {?} decodeEntities
         * @return {?}
         */
            function (lowercaseTagName, decodeEntities) {
                var _this = this;
                var /** @type {?} */ textToken = this._consumeRawText(decodeEntities, $LT, function () {
                    if (!_this._attemptCharCode($SLASH))
                        return false;
                    _this._attemptCharCodeUntilFn(isNotWhitespace);
                    if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
                        return false;
                    _this._attemptCharCodeUntilFn(isNotWhitespace);
                    return _this._attemptCharCode($GT);
                });
                this._beginToken(TokenType.TAG_CLOSE, textToken.sourceSpan.end);
                this._endToken([/** @type {?} */ ((null)), lowercaseTagName]);
            };
        /**
         * @param {?} start
         * @return {?}
         */
        Tokenizer.prototype._consumeTagOpenStart = /**
         * @param {?} start
         * @return {?}
         */
            function (start) {
                this._beginToken(TokenType.TAG_OPEN_START, start);
                var /** @type {?} */ parts = this._consumePrefixAndName();
                this._endToken(parts);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._consumeAttributeName = /**
         * @return {?}
         */
            function () {
                this._beginToken(TokenType.ATTR_NAME);
                var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
                this._endToken(prefixAndName);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._consumeAttributeValue = /**
         * @return {?}
         */
            function () {
                this._beginToken(TokenType.ATTR_VALUE);
                var /** @type {?} */ value;
                if (this._peek === $SQ || this._peek === $DQ) {
                    var /** @type {?} */ quoteChar = this._peek;
                    this._advance();
                    var /** @type {?} */ parts = [];
                    while (this._peek !== quoteChar) {
                        parts.push(this._readChar(true));
                    }
                    value = parts.join("");
                    this._advance();
                }
                else {
                    var /** @type {?} */ valueStart = this._index;
                    this._requireCharCodeUntilFn(isNameEnd, 1);
                    value = this._input.substring(valueStart, this._index);
                }
                this._endToken([this._processCarriageReturns(value)]);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._consumeTagOpenEnd = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ tokenType = this._attemptCharCode($SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;
                this._beginToken(tokenType);
                this._requireCharCode($GT);
                this._endToken([]);
            };
        /**
         * @param {?} start
         * @return {?}
         */
        Tokenizer.prototype._consumeTagClose = /**
         * @param {?} start
         * @return {?}
         */
            function (start) {
                this._beginToken(TokenType.TAG_CLOSE, start);
                this._attemptCharCodeUntilFn(isNotWhitespace);
                var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
                this._attemptCharCodeUntilFn(isNotWhitespace);
                this._requireCharCode($GT);
                this._endToken(prefixAndName);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._consumeExpansionFormStart = /**
         * @return {?}
         */
            function () {
                this._beginToken(TokenType.EXPANSION_FORM_START, this._getLocation());
                this._requireCharCode($LBRACE);
                this._endToken([]);
                this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);
                this._beginToken(TokenType.RAW_TEXT, this._getLocation());
                var /** @type {?} */ condition = this._readUntil($COMMA);
                this._endToken([condition], this._getLocation());
                this._requireCharCode($COMMA);
                this._attemptCharCodeUntilFn(isNotWhitespace);
                this._beginToken(TokenType.RAW_TEXT, this._getLocation());
                var /** @type {?} */ type = this._readUntil($COMMA);
                this._endToken([type], this._getLocation());
                this._requireCharCode($COMMA);
                this._attemptCharCodeUntilFn(isNotWhitespace);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._consumeExpansionCaseStart = /**
         * @return {?}
         */
            function () {
                this._beginToken(TokenType.EXPANSION_CASE_VALUE, this._getLocation());
                var /** @type {?} */ value = this._readUntil($LBRACE).trim();
                this._endToken([value], this._getLocation());
                this._attemptCharCodeUntilFn(isNotWhitespace);
                this._beginToken(TokenType.EXPANSION_CASE_EXP_START, this._getLocation());
                this._requireCharCode($LBRACE);
                this._endToken([], this._getLocation());
                this._attemptCharCodeUntilFn(isNotWhitespace);
                this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._consumeExpansionCaseEnd = /**
         * @return {?}
         */
            function () {
                this._beginToken(TokenType.EXPANSION_CASE_EXP_END, this._getLocation());
                this._requireCharCode($RBRACE);
                this._endToken([], this._getLocation());
                this._attemptCharCodeUntilFn(isNotWhitespace);
                this._expansionCaseStack.pop();
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._consumeExpansionFormEnd = /**
         * @return {?}
         */
            function () {
                this._beginToken(TokenType.EXPANSION_FORM_END, this._getLocation());
                this._requireCharCode($RBRACE);
                this._endToken([]);
                this._expansionCaseStack.pop();
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._consumeText = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ start = this._getLocation();
                this._beginToken(TokenType.TEXT, start);
                var /** @type {?} */ parts = [];
                do {
                    if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
                        parts.push(this._interpolationConfig.start);
                        this._inInterpolation = true;
                    }
                    else if (this._interpolationConfig &&
                        this._inInterpolation &&
                        this._attemptStr(this._interpolationConfig.end)) {
                        parts.push(this._interpolationConfig.end);
                        this._inInterpolation = false;
                    }
                    else {
                        parts.push(this._readChar(true));
                    }
                } while (!this._isTextEnd());
                this._endToken([this._processCarriageReturns(parts.join(""))]);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._isTextEnd = /**
         * @return {?}
         */
            function () {
                if (this._peek === $LT || this._peek === $EOF) {
                    return true;
                }
                if (this._tokenizeIcu && !this._inInterpolation) {
                    if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
                        // start of an expansion form
                        return true;
                    }
                    if (this._peek === $RBRACE && this._isInExpansionCase()) {
                        // end of and expansion case
                        return true;
                    }
                }
                return false;
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._savePosition = /**
         * @return {?}
         */
            function () {
                return [this._peek, this._index, this._column, this._line, this.tokens.length];
            };
        /**
         * @param {?} char
         * @return {?}
         */
        Tokenizer.prototype._readUntil = /**
         * @param {?} char
         * @return {?}
         */
            function (char) {
                var /** @type {?} */ start = this._index;
                this._attemptUntilChar(char);
                return this._input.substring(start, this._index);
            };
        /**
         * @param {?} position
         * @return {?}
         */
        Tokenizer.prototype._restorePosition = /**
         * @param {?} position
         * @return {?}
         */
            function (position) {
                this._peek = position[0];
                this._index = position[1];
                this._column = position[2];
                this._line = position[3];
                var /** @type {?} */ nbTokens = position[4];
                if (nbTokens < this.tokens.length) {
                    // remove any extra tokens
                    this.tokens = this.tokens.slice(0, nbTokens);
                }
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._isInExpansionCase = /**
         * @return {?}
         */
            function () {
                return (this._expansionCaseStack.length > 0 &&
                    this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_CASE_EXP_START);
            };
        /**
         * @return {?}
         */
        Tokenizer.prototype._isInExpansionForm = /**
         * @return {?}
         */
            function () {
                return (this._expansionCaseStack.length > 0 &&
                    this._expansionCaseStack[this._expansionCaseStack.length - 1] === TokenType.EXPANSION_FORM_START);
            };
        return Tokenizer;
    }());
    /**
     * @param {?} code
     * @return {?}
     */
    function isNotWhitespace(code) {
        return !isWhitespace(code) || code === $EOF;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isNameEnd(code) {
        return (isWhitespace(code) ||
            code === $GT ||
            code === $SLASH ||
            code === $SQ ||
            code === $DQ ||
            code === $EQ);
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isPrefixEnd(code) {
        return ((code < $a || $z < code) && (code < $A || $Z < code) && (code < $0 || code > $9));
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isDigitEntityEnd(code) {
        return code === $SEMICOLON || code === $EOF || !isAsciiHexDigit(code);
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isNamedEntityEnd(code) {
        return code === $SEMICOLON || code === $EOF || !isAsciiLetter(code);
    }
    /**
     * @param {?} input
     * @param {?} offset
     * @param {?} interpolationConfig
     * @return {?}
     */
    function isExpansionFormStart(input, offset, interpolationConfig) {
        var /** @type {?} */ isInterpolationStart = interpolationConfig
            ? input.indexOf(interpolationConfig.start, offset) === offset
            : false;
        return input.charCodeAt(offset) === $LBRACE && !isInterpolationStart;
    }
    /**
     * @param {?} peek
     * @return {?}
     */
    function isExpansionCaseStart(peek) {
        return peek === $EQ || isAsciiLetter(peek) || isDigit(peek);
    }
    /**
     * @param {?} code1
     * @param {?} code2
     * @return {?}
     */
    function compareCharCodeCaseInsensitive(code1, code2) {
        return toUpperCaseCharCode(code1) === toUpperCaseCharCode(code2);
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function toUpperCaseCharCode(code) {
        return code >= $a && code <= $z ? code - $a + $A : code;
    }
    /**
     * @param {?} srcTokens
     * @return {?}
     */
    function mergeTextTokens(srcTokens) {
        var /** @type {?} */ dstTokens = [];
        var /** @type {?} */ lastDstToken = undefined;
        for (var /** @type {?} */ i = 0; i < srcTokens.length; i++) {
            var /** @type {?} */ token = srcTokens[i];
            if (lastDstToken && lastDstToken.type === TokenType.TEXT && token.type === TokenType.TEXT) {
                lastDstToken.parts[0] += token.parts[0];
                lastDstToken.sourceSpan.end = token.sourceSpan.end;
            }
            else {
                lastDstToken = token;
                dstTokens.push(lastDstToken);
            }
        }
        return dstTokens;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TreeError = (function (_super) {
        __extends(TreeError, _super);
        function TreeError(elementName, span, msg) {
            var _this = _super.call(this, span, msg) || this;
            _this.elementName = elementName;
            return _this;
        }
        /**
         * @param {?} elementName
         * @param {?} span
         * @param {?} msg
         * @return {?}
         */
        TreeError.create = /**
         * @param {?} elementName
         * @param {?} span
         * @param {?} msg
         * @return {?}
         */
            function (elementName, span, msg) {
                return new TreeError(elementName, span, msg);
            };
        return TreeError;
    }(ParseError));
    var ParseTreeResult = (function () {
        function ParseTreeResult(rootNodes, errors) {
            this.rootNodes = rootNodes;
            this.errors = errors;
        }
        return ParseTreeResult;
    }());
    var Parser = (function () {
        function Parser(getTagDefinition) {
            this.getTagDefinition = getTagDefinition;
        }
        /**
         * @param {?} source
         * @param {?} url
         * @param {?=} parseExpansionForms
         * @param {?=} interpolationConfig
         * @return {?}
         */
        Parser.prototype.parse = /**
         * @param {?} source
         * @param {?} url
         * @param {?=} parseExpansionForms
         * @param {?=} interpolationConfig
         * @return {?}
         */
            function (source, url, parseExpansionForms, interpolationConfig) {
                if (parseExpansionForms === void 0) {
                    parseExpansionForms = false;
                }
                if (interpolationConfig === void 0) {
                    interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
                }
                var /** @type {?} */ tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
                var /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
                return new ParseTreeResult(treeAndErrors.rootNodes, ((tokensAndErrors.errors)).concat(treeAndErrors.errors));
            };
        return Parser;
    }());
    var _TreeBuilder = (function () {
        function _TreeBuilder(tokens, getTagDefinition) {
            this.tokens = tokens;
            this.getTagDefinition = getTagDefinition;
            this._index = -1;
            this._rootNodes = [];
            this._errors = [];
            this._elementStack = [];
            this._advance();
        }
        /**
         * @return {?}
         */
        _TreeBuilder.prototype.build = /**
         * @return {?}
         */
            function () {
                while (this._peek.type !== TokenType.EOF) {
                    if (this._peek.type === TokenType.TAG_OPEN_START) {
                        this._consumeStartTag(this._advance());
                    }
                    else if (this._peek.type === TokenType.TAG_CLOSE) {
                        this._consumeEndTag(this._advance());
                    }
                    else if (this._peek.type === TokenType.CDATA_START) {
                        this._closeVoidElement();
                        this._consumeCdata(this._advance());
                    }
                    else if (this._peek.type === TokenType.COMMENT_START) {
                        this._closeVoidElement();
                        this._consumeComment(this._advance());
                    }
                    else if (this._peek.type === TokenType.TEXT ||
                        this._peek.type === TokenType.RAW_TEXT ||
                        this._peek.type === TokenType.ESCAPABLE_RAW_TEXT) {
                        this._closeVoidElement();
                        this._consumeText(this._advance());
                    }
                    else if (this._peek.type === TokenType.EXPANSION_FORM_START) {
                        this._consumeExpansion(this._advance());
                    }
                    else {
                        // Skip all other tokens...
                        this._advance();
                    }
                }
                return new ParseTreeResult(this._rootNodes, this._errors);
            };
        /**
         * @return {?}
         */
        _TreeBuilder.prototype._advance = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ prev = this._peek;
                if (this._index < this.tokens.length - 1) {
                    // Note: there is always an EOF token at the end
                    this._index++;
                }
                this._peek = this.tokens[this._index];
                return prev;
            };
        /**
         * @param {?} type
         * @return {?}
         */
        _TreeBuilder.prototype._advanceIf = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                if (this._peek.type === type) {
                    return this._advance();
                }
                return null;
            };
        /**
         * @param {?} startToken
         * @return {?}
         */
        _TreeBuilder.prototype._consumeCdata = /**
         * @param {?} startToken
         * @return {?}
         */
            function (startToken) {
                this._consumeText(this._advance());
                this._advanceIf(TokenType.CDATA_END);
            };
        /**
         * @param {?} token
         * @return {?}
         */
        _TreeBuilder.prototype._consumeComment = /**
         * @param {?} token
         * @return {?}
         */
            function (token) {
                var /** @type {?} */ text = this._advanceIf(TokenType.RAW_TEXT);
                this._advanceIf(TokenType.COMMENT_END);
                var /** @type {?} */ value = text !== null ? text.parts[0].trim() : null;
                this._addToParent(new Comment(value, token.sourceSpan));
            };
        /**
         * @param {?} token
         * @return {?}
         */
        _TreeBuilder.prototype._consumeExpansion = /**
         * @param {?} token
         * @return {?}
         */
            function (token) {
                var /** @type {?} */ switchValue = this._advance();
                var /** @type {?} */ type = this._advance();
                var /** @type {?} */ cases = [];
                // read =
                while (this._peek.type === TokenType.EXPANSION_CASE_VALUE) {
                    var /** @type {?} */ expCase = this._parseExpansionCase();
                    if (!expCase) {
                        return;
                    } // error
                    cases.push(expCase);
                }
                // read the final }
                if (this._peek.type !== TokenType.EXPANSION_FORM_END) {
                    this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
                    return;
                }
                var /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
                this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
                this._advance();
            };
        /**
         * @return {?}
         */
        _TreeBuilder.prototype._parseExpansionCase = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ value = this._advance();
                // read {
                if (this._peek.type !== TokenType.EXPANSION_CASE_EXP_START) {
                    this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
                    return null;
                }
                // read until }
                var /** @type {?} */ start = this._advance();
                var /** @type {?} */ exp = this._collectExpansionExpTokens(start);
                if (!exp) {
                    return null;
                }
                var /** @type {?} */ end = this._advance();
                exp.push(new Token(TokenType.EOF, [], end.sourceSpan));
                // parse everything in between { and }
                var /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
                if (parsedExp.errors.length > 0) {
                    this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));
                    return null;
                }
                var /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
                var /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
                return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
            };
        /**
         * @param {?} start
         * @return {?}
         */
        _TreeBuilder.prototype._collectExpansionExpTokens = /**
         * @param {?} start
         * @return {?}
         */
            function (start) {
                var /** @type {?} */ exp = [];
                var /** @type {?} */ expansionFormStack = [TokenType.EXPANSION_CASE_EXP_START];
                while (true) {
                    if (this._peek.type === TokenType.EXPANSION_FORM_START ||
                        this._peek.type === TokenType.EXPANSION_CASE_EXP_START) {
                        expansionFormStack.push(this._peek.type);
                    }
                    if (this._peek.type === TokenType.EXPANSION_CASE_EXP_END) {
                        if (lastOnStack(expansionFormStack, TokenType.EXPANSION_CASE_EXP_START)) {
                            expansionFormStack.pop();
                            if (expansionFormStack.length === 0) {
                                return exp;
                            }
                        }
                        else {
                            this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                            return null;
                        }
                    }
                    if (this._peek.type === TokenType.EXPANSION_FORM_END) {
                        if (lastOnStack(expansionFormStack, TokenType.EXPANSION_FORM_START)) {
                            expansionFormStack.pop();
                        }
                        else {
                            this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                            return null;
                        }
                    }
                    if (this._peek.type === TokenType.EOF) {
                        this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
                        return null;
                    }
                    exp.push(this._advance());
                }
            };
        /**
         * @param {?} token
         * @return {?}
         */
        _TreeBuilder.prototype._consumeText = /**
         * @param {?} token
         * @return {?}
         */
            function (token) {
                var /** @type {?} */ text = token.parts[0];
                if (text.length > 0 && text[0] === "\n") {
                    var /** @type {?} */ parent_1 = this._getParentElement();
                    if (parent_1 !== null && parent_1.children.length === 0 && this.getTagDefinition(parent_1.name).ignoreFirstLf) {
                        text = text.substring(1);
                    }
                }
                if (text.length > 0) {
                    this._addToParent(new Text(text, token.sourceSpan));
                }
            };
        /**
         * @return {?}
         */
        _TreeBuilder.prototype._closeVoidElement = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ el = this._getParentElement();
                if (el && this.getTagDefinition(el.name).isVoid) {
                    this._elementStack.pop();
                }
            };
        /**
         * @param {?} startTagToken
         * @return {?}
         */
        _TreeBuilder.prototype._consumeStartTag = /**
         * @param {?} startTagToken
         * @return {?}
         */
            function (startTagToken) {
                var /** @type {?} */ prefix = startTagToken.parts[0];
                var /** @type {?} */ name = startTagToken.parts[1];
                var /** @type {?} */ attrs = [];
                while (this._peek.type === TokenType.ATTR_NAME) {
                    attrs.push(this._consumeAttr(this._advance()));
                }
                var /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());
                var /** @type {?} */ selfClosing = false;
                // Note: There could have been a tokenizer error
                // so that we don't get a token for the end tag...
                if (this._peek.type === TokenType.TAG_OPEN_END_VOID) {
                    this._advance();
                    selfClosing = true;
                    var /** @type {?} */ tagDef = this.getTagDefinition(fullName);
                    if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
                        this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
                    }
                }
                else if (this._peek.type === TokenType.TAG_OPEN_END) {
                    this._advance();
                    selfClosing = false;
                }
                var /** @type {?} */ end = this._peek.sourceSpan.start;
                var /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
                var /** @type {?} */ el = new Element(fullName, attrs, [], span, span, undefined);
                this._pushElement(el);
                if (selfClosing) {
                    this._popElement(fullName);
                    el.endSourceSpan = span;
                }
            };
        /**
         * @param {?} el
         * @return {?}
         */
        _TreeBuilder.prototype._pushElement = /**
         * @param {?} el
         * @return {?}
         */
            function (el) {
                var /** @type {?} */ parentEl = this._getParentElement();
                if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
                    this._elementStack.pop();
                }
                var /** @type {?} */ tagDef = this.getTagDefinition(el.name);
                var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
                if (parent && tagDef.requireExtraParent(parent.name)) {
                    var /** @type {?} */ newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
                    this._insertBeforeContainer(parent, container, newParent);
                }
                this._addToParent(el);
                this._elementStack.push(el);
            };
        /**
         * @param {?} endTagToken
         * @return {?}
         */
        _TreeBuilder.prototype._consumeEndTag = /**
         * @param {?} endTagToken
         * @return {?}
         */
            function (endTagToken) {
                var /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
                if (this._getParentElement()) {
                    /** @type {?} */ ((this._getParentElement())).endSourceSpan = endTagToken.sourceSpan;
                }
                if (this.getTagDefinition(fullName).isVoid) {
                    this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
                }
                else if (!this._popElement(fullName)) {
                    var /** @type {?} */ errMsg = "Unexpected closing tag \"" + fullName + "\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags";
                    this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));
                }
            };
        /**
         * @param {?} fullName
         * @return {?}
         */
        _TreeBuilder.prototype._popElement = /**
         * @param {?} fullName
         * @return {?}
         */
            function (fullName) {
                for (var /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
                    var /** @type {?} */ el = this._elementStack[stackIndex];
                    if (el.name === fullName) {
                        this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
                        return true;
                    }
                    if (!this.getTagDefinition(el.name).closedByParent) {
                        return false;
                    }
                }
                return false;
            };
        /**
         * @param {?} attrName
         * @return {?}
         */
        _TreeBuilder.prototype._consumeAttr = /**
         * @param {?} attrName
         * @return {?}
         */
            function (attrName) {
                var /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
                var /** @type {?} */ end = attrName.sourceSpan.end;
                var /** @type {?} */ value = "";
                var /** @type {?} */ valueSpan = ((undefined));
                if (this._peek.type === TokenType.ATTR_VALUE) {
                    var /** @type {?} */ valueToken = this._advance();
                    value = valueToken.parts[0];
                    end = valueToken.sourceSpan.end;
                    valueSpan = valueToken.sourceSpan;
                }
                return new Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
            };
        /**
         * @return {?}
         */
        _TreeBuilder.prototype._getParentElement = /**
         * @return {?}
         */
            function () {
                return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
            };
        /**
         * Returns the parent in the DOM and the container.
         *
         * `<ng-container>` elements are skipped as they are not rendered as DOM element.
         * @return {?}
         */
        _TreeBuilder.prototype._getParentElementSkippingContainers = /**
         * Returns the parent in the DOM and the container.
         *
         * `<ng-container>` elements are skipped as they are not rendered as DOM element.
         * @return {?}
         */
            function () {
                var /** @type {?} */ container = null;
                for (var /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {
                    if (!isNgContainer(this._elementStack[i].name)) {
                        return { parent: this._elementStack[i], container: container };
                    }
                    container = this._elementStack[i];
                }
                return { parent: null, container: container };
            };
        /**
         * @param {?} node
         * @return {?}
         */
        _TreeBuilder.prototype._addToParent = /**
         * @param {?} node
         * @return {?}
         */
            function (node) {
                var /** @type {?} */ parent = this._getParentElement();
                if (parent !== null) {
                    parent.children.push(node);
                }
                else {
                    this._rootNodes.push(node);
                }
            };
        /**
         * Insert a node between the parent and the container.
         * When no container is given, the node is appended as a child of the parent.
         * Also updates the element stack accordingly.
         *
         * \@internal
         * @param {?} parent
         * @param {?} container
         * @param {?} node
         * @return {?}
         */
        _TreeBuilder.prototype._insertBeforeContainer = /**
         * Insert a node between the parent and the container.
         * When no container is given, the node is appended as a child of the parent.
         * Also updates the element stack accordingly.
         *
         * \@internal
         * @param {?} parent
         * @param {?} container
         * @param {?} node
         * @return {?}
         */
            function (parent, container, node) {
                if (!container) {
                    this._addToParent(node);
                    this._elementStack.push(node);
                }
                else {
                    if (parent) {
                        // replace the container with the new node in the children
                        var /** @type {?} */ index = parent.children.indexOf(container);
                        parent.children[index] = node;
                    }
                    else {
                        this._rootNodes.push(node);
                    }
                    node.children.push(container);
                    this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
                }
            };
        /**
         * @param {?} prefix
         * @param {?} localName
         * @param {?} parentElement
         * @return {?}
         */
        _TreeBuilder.prototype._getElementFullName = /**
         * @param {?} prefix
         * @param {?} localName
         * @param {?} parentElement
         * @return {?}
         */
            function (prefix, localName, parentElement) {
                if (prefix === null) {
                    prefix = /** @type {?} */ ((this.getTagDefinition(localName).implicitNamespacePrefix));
                    if (prefix === null && parentElement !== null) {
                        prefix = getNsPrefix(parentElement.name);
                    }
                }
                return mergeNsAndName(prefix, localName);
            };
        return _TreeBuilder;
    }());
    /**
     * @param {?} stack
     * @param {?} element
     * @return {?}
     */
    function lastOnStack(stack, element) {
        return stack.length > 0 && stack[stack.length - 1] === element;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var XmlTagDefinition = (function () {
        function XmlTagDefinition() {
            this.closedByParent = false;
            this.contentType = TagContentType.PARSABLE_DATA;
            this.isVoid = false;
            this.ignoreFirstLf = false;
            this.canSelfClose = true;
        }
        /**
         * @param {?} currentParent
         * @return {?}
         */
        XmlTagDefinition.prototype.requireExtraParent = /**
         * @param {?} currentParent
         * @return {?}
         */
            function (currentParent) {
                return false;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        XmlTagDefinition.prototype.isClosedByChild = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return false;
            };
        return XmlTagDefinition;
    }());
    var /** @type {?} */ _TAG_DEFINITION = new XmlTagDefinition();
    /**
     * @param {?} tagName
     * @return {?}
     */
    function getXmlTagDefinition(tagName) {
        return _TAG_DEFINITION;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var HtmlTagDefinition = (function () {
        function HtmlTagDefinition(_a) {
            var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
            var _this = this;
            this.closedByChildren = {};
            this.closedByParent = false;
            this.canSelfClose = false;
            if (closedByChildren && closedByChildren.length > 0) {
                closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
            }
            this.isVoid = isVoid;
            this.closedByParent = closedByParent || isVoid;
            if (requiredParents && requiredParents.length > 0) {
                this.requiredParents = {};
                // The first parent is the list is automatically when none of the listed parents are present
                this.parentToAdd = requiredParents[0];
                requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
            }
            this.implicitNamespacePrefix = implicitNamespacePrefix || null;
            this.contentType = contentType;
            this.ignoreFirstLf = ignoreFirstLf;
        }
        /**
         * @param {?} currentParent
         * @return {?}
         */
        HtmlTagDefinition.prototype.requireExtraParent = /**
         * @param {?} currentParent
         * @return {?}
         */
            function (currentParent) {
                if (!this.requiredParents) {
                    return false;
                }
                if (!currentParent) {
                    return true;
                }
                var /** @type {?} */ lcParent = currentParent.toLowerCase();
                var /** @type {?} */ isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';
                return !isParentTemplate && this.requiredParents[lcParent] !== true;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        HtmlTagDefinition.prototype.isClosedByChild = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this.isVoid || name.toLowerCase() in this.closedByChildren;
            };
        return HtmlTagDefinition;
    }());
    // see http://www.w3.org/TR/html51/syntax.html#optional-tags
    // This implementation does not fully conform to the HTML5 spec.
    var /** @type {?} */ TAG_DEFINITIONS = {
        'base': new HtmlTagDefinition({ isVoid: true }),
        'meta': new HtmlTagDefinition({ isVoid: true }),
        'area': new HtmlTagDefinition({ isVoid: true }),
        'embed': new HtmlTagDefinition({ isVoid: true }),
        'link': new HtmlTagDefinition({ isVoid: true }),
        'img': new HtmlTagDefinition({ isVoid: true }),
        'input': new HtmlTagDefinition({ isVoid: true }),
        'param': new HtmlTagDefinition({ isVoid: true }),
        'hr': new HtmlTagDefinition({ isVoid: true }),
        'br': new HtmlTagDefinition({ isVoid: true }),
        'source': new HtmlTagDefinition({ isVoid: true }),
        'track': new HtmlTagDefinition({ isVoid: true }),
        'wbr': new HtmlTagDefinition({ isVoid: true }),
        'p': new HtmlTagDefinition({
            closedByChildren: [
                'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
                'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
                'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
            ],
            closedByParent: true
        }),
        'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
        'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
        'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
        'tr': new HtmlTagDefinition({
            closedByChildren: ['tr'],
            requiredParents: ['tbody', 'tfoot', 'thead'],
            closedByParent: true
        }),
        'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
        'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
        'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
        'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
        'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
        'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
        'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
        'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
        'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
        'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
        'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
        'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
        'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
        'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
        'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
        'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
        'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
        'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
        'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
        'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
    };
    var /** @type {?} */ _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
    /**
     * @param {?} tagName
     * @return {?}
     */
    function getHtmlTagDefinition(tagName) {
        return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * A simple mapper that take a function to transform an internal name to a public name
     */
    var /**
     * A simple mapper that take a function to transform an internal name to a public name
     */ SimplePlaceholderMapper = (function (_super) {
        __extends(SimplePlaceholderMapper, _super);
        // create a mapping from the message
        function SimplePlaceholderMapper(message, mapName) {
            var _this = _super.call(this) || this;
            _this.mapName = mapName;
            _this.internalToPublic = {};
            _this.publicToNextId = {};
            _this.publicToInternal = {};
            message.nodes.forEach(function (node) { return node.visit(_this); });
            return _this;
        }
        /**
         * @param {?} internalName
         * @return {?}
         */
        SimplePlaceholderMapper.prototype.toPublicName = /**
         * @param {?} internalName
         * @return {?}
         */
            function (internalName) {
                return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;
            };
        /**
         * @param {?} publicName
         * @return {?}
         */
        SimplePlaceholderMapper.prototype.toInternalName = /**
         * @param {?} publicName
         * @return {?}
         */
            function (publicName) {
                return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;
            };
        /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
        SimplePlaceholderMapper.prototype.visitText = /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
            function (text, context) {
                return null;
            };
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        SimplePlaceholderMapper.prototype.visitTagPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) {
                this.visitPlaceholderName(ph.startName);
                _super.prototype.visitTagPlaceholder.call(this, ph, context);
                this.visitPlaceholderName(ph.closeName);
            };
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        SimplePlaceholderMapper.prototype.visitPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) {
                this.visitPlaceholderName(ph.name);
            };
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        SimplePlaceholderMapper.prototype.visitIcuPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) {
                this.visitPlaceholderName(ph.name);
            };
        /**
         * @param {?} internalName
         * @return {?}
         */
        SimplePlaceholderMapper.prototype.visitPlaceholderName = /**
         * @param {?} internalName
         * @return {?}
         */
            function (internalName) {
                if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {
                    return;
                }
                var /** @type {?} */ publicName = this.mapName(internalName);
                if (this.publicToInternal.hasOwnProperty(publicName)) {
                    // Create a new XMB when it has already been used
                    var /** @type {?} */ nextId = this.publicToNextId[publicName];
                    this.publicToNextId[publicName] = nextId + 1;
                    publicName = publicName + "_" + nextId;
                }
                else {
                    this.publicToNextId[publicName] = 1;
                }
                this.internalToPublic[internalName] = publicName;
                this.publicToInternal[publicName] = internalName;
            };
        return SimplePlaceholderMapper;
    }(RecurseVisitor));
    var /** @type {?} */ i18nSelectPipe = new common.I18nSelectPipe();
    var SerializerVisitor = (function () {
        function SerializerVisitor(locale, params) {
            this.params = params;
            this.i18nPluralPipe = new common.I18nPluralPipe(new common.NgLocaleLocalization(locale));
        }
        /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitElement = /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
            function (element, context) {
                if (getHtmlTagDefinition(element.name).isVoid) {
                    return "<" + element.name + this.serializeNodes(element.attrs, " ") + "/>";
                }
                return "<" + element.name + this.serializeNodes(element.attrs, " ") + ">" + this.serializeNodes(element.children) + "</" + element.name + ">";
            };
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitAttribute = /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
            function (attribute, context) {
                return attribute.name + "=\"" + attribute.value + "\"";
            };
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) {
                return text.value;
            };
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitComment = /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
            function (comment, context) {
                return "<!--" + comment.value + "-->";
            };
        /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitExpansion = /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */
            function (expansion, context) {
                var _this = this;
                var /** @type {?} */ cases = {};
                expansion.cases.forEach(function (c) { return (cases[c.value] = _this.serializeNodes(c.expression)); });
                switch (expansion.type) {
                    case "select":
                        return i18nSelectPipe.transform(this.params[expansion.switchValue] || "", cases);
                    case "plural":
                        return this.i18nPluralPipe.transform(this.params[expansion.switchValue], cases);
                }
                throw new Error("Unknown expansion type \"" + expansion.type + "\"");
            };
        /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitExpansionCase = /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */
            function (expansionCase, context) {
                return " " + expansionCase.value + " {" + this.serializeNodes(expansionCase.expression) + "}";
            };
        /**
         * @param {?} nodes
         * @param {?=} join
         * @return {?}
         */
        SerializerVisitor.prototype.serializeNodes = /**
         * @param {?} nodes
         * @param {?=} join
         * @return {?}
         */
            function (nodes, join) {
                var _this = this;
                if (join === void 0) {
                    join = "";
                }
                if (nodes.length === 0) {
                    return "";
                }
                return join + nodes.map(function (a) { return a.visit(_this, null); }).join(join);
            };
        return SerializerVisitor;
    }());
    /**
     * @param {?} nodes
     * @param {?} locale
     * @param {?} params
     * @return {?}
     */
    function serializeNodes(nodes, locale, params) {
        return nodes.map(function (node) { return node.visit(new SerializerVisitor(locale, params), null); });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} message
     * @return {?}
     */
    function digest(message) {
        return message.id || sha1(serializeNodes$1(message.nodes).join("") + ("[" + message.meaning + "]"));
    }
    /**
     * @param {?} message
     * @return {?}
     */
    function decimalDigest(message) {
        if (message.id) {
            return message.id;
        }
        var /** @type {?} */ visitor = new SerializerIgnoreIcuExpVisitor();
        var /** @type {?} */ parts = message.nodes.map(function (a) { return a.visit(visitor, null); });
        return computeMsgId(parts.join(""), message.meaning);
    }
    /**
     * Serialize the i18n html to something xml-like in order to generate an UID.
     *
     * The visitor is also used in the i18n parser tests
     *
     * \@internal
     */
    var /**
     * Serialize the i18n html to something xml-like in order to generate an UID.
     *
     * The visitor is also used in the i18n parser tests
     *
     * \@internal
     */ SerializerVisitor$1 = (function () {
        function SerializerVisitor() {
        }
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) {
                return text.value;
            };
        /**
         * @param {?} container
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitContainer = /**
         * @param {?} container
         * @param {?} context
         * @return {?}
         */
            function (container, context) {
                var _this = this;
                return "[" + container.children.map(function (child) { return child.visit(_this); }).join(", ") + "]";
            };
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitIcu = /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
            function (icu, context) {
                var _this = this;
                var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
                return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(", ") + "}";
            };
        /**
         * @param {?} ph
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitTagPlaceholder = /**
         * @param {?} ph
         * @param {?} context
         * @return {?}
         */
            function (ph, context) {
                var _this = this;
                return ph.isVoid
                    ? "<ph tag name=\"" + ph.startName + "\"/>"
                    : "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) { return child.visit(_this); }).join(", ") + "</ph name=\"" + ph.closeName + "\">";
            };
        /**
         * @param {?} ph
         * @param {?} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitPlaceholder = /**
         * @param {?} ph
         * @param {?} context
         * @return {?}
         */
            function (ph, context) {
                return ph.value ? "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>" : "<ph name=\"" + ph.name + "\"/>";
            };
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        SerializerVisitor.prototype.visitIcuPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) {
                return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
            };
        return SerializerVisitor;
    }());
    var /** @type {?} */ serializerVisitor = new SerializerVisitor$1();
    /**
     * @param {?} nodes
     * @return {?}
     */
    function serializeNodes$1(nodes) {
        return nodes.map(function (a) { return a.visit(serializerVisitor, null); });
    }
    /**
     * Serialize the i18n html to something xml-like in order to generate an UID.
     *
     * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
     *
     * \@internal
     */
    var /**
     * Serialize the i18n html to something xml-like in order to generate an UID.
     *
     * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
     *
     * \@internal
     */ SerializerIgnoreIcuExpVisitor = (function (_super) {
        __extends(SerializerIgnoreIcuExpVisitor, _super);
        function SerializerIgnoreIcuExpVisitor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
        SerializerIgnoreIcuExpVisitor.prototype.visitIcu = /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
            function (icu, context) {
                var _this = this;
                var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
                // Do not take the expression into account
                return "{" + icu.type + ", " + strCases.join(", ") + "}";
            };
        return SerializerIgnoreIcuExpVisitor;
    }(SerializerVisitor$1));
    /**
     * Compute the SHA1 of the given string
     *
     * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
     *
     * WARNING: this function has not been designed not tested with security in mind.
     *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
     * @param {?} str
     * @return {?}
     */
    function sha1(str) {
        var /** @type {?} */ utf8 = utf8Encode(str);
        var /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);
        var /** @type {?} */ len = utf8.length * 8;
        var /** @type {?} */ w = new Array(80);
        var _a = __read([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], 5), a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
        words32[len >> 5] |= 0x80 << (24 - len % 32);
        words32[(((len + 64) >> 9) << 4) + 15] = len;
        for (var /** @type {?} */ i = 0; i < words32.length; i += 16) {
            var _b = __read([a, b, c, d, e], 5), h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
            for (var /** @type {?} */ j = 0; j < 80; j++) {
                /* tslint:disable-next-line */
                if (j < 16) {
                    w[j] = words32[i + j];
                }
                else {
                    w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
                }
                var _c = __read(fk(j, b, c, d), 2), f = _c[0], k = _c[1];
                var /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
                _d = __read([d, c, rol32(b, 30), a, temp], 5), e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
            }
            _e = __read([add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], 5), a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
        }
        return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
        var _d, _e;
    }
    /**
     * @param {?} index
     * @param {?} b
     * @param {?} c
     * @param {?} d
     * @return {?}
     */
    function fk(index, b, c, d) {
        if (index < 20) {
            return [(b & c) | (~b & d), 0x5a827999];
        }
        if (index < 40) {
            return [b ^ c ^ d, 0x6ed9eba1];
        }
        if (index < 60) {
            return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
        }
        return [b ^ c ^ d, 0xca62c1d6];
    }
    /**
     * Compute the fingerprint of the given string
     *
     * The output is 64 bit number encoded as a decimal string
     *
     * based on:
     * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
     * @param {?} str
     * @return {?}
     */
    function fingerprint(str) {
        var /** @type {?} */ utf8 = utf8Encode(str);
        var _a = __read([hash32(utf8, 0), hash32(utf8, 102072)], 2), hi = _a[0], lo = _a[1];
        if (hi === 0 && (lo === 0 || lo === 1)) {
            hi = hi ^ 0x130f9bef;
            lo = lo ^ -0x6b5f56d8;
        }
        return [hi, lo];
    }
    /**
     * @param {?} msg
     * @param {?} meaning
     * @return {?}
     */
    function computeMsgId(msg, meaning) {
        var _a = __read(fingerprint(msg), 2), hi = _a[0], lo = _a[1];
        if (meaning) {
            var _b = __read(fingerprint(meaning), 2), him = _b[0], lom = _b[1];
            _c = __read(add64(rol64([hi, lo], 1), [him, lom]), 2), hi = _c[0], lo = _c[1];
        }
        return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
        var _c;
    }
    /**
     * @param {?} str
     * @param {?} c
     * @return {?}
     */
    function hash32(str, c) {
        var _a = __read([0x9e3779b9, 0x9e3779b9], 2), a = _a[0], b = _a[1];
        var /** @type {?} */ i;
        var /** @type {?} */ len = str.length;
        for (i = 0; i + 12 <= len; i += 12) {
            a = add32(a, wordAt(str, i, Endian.Little));
            b = add32(b, wordAt(str, i + 4, Endian.Little));
            c = add32(c, wordAt(str, i + 8, Endian.Little));
            _b = __read(mix([a, b, c]), 3), a = _b[0], b = _b[1], c = _b[2];
        }
        a = add32(a, wordAt(str, i, Endian.Little));
        b = add32(b, wordAt(str, i + 4, Endian.Little));
        // the first byte of c is reserved for the length
        c = add32(c, len);
        c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
        return mix([a, b, c])[2];
        var _b;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    function mix(_a) {
        var _b = __read(_a, 3), a = _b[0], b = _b[1], c = _b[2];
        a = sub32(a, b);
        a = sub32(a, c);
        a ^= c >>> 13;
        b = sub32(b, c);
        b = sub32(b, a);
        b ^= a << 8;
        c = sub32(c, a);
        c = sub32(c, b);
        c ^= b >>> 13;
        a = sub32(a, b);
        a = sub32(a, c);
        a ^= c >>> 12;
        b = sub32(b, c);
        b = sub32(b, a);
        b ^= a << 16;
        c = sub32(c, a);
        c = sub32(c, b);
        c ^= b >>> 5;
        a = sub32(a, b);
        a = sub32(a, c);
        a ^= c >>> 3;
        b = sub32(b, c);
        b = sub32(b, a);
        b ^= a << 10;
        c = sub32(c, a);
        c = sub32(c, b);
        c ^= b >>> 15;
        return [a, b, c];
    }
    /** @enum {number} */
    var Endian = {
        Little: 0,
        Big: 1,
    };
    Endian[Endian.Little] = "Little";
    Endian[Endian.Big] = "Big";
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function add32(a, b) {
        return add32to64(a, b)[1];
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function add32to64(a, b) {
        var /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);
        var /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);
        return [high >>> 16, (high << 16) | (low & 0xffff)];
    }
    /**
     * @param {?} __0
     * @param {?} __1
     * @return {?}
     */
    function add64(_a, _b) {
        var _c = __read(_a, 2), ah = _c[0], al = _c[1];
        var _d = __read(_b, 2), bh = _d[0], bl = _d[1];
        var _e = __read(add32to64(al, bl), 2), carry = _e[0], l = _e[1];
        var /** @type {?} */ h = add32(add32(ah, bh), carry);
        return [h, l];
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function sub32(a, b) {
        var /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);
        var /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);
        return (high << 16) | (low & 0xffff);
    }
    /**
     * @param {?} a
     * @param {?} count
     * @return {?}
     */
    function rol32(a, count) {
        return (a << count) | (a >>> (32 - count));
    }
    /**
     * @param {?} __0
     * @param {?} count
     * @return {?}
     */
    function rol64(_a, count) {
        var _b = __read(_a, 2), hi = _b[0], lo = _b[1];
        var /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));
        var /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));
        return [h, l];
    }
    /**
     * @param {?} str
     * @param {?} endian
     * @return {?}
     */
    function stringToWords32(str, endian) {
        var /** @type {?} */ words32 = Array((str.length + 3) >>> 2);
        for (var /** @type {?} */ i = 0; i < words32.length; i++) {
            words32[i] = wordAt(str, i * 4, endian);
        }
        return words32;
    }
    /**
     * @param {?} str
     * @param {?} index
     * @return {?}
     */
    function byteAt(str, index) {
        return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
    }
    /**
     * @param {?} str
     * @param {?} index
     * @param {?} endian
     * @return {?}
     */
    function wordAt(str, index, endian) {
        var /** @type {?} */ word = 0;
        if (endian === Endian.Big) {
            for (var /** @type {?} */ i = 0; i < 4; i++) {
                word += byteAt(str, index + i) << (24 - 8 * i);
            }
        }
        else {
            for (var /** @type {?} */ i = 0; i < 4; i++) {
                word += byteAt(str, index + i) << (8 * i);
            }
        }
        return word;
    }
    /**
     * @param {?} words32
     * @return {?}
     */
    function words32ToByteString(words32) {
        return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, "");
    }
    /**
     * @param {?} word
     * @return {?}
     */
    function word32ToByteString(word) {
        var /** @type {?} */ str = "";
        for (var /** @type {?} */ i = 0; i < 4; i++) {
            str += String.fromCharCode((word >>> (8 * (3 - i))) & 0xff);
        }
        return str;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function byteStringToHexString(str) {
        var /** @type {?} */ hex = "";
        for (var /** @type {?} */ i = 0; i < str.length; i++) {
            var /** @type {?} */ b = byteAt(str, i);
            hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
        }
        return hex.toLowerCase();
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function byteStringToDecString(str) {
        var /** @type {?} */ decimal = "";
        var /** @type {?} */ toThePower = "1";
        for (var /** @type {?} */ i = str.length - 1; i >= 0; i--) {
            decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
            toThePower = numberTimesBigInt(256, toThePower);
        }
        return decimal
            .split("")
            .reverse()
            .join("");
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function addBigInt(x, y) {
        var /** @type {?} */ sum = "";
        var /** @type {?} */ len = Math.max(x.length, y.length);
        for (var /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {
            var /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
            if (tmpSum >= 10) {
                carry = 1;
                sum += tmpSum - 10;
            }
            else {
                carry = 0;
                sum += tmpSum;
            }
        }
        return sum;
    }
    /**
     * @param {?} num
     * @param {?} b
     * @return {?}
     */
    function numberTimesBigInt(num, b) {
        var /** @type {?} */ product = "";
        var /** @type {?} */ bToThePower = b;
        for (; num !== 0; num = num >>> 1) {
            if (num & 1) {
                product = addBigInt(product, bToThePower);
            }
            bToThePower = addBigInt(bToThePower, bToThePower);
        }
        return product;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    function utf8Encode(str) {
        var /** @type {?} */ encoded = "";
        for (var /** @type {?} */ index = 0; index < str.length; index++) {
            var /** @type {?} */ codePoint = str.charCodeAt(index);
            // decode surrogate
            // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > index + 1) {
                var /** @type {?} */ low = str.charCodeAt(index + 1);
                if (low >= 0xdc00 && low <= 0xdfff) {
                    index++;
                    codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;
                }
            }
            if (codePoint <= 0x7f) {
                encoded += String.fromCharCode(codePoint);
            }
            else if (codePoint <= 0x7ff) {
                encoded += String.fromCharCode(((codePoint >> 6) & 0x1f) | 0xc0, (codePoint & 0x3f) | 0x80);
            }
            else if (codePoint <= 0xffff) {
                encoded += String.fromCharCode((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
            }
            else if (codePoint <= 0x1fffff) {
                encoded += String.fromCharCode(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
            }
        }
        return encoded;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ _PLACEHOLDER_TAG = "x";
    var /** @type {?} */ _FILE_TAG = "file";
    var /** @type {?} */ _SOURCE_TAG = "source";
    var /** @type {?} */ _TARGET_TAG = "target";
    var /** @type {?} */ _UNIT_TAG = "trans-unit";
    /**
     * @param {?} content
     * @return {?}
     */
    function xliffLoadToI18n(content) {
        // xliff to xml nodes
        var /** @type {?} */ xliffParser = new XliffParser();
        var _a = xliffParser.parse(content), msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
        // xml nodes to i18n messages
        var /** @type {?} */ i18nMessagesById = {};
        var /** @type {?} */ converter = new XmlToI18n();
        Object.keys(msgIdToHtml).forEach(function (msgId) {
            var _a = converter.convert(msgIdToHtml[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;
            errors.push.apply(errors, __spread(e));
            i18nMessagesById[msgId] = i18nNodes;
        });
        if (errors.length) {
            throw new Error("xliff parse errors:\n" + errors.join("\n"));
        }
        return i18nMessagesById;
    }
    var /** @type {?} */ xliffDigest = digest;
    var XliffParser = (function () {
        function XliffParser() {
        }
        /**
         * @param {?} content
         * @return {?}
         */
        XliffParser.prototype.parse = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                this._unitMlString = null;
                this._msgIdToHtml = {};
                var /** @type {?} */ parser = new Parser(getXmlTagDefinition).parse(content, "", false);
                this._errors = parser.errors;
                visitAll(this, parser.rootNodes, null);
                return {
                    msgIdToHtml: this._msgIdToHtml,
                    errors: this._errors
                };
            };
        /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
        XliffParser.prototype.visitElement = /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
            function (element, context) {
                switch (element.name) {
                    case _UNIT_TAG:
                        this._unitMlString = /** @type {?} */ ((null));
                        var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === "id"; });
                        if (!idAttr) {
                            this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
                        }
                        else {
                            var /** @type {?} */ id = idAttr.value;
                            if (this._msgIdToHtml.hasOwnProperty(id)) {
                                this._addError(element, "Duplicated translations for msg " + id);
                            }
                            else {
                                visitAll(this, element.children, null);
                                if (typeof this._unitMlString === "string") {
                                    this._msgIdToHtml[id] = this._unitMlString;
                                }
                                else {
                                    this._addError(element, "Message " + id + " misses a translation");
                                }
                            }
                        }
                        break;
                    case _SOURCE_TAG:
                        // ignore source message
                        break;
                    case _TARGET_TAG:
                        var /** @type {?} */ innerTextStart = ((element.startSourceSpan)).end.offset;
                        var /** @type {?} */ innerTextEnd = ((element.endSourceSpan)).start.offset;
                        var /** @type {?} */ content = ((element.startSourceSpan)).start.file.content;
                        var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);
                        this._unitMlString = innerText;
                        break;
                    case _FILE_TAG:
                        visitAll(this, element.children, null);
                        break;
                    default:
                        // TODO(vicb): assert file structure, xliff version
                        // For now only recurse on unhandled nodes
                        visitAll(this, element.children, null);
                }
            };
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
        XliffParser.prototype.visitAttribute = /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
            function (attribute, context) { };
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        XliffParser.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) { };
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
        XliffParser.prototype.visitComment = /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
            function (comment, context) { };
        /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */
        XliffParser.prototype.visitExpansion = /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */
            function (expansion, context) { };
        /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */
        XliffParser.prototype.visitExpansionCase = /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */
            function (expansionCase, context) { };
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
        XliffParser.prototype._addError = /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
            function (node, message) {
                this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));
            };
        return XliffParser;
    }());
    var XmlToI18n = (function () {
        function XmlToI18n() {
        }
        /**
         * @param {?} message
         * @return {?}
         */
        XmlToI18n.prototype.convert = /**
         * @param {?} message
         * @return {?}
         */
            function (message) {
                var /** @type {?} */ xmlIcu = new Parser(getXmlTagDefinition).parse(message, "", true);
                this._errors = xmlIcu.errors;
                var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length === 0 ? [] : visitAll(this, xmlIcu.rootNodes);
                return {
                    i18nNodes: i18nNodes,
                    errors: this._errors
                };
            };
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) {
                return new Text$1(text.value, /** @type {?} */ ((text.sourceSpan)));
            };
        /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitElement = /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
            function (el, context) {
                if (el.name === _PLACEHOLDER_TAG) {
                    var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === "id"; });
                    if (nameAttr) {
                        return new Placeholder("", nameAttr.value, /** @type {?} */ ((el.sourceSpan)));
                    }
                    this._addError(el, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
                }
                else {
                    this._addError(el, "Unexpected tag");
                }
                return null;
            };
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitExpansion = /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
            function (icu, context) {
                var /** @type {?} */ caseMap = {};
                visitAll(this, icu.cases).forEach(function (c) {
                    caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
                });
                return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
            };
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitExpansionCase = /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
            function (icuCase, context) {
                return {
                    value: icuCase.value,
                    nodes: visitAll(this, icuCase.expression)
                };
            };
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitComment = /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
            function (comment, context) { };
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitAttribute = /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
            function (attribute, context) { };
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
        XmlToI18n.prototype._addError = /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
            function (node, message) {
                this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));
            };
        return XmlToI18n;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ _PLACEHOLDER_TAG$1 = "ph";
    var /** @type {?} */ _PLACEHOLDER_SPANNING_TAG = "pc";
    var /** @type {?} */ _XLIFF_TAG = "xliff";
    var /** @type {?} */ _SOURCE_TAG$1 = "source";
    var /** @type {?} */ _TARGET_TAG$1 = "target";
    var /** @type {?} */ _UNIT_TAG$1 = "unit";
    /**
     * @param {?} content
     * @return {?}
     */
    function xliff2LoadToI18n(content) {
        // xliff to xml nodes
        var /** @type {?} */ xliff2Parser = new Xliff2Parser();
        var _a = xliff2Parser.parse(content), msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;
        // xml nodes to i18n nodes
        var /** @type {?} */ i18nNodesByMsgId = {};
        var /** @type {?} */ converter = new XmlToI18n$1();
        Object.keys(msgIdToHtml).forEach(function (msgId) {
            var _a = converter.convert(msgIdToHtml[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;
            errors.push.apply(errors, __spread(e));
            i18nNodesByMsgId[msgId] = i18nNodes;
        });
        if (errors.length) {
            throw new Error("xliff2 parse errors:\n" + errors.join("\n"));
        }
        return i18nNodesByMsgId;
    }
    var /** @type {?} */ xliff2Digest = decimalDigest;
    var Xliff2Parser = (function () {
        function Xliff2Parser() {
        }
        /**
         * @param {?} content
         * @return {?}
         */
        Xliff2Parser.prototype.parse = /**
         * @param {?} content
         * @return {?}
         */
            function (content) {
                this._unitMlString = null;
                this._msgIdToHtml = {};
                var /** @type {?} */ parser = new Parser(getXmlTagDefinition).parse(content, "", false);
                this._errors = parser.errors;
                visitAll(this, parser.rootNodes, null);
                return {
                    msgIdToHtml: this._msgIdToHtml,
                    errors: this._errors
                };
            };
        /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
        Xliff2Parser.prototype.visitElement = /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
            function (element, context) {
                switch (element.name) {
                    case _UNIT_TAG$1:
                        this._unitMlString = null;
                        var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === "id"; });
                        if (!idAttr) {
                            this._addError(element, "<" + _UNIT_TAG$1 + "> misses the \"id\" attribute");
                        }
                        else {
                            var /** @type {?} */ id = idAttr.value;
                            if (this._msgIdToHtml.hasOwnProperty(id)) {
                                this._addError(element, "Duplicated translations for msg " + id);
                            }
                            else {
                                visitAll(this, element.children, null);
                                if (typeof this._unitMlString === "string") {
                                    this._msgIdToHtml[id] = this._unitMlString;
                                }
                                else {
                                    this._addError(element, "Message " + id + " misses a translation");
                                }
                            }
                        }
                        break;
                    case _SOURCE_TAG$1:
                        // ignore source message
                        break;
                    case _TARGET_TAG$1:
                        var /** @type {?} */ innerTextStart = ((element.startSourceSpan)).end.offset;
                        var /** @type {?} */ innerTextEnd = ((element.endSourceSpan)).start.offset;
                        var /** @type {?} */ content = ((element.startSourceSpan)).start.file.content;
                        var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);
                        this._unitMlString = innerText;
                        break;
                    case _XLIFF_TAG:
                        var /** @type {?} */ versionAttr = element.attrs.find(function (attr) { return attr.name === "version"; });
                        if (versionAttr) {
                            var /** @type {?} */ version = versionAttr.value;
                            if (version !== "2.0") {
                                this._addError(element, "The XLIFF file version " + version + " is not compatible with XLIFF 2.0 serializer");
                            }
                            else {
                                visitAll(this, element.children, null);
                            }
                        }
                        break;
                    default:
                        visitAll(this, element.children, null);
                }
            };
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
        Xliff2Parser.prototype.visitAttribute = /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
            function (attribute, context) { };
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        Xliff2Parser.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) { };
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
        Xliff2Parser.prototype.visitComment = /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
            function (comment, context) { };
        /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */
        Xliff2Parser.prototype.visitExpansion = /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */
            function (expansion, context) { };
        /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */
        Xliff2Parser.prototype.visitExpansionCase = /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */
            function (expansionCase, context) { };
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
        Xliff2Parser.prototype._addError = /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
            function (node, message) {
                this._errors.push(new I18nError(node.sourceSpan, message));
            };
        return Xliff2Parser;
    }());
    var XmlToI18n$1 = (function () {
        function XmlToI18n() {
        }
        /**
         * @param {?} message
         * @return {?}
         */
        XmlToI18n.prototype.convert = /**
         * @param {?} message
         * @return {?}
         */
            function (message) {
                var /** @type {?} */ xmlIcu = new Parser(getXmlTagDefinition).parse(message, "", true);
                this._errors = xmlIcu.errors;
                var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length === 0 ? [] : [].concat.apply([], __spread(visitAll(this, xmlIcu.rootNodes)));
                return {
                    i18nNodes: i18nNodes,
                    errors: this._errors
                };
            };
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) {
                return new Text$1(text.value, text.sourceSpan);
            };
        /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitElement = /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
            function (el, context) {
                var _this = this;
                switch (el.name) {
                    case _PLACEHOLDER_TAG$1:
                        var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === "equiv"; });
                        if (nameAttr) {
                            return [new Placeholder("", nameAttr.value, el.sourceSpan)];
                        }
                        this._addError(el, "<" + _PLACEHOLDER_TAG$1 + "> misses the \"equiv\" attribute");
                        break;
                    case _PLACEHOLDER_SPANNING_TAG:
                        var /** @type {?} */ startAttr = el.attrs.find(function (attr) { return attr.name === "equivStart"; });
                        var /** @type {?} */ endAttr = el.attrs.find(function (attr) { return attr.name === "equivEnd"; });
                        if (!startAttr) {
                            this._addError(el, "<" + _PLACEHOLDER_TAG$1 + "> misses the \"equivStart\" attribute");
                        }
                        else if (!endAttr) {
                            this._addError(el, "<" + _PLACEHOLDER_TAG$1 + "> misses the \"equivEnd\" attribute");
                        }
                        else {
                            var /** @type {?} */ startId = startAttr.value;
                            var /** @type {?} */ endId = endAttr.value;
                            var /** @type {?} */ nodes = [];
                            return nodes.concat.apply(nodes, __spread([new Placeholder("", startId, el.sourceSpan)], el.children.map(function (node) { return node.visit(_this, null); }), [new Placeholder("", endId, el.sourceSpan)]));
                        }
                        break;
                    default:
                        this._addError(el, "Unexpected tag");
                }
                return null;
            };
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitExpansion = /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
            function (icu, context) {
                var /** @type {?} */ caseMap = {};
                visitAll(this, icu.cases).forEach(function (c) {
                    caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
                });
                return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
            };
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitExpansionCase = /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
            function (icuCase, context) {
                return {
                    value: icuCase.value,
                    nodes: [].concat.apply([], __spread(visitAll(this, icuCase.expression)))
                };
            };
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitComment = /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
            function (comment, context) { };
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitAttribute = /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
            function (attribute, context) { };
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
        XmlToI18n.prototype._addError = /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
            function (node, message) {
                this._errors.push(new I18nError(node.sourceSpan, message));
            };
        return XmlToI18n;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} message
     * @return {?}
     */
    function xmbMapper(message) {
        return new SimplePlaceholderMapper(message, toPublicName);
    }
    /**
     * @param {?} internalName
     * @return {?}
     */
    function toPublicName(internalName) {
        return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, "_");
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ _TRANSLATIONS_TAG = "translationbundle";
    var /** @type {?} */ _TRANSLATION_TAG = "translation";
    var /** @type {?} */ _PLACEHOLDER_TAG$3 = "ph";
    /**
     * @param {?} content
     * @return {?}
     */
    function xtbLoadToI18n(content) {
        // xtb to xml nodes
        var /** @type {?} */ xtbParser = new XtbParser();
        var _a = xtbParser.parse(content), msgIdToHtml = _a.msgIdToHtml, parseErrors = _a.errors;
        if (parseErrors.length) {
            throw new Error("xtb parse errors:\n" + parseErrors.join("\n"));
        }
        // xml nodes to i18n nodes
        var /** @type {?} */ i18nNodesByMsgId = {};
        var /** @type {?} */ converter = new XmlToI18n$2();
        // Because we should be able to load xtb files that rely on features not supported by angular,
        // we need to delay the conversion of html to i18n nodes so that non angular messages are not
        // converted
        Object.keys(msgIdToHtml).forEach(function (msgId) {
            var /** @type {?} */ valueFn = function () {
                var _a = converter.convert(msgIdToHtml[msgId]), i18nNodes = _a.i18nNodes, errors = _a.errors;
                if (errors.length) {
                    throw new Error("xtb parse errors:\n" + errors.join("\n"));
                }
                return i18nNodes;
            };
            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);
        });
        return i18nNodesByMsgId;
    }
    var /** @type {?} */ xtbDigest = digest;
    var /** @type {?} */ xtbMapper = xmbMapper;
    /**
     * @param {?} messages
     * @param {?} id
     * @param {?} valueFn
     * @return {?}
     */
    function createLazyProperty(messages, id, valueFn) {
        Object.defineProperty(messages, id, {
            configurable: true,
            enumerable: true,
            get: function () {
                var /** @type {?} */ value = valueFn();
                Object.defineProperty(messages, id, { enumerable: true, value: value });
                return value;
            },
            set: function (_) {
                throw new Error("Could not overwrite an XTB translation");
            }
        });
    }
    var XtbParser = (function () {
        function XtbParser() {
        }
        /**
         * @param {?} xtb
         * @return {?}
         */
        XtbParser.prototype.parse = /**
         * @param {?} xtb
         * @return {?}
         */
            function (xtb) {
                this._bundleDepth = 0;
                this._msgIdToHtml = {};
                // We can not parse the ICU messages at this point as some messages might not originate
                // from Angular that could not be lex'd.
                var /** @type {?} */ xml = new Parser(getXmlTagDefinition).parse(xtb, "", false);
                this._errors = xml.errors;
                visitAll(this, xml.rootNodes);
                return {
                    msgIdToHtml: this._msgIdToHtml,
                    errors: this._errors
                };
            };
        /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
        XtbParser.prototype.visitElement = /**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
            function (element, context) {
                switch (element.name) {
                    case _TRANSLATIONS_TAG:
                        this._bundleDepth++;
                        if (this._bundleDepth > 1) {
                            this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
                        }
                        visitAll(this, element.children, null);
                        this._bundleDepth--;
                        break;
                    case _TRANSLATION_TAG:
                        var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === "id"; });
                        if (!idAttr) {
                            this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
                        }
                        else {
                            var /** @type {?} */ id = idAttr.value;
                            if (this._msgIdToHtml.hasOwnProperty(id)) {
                                this._addError(element, "Duplicated translations for msg " + id);
                            }
                            else {
                                var /** @type {?} */ innerTextStart = ((element.startSourceSpan)).end.offset;
                                var /** @type {?} */ innerTextEnd = ((element.endSourceSpan)).start.offset;
                                var /** @type {?} */ content = ((element.startSourceSpan)).start.file.content;
                                var /** @type {?} */ innerText = content.slice(/** @type {?} */ ((innerTextStart)), /** @type {?} */ ((innerTextEnd)));
                                this._msgIdToHtml[id] = innerText;
                            }
                        }
                        break;
                    default:
                        this._addError(element, "Unexpected tag");
                }
            };
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
        XtbParser.prototype.visitAttribute = /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
            function (attribute, context) { };
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        XtbParser.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) { };
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
        XtbParser.prototype.visitComment = /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
            function (comment, context) { };
        /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */
        XtbParser.prototype.visitExpansion = /**
         * @param {?} expansion
         * @param {?} context
         * @return {?}
         */
            function (expansion, context) { };
        /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */
        XtbParser.prototype.visitExpansionCase = /**
         * @param {?} expansionCase
         * @param {?} context
         * @return {?}
         */
            function (expansionCase, context) { };
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
        XtbParser.prototype._addError = /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
            function (node, message) {
                this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));
            };
        return XtbParser;
    }());
    var XmlToI18n$2 = (function () {
        function XmlToI18n() {
        }
        /**
         * @param {?} message
         * @return {?}
         */
        XmlToI18n.prototype.convert = /**
         * @param {?} message
         * @return {?}
         */
            function (message) {
                var /** @type {?} */ xmlIcu = new Parser(getXmlTagDefinition).parse(message, "", true);
                this._errors = xmlIcu.errors;
                var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length === 0 ? [] : visitAll(this, xmlIcu.rootNodes);
                return {
                    i18nNodes: i18nNodes,
                    errors: this._errors
                };
            };
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) {
                return new Text$1(text.value, /** @type {?} */ ((text.sourceSpan)));
            };
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitExpansion = /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
            function (icu, context) {
                var /** @type {?} */ caseMap = {};
                visitAll(this, icu.cases).forEach(function (c) {
                    caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
                });
                return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
            };
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitExpansionCase = /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
            function (icuCase, context) {
                return {
                    value: icuCase.value,
                    nodes: visitAll(this, icuCase.expression)
                };
            };
        /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitElement = /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
            function (el, context) {
                if (el.name === _PLACEHOLDER_TAG$3) {
                    var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === "name"; });
                    if (nameAttr) {
                        return new Placeholder("", nameAttr.value, /** @type {?} */ ((el.sourceSpan)));
                    }
                    this._addError(el, "<" + _PLACEHOLDER_TAG$3 + "> misses the \"name\" attribute");
                }
                else {
                    this._addError(el, "Unexpected tag");
                }
                return null;
            };
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitComment = /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
            function (comment, context) { };
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
        XmlToI18n.prototype.visitAttribute = /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
            function (attribute, context) { };
        /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
        XmlToI18n.prototype._addError = /**
         * @param {?} node
         * @param {?} message
         * @return {?}
         */
            function (node, message) {
                this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));
            };
        return XmlToI18n;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ParserError = (function () {
        function ParserError(message, input, errLocation, ctxLocation) {
            this.input = input;
            this.errLocation = errLocation;
            this.ctxLocation = ctxLocation;
            this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
        }
        return ParserError;
    }());
    var ParseSpan = (function () {
        function ParseSpan(start, end) {
            this.start = start;
            this.end = end;
        }
        return ParseSpan;
    }());
    var AST = (function () {
        function AST(span) {
            this.span = span;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        AST.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return null;
            };
        /**
         * @return {?}
         */
        AST.prototype.toString = /**
         * @return {?}
         */
            function () {
                return "AST";
            };
        return AST;
    }());
    /**
     * Represents a quoted expression of the form:
     *
     * quote = prefix `:` uninterpretedExpression
     * prefix = identifier
     * uninterpretedExpression = arbitrary string
     *
     * A quoted expression is meant to be pre-processed by an AST transformer that
     * converts it into another AST that no longer contains quoted expressions.
     * It is meant to allow third-party developers to extend Angular template
     * expression language. The `uninterpretedExpression` part of the quote is
     * therefore not interpreted by the Angular's own expression parser.
     */
    var /**
     * Represents a quoted expression of the form:
     *
     * quote = prefix `:` uninterpretedExpression
     * prefix = identifier
     * uninterpretedExpression = arbitrary string
     *
     * A quoted expression is meant to be pre-processed by an AST transformer that
     * converts it into another AST that no longer contains quoted expressions.
     * It is meant to allow third-party developers to extend Angular template
     * expression language. The `uninterpretedExpression` part of the quote is
     * therefore not interpreted by the Angular's own expression parser.
     */ Quote = (function (_super) {
        __extends(Quote, _super);
        function Quote(span, prefix, uninterpretedExpression, location) {
            var _this = _super.call(this, span) || this;
            _this.prefix = prefix;
            _this.uninterpretedExpression = uninterpretedExpression;
            _this.location = location;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        Quote.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitQuote(this, context);
            };
        /**
         * @return {?}
         */
        Quote.prototype.toString = /**
         * @return {?}
         */
            function () {
                return "Quote";
            };
        return Quote;
    }(AST));
    var EmptyExpr = (function (_super) {
        __extends(EmptyExpr, _super);
        function EmptyExpr() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        EmptyExpr.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                // do nothing
            };
        return EmptyExpr;
    }(AST));
    var ImplicitReceiver = (function (_super) {
        __extends(ImplicitReceiver, _super);
        function ImplicitReceiver() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        ImplicitReceiver.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitImplicitReceiver(this, context);
            };
        return ImplicitReceiver;
    }(AST));
    /**
     * Multiple expressions separated by a semicolon.
     */
    var /**
     * Multiple expressions separated by a semicolon.
     */ Chain = (function (_super) {
        __extends(Chain, _super);
        function Chain(span, expressions) {
            var _this = _super.call(this, span) || this;
            _this.expressions = expressions;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        Chain.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitChain(this, context);
            };
        return Chain;
    }(AST));
    var Conditional = (function (_super) {
        __extends(Conditional, _super);
        function Conditional(span, condition, trueExp, falseExp) {
            var _this = _super.call(this, span) || this;
            _this.condition = condition;
            _this.trueExp = trueExp;
            _this.falseExp = falseExp;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        Conditional.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitConditional(this, context);
            };
        return Conditional;
    }(AST));
    var PropertyRead = (function (_super) {
        __extends(PropertyRead, _super);
        function PropertyRead(span, receiver, name) {
            var _this = _super.call(this, span) || this;
            _this.receiver = receiver;
            _this.name = name;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        PropertyRead.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitPropertyRead(this, context);
            };
        return PropertyRead;
    }(AST));
    var PropertyWrite = (function (_super) {
        __extends(PropertyWrite, _super);
        function PropertyWrite(span, receiver, name, value) {
            var _this = _super.call(this, span) || this;
            _this.receiver = receiver;
            _this.name = name;
            _this.value = value;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        PropertyWrite.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitPropertyWrite(this, context);
            };
        return PropertyWrite;
    }(AST));
    var SafePropertyRead = (function (_super) {
        __extends(SafePropertyRead, _super);
        function SafePropertyRead(span, receiver, name) {
            var _this = _super.call(this, span) || this;
            _this.receiver = receiver;
            _this.name = name;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        SafePropertyRead.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitSafePropertyRead(this, context);
            };
        return SafePropertyRead;
    }(AST));
    var KeyedRead = (function (_super) {
        __extends(KeyedRead, _super);
        function KeyedRead(span, obj, key) {
            var _this = _super.call(this, span) || this;
            _this.obj = obj;
            _this.key = key;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        KeyedRead.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitKeyedRead(this, context);
            };
        return KeyedRead;
    }(AST));
    var KeyedWrite = (function (_super) {
        __extends(KeyedWrite, _super);
        function KeyedWrite(span, obj, key, value) {
            var _this = _super.call(this, span) || this;
            _this.obj = obj;
            _this.key = key;
            _this.value = value;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        KeyedWrite.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitKeyedWrite(this, context);
            };
        return KeyedWrite;
    }(AST));
    var BindingPipe = (function (_super) {
        __extends(BindingPipe, _super);
        function BindingPipe(span, exp, name, args) {
            var _this = _super.call(this, span) || this;
            _this.exp = exp;
            _this.name = name;
            _this.args = args;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        BindingPipe.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitPipe(this, context);
            };
        return BindingPipe;
    }(AST));
    var LiteralPrimitive = (function (_super) {
        __extends(LiteralPrimitive, _super);
        function LiteralPrimitive(span, value) {
            var _this = _super.call(this, span) || this;
            _this.value = value;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        LiteralPrimitive.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitLiteralPrimitive(this, context);
            };
        return LiteralPrimitive;
    }(AST));
    var LiteralArray = (function (_super) {
        __extends(LiteralArray, _super);
        function LiteralArray(span, expressions) {
            var _this = _super.call(this, span) || this;
            _this.expressions = expressions;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        LiteralArray.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitLiteralArray(this, context);
            };
        return LiteralArray;
    }(AST));
    var LiteralMap = (function (_super) {
        __extends(LiteralMap, _super);
        function LiteralMap(span, keys, values) {
            var _this = _super.call(this, span) || this;
            _this.keys = keys;
            _this.values = values;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        LiteralMap.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitLiteralMap(this, context);
            };
        return LiteralMap;
    }(AST));
    var Interpolation = (function (_super) {
        __extends(Interpolation, _super);
        function Interpolation(span, strings, expressions) {
            var _this = _super.call(this, span) || this;
            _this.strings = strings;
            _this.expressions = expressions;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        Interpolation.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitInterpolation(this, context);
            };
        return Interpolation;
    }(AST));
    var Binary = (function (_super) {
        __extends(Binary, _super);
        function Binary(span, operation, left, right) {
            var _this = _super.call(this, span) || this;
            _this.operation = operation;
            _this.left = left;
            _this.right = right;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        Binary.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitBinary(this, context);
            };
        return Binary;
    }(AST));
    var PrefixNot = (function (_super) {
        __extends(PrefixNot, _super);
        function PrefixNot(span, expression) {
            var _this = _super.call(this, span) || this;
            _this.expression = expression;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        PrefixNot.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitPrefixNot(this, context);
            };
        return PrefixNot;
    }(AST));
    var NonNullAssert = (function (_super) {
        __extends(NonNullAssert, _super);
        function NonNullAssert(span, expression) {
            var _this = _super.call(this, span) || this;
            _this.expression = expression;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        NonNullAssert.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitNonNullAssert(this, context);
            };
        return NonNullAssert;
    }(AST));
    var MethodCall = (function (_super) {
        __extends(MethodCall, _super);
        function MethodCall(span, receiver, name, args) {
            var _this = _super.call(this, span) || this;
            _this.receiver = receiver;
            _this.name = name;
            _this.args = args;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        MethodCall.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitMethodCall(this, context);
            };
        return MethodCall;
    }(AST));
    var SafeMethodCall = (function (_super) {
        __extends(SafeMethodCall, _super);
        function SafeMethodCall(span, receiver, name, args) {
            var _this = _super.call(this, span) || this;
            _this.receiver = receiver;
            _this.name = name;
            _this.args = args;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        SafeMethodCall.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitSafeMethodCall(this, context);
            };
        return SafeMethodCall;
    }(AST));
    var FunctionCall = (function (_super) {
        __extends(FunctionCall, _super);
        function FunctionCall(span, target, args) {
            var _this = _super.call(this, span) || this;
            _this.target = target;
            _this.args = args;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        FunctionCall.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return visitor.visitFunctionCall(this, context);
            };
        return FunctionCall;
    }(AST));
    var ASTWithSource = (function (_super) {
        __extends(ASTWithSource, _super);
        function ASTWithSource(ast, source, location, errors) {
            var _this = _super.call(this, new ParseSpan(0, source == null ? 0 : source.length)) || this;
            _this.ast = ast;
            _this.source = source;
            _this.location = location;
            _this.errors = errors;
            return _this;
        }
        /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
        ASTWithSource.prototype.visit = /**
         * @param {?} visitor
         * @param {?=} context
         * @return {?}
         */
            function (visitor, context) {
                if (context === void 0) {
                    context = null;
                }
                return this.ast.visit(visitor, context);
            };
        /**
         * @return {?}
         */
        ASTWithSource.prototype.toString = /**
         * @return {?}
         */
            function () {
                return this.source + " in " + this.location;
            };
        return ASTWithSource;
    }(AST));
    var TemplateBinding = (function () {
        function TemplateBinding(span, key, keyIsVar, name, expression) {
            this.span = span;
            this.key = key;
            this.keyIsVar = keyIsVar;
            this.name = name;
            this.expression = expression;
        }
        return TemplateBinding;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /** @enum {number} */
    var TokenType$1 = {
        Character: 0,
        Identifier: 1,
        Keyword: 2,
        String: 3,
        Operator: 4,
        Number: 5,
        Error: 6,
    };
    TokenType$1[TokenType$1.Character] = "Character";
    TokenType$1[TokenType$1.Identifier] = "Identifier";
    TokenType$1[TokenType$1.Keyword] = "Keyword";
    TokenType$1[TokenType$1.String] = "String";
    TokenType$1[TokenType$1.Operator] = "Operator";
    TokenType$1[TokenType$1.Number] = "Number";
    TokenType$1[TokenType$1.Error] = "Error";
    var /** @type {?} */ KEYWORDS = ["var", "let", "as", "null", "undefined", "true", "false", "if", "else", "this"];
    var Lexer = (function () {
        function Lexer() {
        }
        /**
         * @param {?} text
         * @return {?}
         */
        Lexer.prototype.tokenize = /**
         * @param {?} text
         * @return {?}
         */
            function (text) {
                var /** @type {?} */ scanner = new Scanner(text);
                var /** @type {?} */ tokens = [];
                var /** @type {?} */ token = scanner.scanToken();
                while (token != null) {
                    tokens.push(token);
                    token = scanner.scanToken();
                }
                return tokens;
            };
        return Lexer;
    }());
    var Token$1 = (function () {
        function Token(index, type, numValue, strValue) {
            this.index = index;
            this.type = type;
            this.numValue = numValue;
            this.strValue = strValue;
        }
        /**
         * @param {?} code
         * @return {?}
         */
        Token.prototype.isCharacter = /**
         * @param {?} code
         * @return {?}
         */
            function (code) {
                return this.type === TokenType$1.Character && this.numValue === code;
            };
        /**
         * @return {?}
         */
        Token.prototype.isNumber = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Number;
            };
        /**
         * @return {?}
         */
        Token.prototype.isString = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.String;
            };
        /**
         * @param {?} operater
         * @return {?}
         */
        Token.prototype.isOperator = /**
         * @param {?} operater
         * @return {?}
         */
            function (operater) {
                return this.type === TokenType$1.Operator && this.strValue === operater;
            };
        /**
         * @return {?}
         */
        Token.prototype.isIdentifier = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Identifier;
            };
        /**
         * @return {?}
         */
        Token.prototype.isKeyword = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Keyword;
            };
        /**
         * @return {?}
         */
        Token.prototype.isKeywordLet = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Keyword && this.strValue === "let";
            };
        /**
         * @return {?}
         */
        Token.prototype.isKeywordAs = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Keyword && this.strValue === "as";
            };
        /**
         * @return {?}
         */
        Token.prototype.isKeywordNull = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Keyword && this.strValue === "null";
            };
        /**
         * @return {?}
         */
        Token.prototype.isKeywordUndefined = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Keyword && this.strValue === "undefined";
            };
        /**
         * @return {?}
         */
        Token.prototype.isKeywordTrue = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Keyword && this.strValue === "true";
            };
        /**
         * @return {?}
         */
        Token.prototype.isKeywordFalse = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Keyword && this.strValue === "false";
            };
        /**
         * @return {?}
         */
        Token.prototype.isKeywordThis = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Keyword && this.strValue === "this";
            };
        /**
         * @return {?}
         */
        Token.prototype.isError = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Error;
            };
        /**
         * @return {?}
         */
        Token.prototype.toNumber = /**
         * @return {?}
         */
            function () {
                return this.type === TokenType$1.Number ? this.numValue : -1;
            };
        /**
         * @return {?}
         */
        Token.prototype.toString = /**
         * @return {?}
         */
            function () {
                switch (this.type) {
                    case TokenType$1.Character:
                    case TokenType$1.Identifier:
                    case TokenType$1.Keyword:
                    case TokenType$1.Operator:
                    case TokenType$1.String:
                    case TokenType$1.Error:
                        return this.strValue;
                    case TokenType$1.Number:
                        return this.numValue.toString();
                    default:
                        return null;
                }
            };
        return Token;
    }());
    /**
     * @param {?} index
     * @param {?} code
     * @return {?}
     */
    function newCharacterToken(index, code) {
        return new Token$1(index, TokenType$1.Character, code, String.fromCharCode(code));
    }
    /**
     * @param {?} index
     * @param {?} text
     * @return {?}
     */
    function newIdentifierToken(index, text) {
        return new Token$1(index, TokenType$1.Identifier, 0, text);
    }
    /**
     * @param {?} index
     * @param {?} text
     * @return {?}
     */
    function newKeywordToken(index, text) {
        return new Token$1(index, TokenType$1.Keyword, 0, text);
    }
    /**
     * @param {?} index
     * @param {?} text
     * @return {?}
     */
    function newOperatorToken(index, text) {
        return new Token$1(index, TokenType$1.Operator, 0, text);
    }
    /**
     * @param {?} index
     * @param {?} text
     * @return {?}
     */
    function newStringToken(index, text) {
        return new Token$1(index, TokenType$1.String, 0, text);
    }
    /**
     * @param {?} index
     * @param {?} n
     * @return {?}
     */
    function newNumberToken(index, n) {
        return new Token$1(index, TokenType$1.Number, n, "");
    }
    /**
     * @param {?} index
     * @param {?} message
     * @return {?}
     */
    function newErrorToken(index, message) {
        return new Token$1(index, TokenType$1.Error, 0, message);
    }
    var /** @type {?} */ EOF = new Token$1(-1, TokenType$1.Character, 0, "");
    var Scanner = (function () {
        function Scanner(input) {
            this.input = input;
            this.peek = 0;
            this.index = -1;
            this.length = input.length;
            this.advance();
        }
        /**
         * @return {?}
         */
        Scanner.prototype.advance = /**
         * @return {?}
         */
            function () {
                this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
            };
        /**
         * @return {?}
         */
        Scanner.prototype.scanToken = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ input = this.input;
                var /** @type {?} */ length = this.length;
                var /** @type {?} */ peek = this.peek;
                var /** @type {?} */ index = this.index;
                // Skip whitespace.
                while (peek <= $SPACE) {
                    if (++index >= length) {
                        peek = $EOF;
                        break;
                    }
                    else {
                        peek = input.charCodeAt(index);
                    }
                }
                this.peek = peek;
                this.index = index;
                if (index >= length) {
                    return null;
                }
                // Handle identifiers and numbers.
                if (isIdentifierStart(peek)) {
                    return this.scanIdentifier();
                }
                if (isDigit(peek)) {
                    return this.scanNumber(index);
                }
                var /** @type {?} */ start = index;
                switch (peek) {
                    case $PERIOD:
                        this.advance();
                        return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD);
                    case $LPAREN:
                    case $RPAREN:
                    case $LBRACE:
                    case $RBRACE:
                    case $LBRACKET:
                    case $RBRACKET:
                    case $COMMA:
                    case $COLON:
                    case $SEMICOLON:
                        return this.scanCharacter(start, peek);
                    case $SQ:
                    case $DQ:
                        return this.scanString();
                    case $HASH:
                    case $PLUS:
                    case $MINUS:
                    case $STAR:
                    case $SLASH:
                    case $PERCENT:
                    case $CARET:
                        return this.scanOperator(start, String.fromCharCode(peek));
                    case $QUESTION:
                        return this.scanComplexOperator(start, "?", $PERIOD, ".");
                    case $LT:
                    case $GT:
                        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=");
                    case $BANG:
                    case $EQ:
                        return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, "=", $EQ, "=");
                    case $AMPERSAND:
                        return this.scanComplexOperator(start, "&", $AMPERSAND, "&");
                    case $BAR:
                        return this.scanComplexOperator(start, "|", $BAR, "|");
                    case $NBSP:
                        while (isWhitespace(this.peek)) {
                            this.advance();
                        }
                        return this.scanToken();
                }
                this.advance();
                return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
            };
        /**
         * @param {?} start
         * @param {?} code
         * @return {?}
         */
        Scanner.prototype.scanCharacter = /**
         * @param {?} start
         * @param {?} code
         * @return {?}
         */
            function (start, code) {
                this.advance();
                return newCharacterToken(start, code);
            };
        /**
         * @param {?} start
         * @param {?} str
         * @return {?}
         */
        Scanner.prototype.scanOperator = /**
         * @param {?} start
         * @param {?} str
         * @return {?}
         */
            function (start, str) {
                this.advance();
                return newOperatorToken(start, str);
            };
        /**
         * Tokenize a 2/3 char long operator
         *
         * @param start start index in the expression
         * @param one first symbol (always part of the operator)
         * @param twoCode code point for the second symbol
         * @param two second symbol (part of the operator when the second code point matches)
         * @param threeCode code point for the third symbol
         * @param three third symbol (part of the operator when provided and matches source expression)
         */
        /**
         * Tokenize a 2/3 char long operator
         *
         * @param {?} start start index in the expression
         * @param {?} one first symbol (always part of the operator)
         * @param {?} twoCode code point for the second symbol
         * @param {?} two second symbol (part of the operator when the second code point matches)
         * @param {?=} threeCode code point for the third symbol
         * @param {?=} three third symbol (part of the operator when provided and matches source expression)
         * @return {?}
         */
        Scanner.prototype.scanComplexOperator = /**
         * Tokenize a 2/3 char long operator
         *
         * @param {?} start start index in the expression
         * @param {?} one first symbol (always part of the operator)
         * @param {?} twoCode code point for the second symbol
         * @param {?} two second symbol (part of the operator when the second code point matches)
         * @param {?=} threeCode code point for the third symbol
         * @param {?=} three third symbol (part of the operator when provided and matches source expression)
         * @return {?}
         */
            function (start, one, twoCode, two, threeCode, three) {
                this.advance();
                var /** @type {?} */ str = one;
                if (this.peek === twoCode) {
                    this.advance();
                    str += two;
                }
                if (threeCode != null && this.peek === threeCode) {
                    this.advance();
                    str += three;
                }
                return newOperatorToken(start, str);
            };
        /**
         * @return {?}
         */
        Scanner.prototype.scanIdentifier = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ start = this.index;
                this.advance();
                while (isIdentifierPart(this.peek)) {
                    this.advance();
                }
                var /** @type {?} */ str = this.input.substring(start, this.index);
                return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) : newIdentifierToken(start, str);
            };
        /**
         * @param {?} start
         * @return {?}
         */
        Scanner.prototype.scanNumber = /**
         * @param {?} start
         * @return {?}
         */
            function (start) {
                var /** @type {?} */ simple = this.index === start;
                this.advance(); // Skip initial digit.
                while (true) {
                    if (isDigit(this.peek)) ;
                    else if (this.peek === $PERIOD) {
                        simple = false;
                    }
                    else if (isExponentStart(this.peek)) {
                        this.advance();
                        if (isExponentSign(this.peek)) {
                            this.advance();
                        }
                        if (!isDigit(this.peek)) {
                            return this.error("Invalid exponent", -1);
                        }
                        simple = false;
                    }
                    else {
                        break;
                    }
                    this.advance();
                }
                var /** @type {?} */ str = this.input.substring(start, this.index);
                var /** @type {?} */ value = simple ? parseIntAutoRadix(str) : parseFloat(str);
                return newNumberToken(start, value);
            };
        /**
         * @return {?}
         */
        Scanner.prototype.scanString = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ start = this.index;
                var /** @type {?} */ quote = this.peek;
                this.advance(); // Skip initial quote.
                var /** @type {?} */ buffer = "";
                var /** @type {?} */ marker = this.index;
                var /** @type {?} */ input = this.input;
                while (this.peek !== quote) {
                    if (this.peek === $BACKSLASH) {
                        buffer += input.substring(marker, this.index);
                        this.advance();
                        var /** @type {?} */ unescapedCode = void 0;
                        // Workaround for TS2.1-introduced type strictness
                        this.peek = this.peek;
                        if (this.peek === $u) {
                            // 4 character hex code for unicode character.
                            var /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);
                            if (/^[0-9a-f]+$/i.test(hex)) {
                                unescapedCode = parseInt(hex, 16);
                            }
                            else {
                                return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
                            }
                            for (var /** @type {?} */ i = 0; i < 5; i++) {
                                this.advance();
                            }
                        }
                        else {
                            unescapedCode = unescape(this.peek);
                            this.advance();
                        }
                        buffer += String.fromCharCode(unescapedCode);
                        marker = this.index;
                    }
                    else if (this.peek === $EOF) {
                        return this.error("Unterminated quote", 0);
                    }
                    else {
                        this.advance();
                    }
                }
                var /** @type {?} */ last = input.substring(marker, this.index);
                this.advance(); // Skip terminating quote.
                return newStringToken(start, buffer + last);
            };
        /**
         * @param {?} message
         * @param {?} offset
         * @return {?}
         */
        Scanner.prototype.error = /**
         * @param {?} message
         * @param {?} offset
         * @return {?}
         */
            function (message, offset) {
                var /** @type {?} */ position = this.index + offset;
                return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
            };
        return Scanner;
    }());
    /**
     * @param {?} code
     * @return {?}
     */
    function isIdentifierStart(code) {
        return (($a <= code && code <= $z) ||
            ($A <= code && code <= $Z) ||
            code === $_ ||
            code === $$);
    }
    /**
     * @param {?} input
     * @return {?}
     */
    function isIdentifier(input) {
        if (input.length === 0) {
            return false;
        }
        var /** @type {?} */ scanner = new Scanner(input);
        if (!isIdentifierStart(scanner.peek)) {
            return false;
        }
        scanner.advance();
        while (scanner.peek !== $EOF) {
            if (!isIdentifierPart(scanner.peek)) {
                return false;
            }
            scanner.advance();
        }
        return true;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isIdentifierPart(code) {
        return isAsciiLetter(code) || isDigit(code) || code === $_ || code === $$;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isExponentStart(code) {
        return code === $e || code === $E;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isExponentSign(code) {
        return code === $MINUS || code === $PLUS;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function isQuote(code) {
        return code === $SQ || code === $DQ || code === $BT;
    }
    /**
     * @param {?} code
     * @return {?}
     */
    function unescape(code) {
        switch (code) {
            case $n:
                return $LF;
            case $f:
                return $FF;
            case $r:
                return $CR;
            case $t:
                return $TAB;
            case $v:
                return $VTAB;
            default:
                return code;
        }
    }
    /**
     * @param {?} text
     * @return {?}
     */
    function parseIntAutoRadix(text) {
        var /** @type {?} */ result = parseInt(text, 10);
        if (isNaN(result)) {
            throw new Error("Invalid integer literal when parsing " + text);
        }
        return result;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SplitInterpolation = (function () {
        function SplitInterpolation(strings, expressions, offsets) {
            this.strings = strings;
            this.expressions = expressions;
            this.offsets = offsets;
        }
        return SplitInterpolation;
    }());
    var TemplateBindingParseResult = (function () {
        function TemplateBindingParseResult(templateBindings, warnings, errors) {
            this.templateBindings = templateBindings;
            this.warnings = warnings;
            this.errors = errors;
        }
        return TemplateBindingParseResult;
    }());
    /**
     * @param {?} config
     * @return {?}
     */
    function _createInterpolateRegExp(config) {
        var /** @type {?} */ pattern = escapeRegExp(config.start) + "([\\s\\S]*?)" + escapeRegExp(config.end);
        return new RegExp(pattern, "g");
    }
    var Parser$1 = (function () {
        function Parser(_lexer) {
            this._lexer = _lexer;
            this.errors = [];
        }
        /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
        Parser.prototype.parseAction = /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
            function (input, location, interpolationConfig) {
                if (interpolationConfig === void 0) {
                    interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
                }
                this._checkNoInterpolation(input, location, interpolationConfig);
                var /** @type {?} */ sourceToLex = this._stripComments(input);
                var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));
                var /** @type {?} */ ast = new ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length).parseChain();
                return new ASTWithSource(ast, input, location, this.errors);
            };
        /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
        Parser.prototype.parseBinding = /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
            function (input, location, interpolationConfig) {
                if (interpolationConfig === void 0) {
                    interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
                }
                var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
                return new ASTWithSource(ast, input, location, this.errors);
            };
        /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
        Parser.prototype.parseSimpleBinding = /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
            function (input, location, interpolationConfig) {
                if (interpolationConfig === void 0) {
                    interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
                }
                var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
                var /** @type {?} */ errors = SimpleExpressionChecker.check(ast);
                if (errors.length > 0) {
                    this._reportError("Host binding expression cannot contain " + errors.join(" "), input, location);
                }
                return new ASTWithSource(ast, input, location, this.errors);
            };
        /**
         * @param {?} message
         * @param {?} input
         * @param {?} errLocation
         * @param {?=} ctxLocation
         * @return {?}
         */
        Parser.prototype._reportError = /**
         * @param {?} message
         * @param {?} input
         * @param {?} errLocation
         * @param {?=} ctxLocation
         * @return {?}
         */
            function (message, input, errLocation, ctxLocation) {
                this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
            };
        /**
         * @param {?} input
         * @param {?} location
         * @param {?} interpolationConfig
         * @return {?}
         */
        Parser.prototype._parseBindingAst = /**
         * @param {?} input
         * @param {?} location
         * @param {?} interpolationConfig
         * @return {?}
         */
            function (input, location, interpolationConfig) {
                // Quotes expressions use 3rd-party expression language. We don't want to use
                // our lexer or parser for that, so we check for that ahead of time.
                var /** @type {?} */ quote = this._parseQuote(input, location);
                if (quote != null) {
                    return quote;
                }
                this._checkNoInterpolation(input, location, interpolationConfig);
                var /** @type {?} */ sourceToLex = this._stripComments(input);
                var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);
                return new ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length).parseChain();
            };
        /**
         * @param {?} input
         * @param {?} location
         * @return {?}
         */
        Parser.prototype._parseQuote = /**
         * @param {?} input
         * @param {?} location
         * @return {?}
         */
            function (input, location) {
                if (input === null) {
                    return null;
                }
                var /** @type {?} */ prefixSeparatorIndex = input.indexOf(":");
                if (prefixSeparatorIndex === -1) {
                    return null;
                }
                var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();
                if (!isIdentifier(prefix)) {
                    return null;
                }
                var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
                return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
            };
        /**
         * @param {?} prefixToken
         * @param {?} input
         * @param {?} location
         * @return {?}
         */
        Parser.prototype.parseTemplateBindings = /**
         * @param {?} prefixToken
         * @param {?} input
         * @param {?} location
         * @return {?}
         */
            function (prefixToken, input, location) {
                var /** @type {?} */ tokens = this._lexer.tokenize(input);
                if (prefixToken) {
                    // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
                    var /** @type {?} */ prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
                        t.index = 0;
                        return t;
                    });
                    tokens.unshift.apply(tokens, __spread(prefixTokens));
                }
                return new ParseAST(input, location, tokens, input.length, false, this.errors, 0).parseTemplateBindings();
            };
        /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
        Parser.prototype.parseInterpolation = /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
            function (input, location, interpolationConfig) {
                if (interpolationConfig === void 0) {
                    interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
                }
                var /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);
                if (split === null) {
                    return null;
                }
                var /** @type {?} */ expressions = [];
                for (var /** @type {?} */ i = 0; i < split.expressions.length; ++i) {
                    var /** @type {?} */ expressionText = split.expressions[i];
                    var /** @type {?} */ sourceToLex = this._stripComments(expressionText);
                    var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);
                    var /** @type {?} */ ast = new ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length)).parseChain();
                    expressions.push(ast);
                }
                return new ASTWithSource(new Interpolation(new ParseSpan(0, input === null ? 0 : input.length), split.strings, expressions), input, location, this.errors);
            };
        /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
        Parser.prototype.splitInterpolation = /**
         * @param {?} input
         * @param {?} location
         * @param {?=} interpolationConfig
         * @return {?}
         */
            function (input, location, interpolationConfig) {
                if (interpolationConfig === void 0) {
                    interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
                }
                var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
                var /** @type {?} */ parts = input.split(regexp);
                if (parts.length <= 1) {
                    return null;
                }
                var /** @type {?} */ strings = [];
                var /** @type {?} */ expressions = [];
                var /** @type {?} */ offsets = [];
                var /** @type {?} */ offset = 0;
                for (var /** @type {?} */ i = 0; i < parts.length; i++) {
                    var /** @type {?} */ part = parts[i];
                    if (i % 2 === 0) {
                        // fixed string
                        strings.push(part);
                        offset += part.length;
                    }
                    else if (part.trim().length > 0) {
                        offset += interpolationConfig.start.length;
                        expressions.push(part);
                        offsets.push(offset);
                        offset += part.length + interpolationConfig.end.length;
                    }
                    else {
                        this._reportError("Blank expressions are not allowed in interpolated strings", input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
                        expressions.push("$implict");
                        offsets.push(offset);
                    }
                }
                return new SplitInterpolation(strings, expressions, offsets);
            };
        /**
         * @param {?} input
         * @param {?} location
         * @return {?}
         */
        Parser.prototype.wrapLiteralPrimitive = /**
         * @param {?} input
         * @param {?} location
         * @return {?}
         */
            function (input, location) {
                return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, input === null ? 0 : input.length), input), input, location, this.errors);
            };
        /**
         * @param {?} input
         * @return {?}
         */
        Parser.prototype._stripComments = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                var /** @type {?} */ i = this._commentStart(input);
                return i != null ? input.substring(0, i).trim() : input;
            };
        /**
         * @param {?} input
         * @return {?}
         */
        Parser.prototype._commentStart = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                var /** @type {?} */ outerQuote = null;
                for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {
                    var /** @type {?} */ char = input.charCodeAt(i);
                    var /** @type {?} */ nextChar = input.charCodeAt(i + 1);
                    if (char === $SLASH && nextChar === $SLASH && outerQuote === null) {
                        return i;
                    }
                    if (outerQuote === char) {
                        outerQuote = null;
                    }
                    else if (outerQuote === null && isQuote(char)) {
                        outerQuote = char;
                    }
                }
                return null;
            };
        /**
         * @param {?} input
         * @param {?} location
         * @param {?} interpolationConfig
         * @return {?}
         */
        Parser.prototype._checkNoInterpolation = /**
         * @param {?} input
         * @param {?} location
         * @param {?} interpolationConfig
         * @return {?}
         */
            function (input, location, interpolationConfig) {
                var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
                var /** @type {?} */ parts = input.split(regexp);
                if (parts.length > 1) {
                    this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
                }
            };
        /**
         * @param {?} parts
         * @param {?} partInErrIdx
         * @param {?} interpolationConfig
         * @return {?}
         */
        Parser.prototype._findInterpolationErrorColumn = /**
         * @param {?} parts
         * @param {?} partInErrIdx
         * @param {?} interpolationConfig
         * @return {?}
         */
            function (parts, partInErrIdx, interpolationConfig) {
                var /** @type {?} */ errLocation = "";
                for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {
                    errLocation += j % 2 === 0 ? parts[j] : "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
                }
                return errLocation.length;
            };
        return Parser;
    }());
    var ParseAST = (function () {
        function ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
            this.input = input;
            this.location = location;
            this.tokens = tokens;
            this.inputLength = inputLength;
            this.parseAction = parseAction;
            this.errors = errors;
            this.offset = offset;
            this.rparensExpected = 0;
            this.rbracketsExpected = 0;
            this.rbracesExpected = 0;
            this.index = 0;
        }
        /**
         * @param {?} offset
         * @return {?}
         */
        ParseAST.prototype.peek = /**
         * @param {?} offset
         * @return {?}
         */
            function (offset) {
                var /** @type {?} */ i = this.index + offset;
                return i < this.tokens.length ? this.tokens[i] : EOF;
            };
        Object.defineProperty(ParseAST.prototype, "next", {
            get: /**
             * @return {?}
             */ function () {
                return this.peek(0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParseAST.prototype, "inputIndex", {
            get: /**
             * @return {?}
             */ function () {
                return this.index < this.tokens.length ? this.next.index + this.offset : this.inputLength + this.offset;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} start
         * @return {?}
         */
        ParseAST.prototype.span = /**
         * @param {?} start
         * @return {?}
         */
            function (start) {
                return new ParseSpan(start, this.inputIndex);
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.advance = /**
         * @return {?}
         */
            function () {
                this.index++;
            };
        /**
         * @param {?} code
         * @return {?}
         */
        ParseAST.prototype.optionalCharacter = /**
         * @param {?} code
         * @return {?}
         */
            function (code) {
                if (this.next.isCharacter(code)) {
                    this.advance();
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.peekKeywordLet = /**
         * @return {?}
         */
            function () {
                return this.next.isKeywordLet();
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.peekKeywordAs = /**
         * @return {?}
         */
            function () {
                return this.next.isKeywordAs();
            };
        /**
         * @param {?} code
         * @return {?}
         */
        ParseAST.prototype.expectCharacter = /**
         * @param {?} code
         * @return {?}
         */
            function (code) {
                if (this.optionalCharacter(code)) {
                    return;
                }
                this.error("Missing expected " + String.fromCharCode(code));
            };
        /**
         * @param {?} op
         * @return {?}
         */
        ParseAST.prototype.optionalOperator = /**
         * @param {?} op
         * @return {?}
         */
            function (op) {
                if (this.next.isOperator(op)) {
                    this.advance();
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @param {?} operator
         * @return {?}
         */
        ParseAST.prototype.expectOperator = /**
         * @param {?} operator
         * @return {?}
         */
            function (operator) {
                if (this.optionalOperator(operator)) {
                    return;
                }
                this.error("Missing expected operator " + operator);
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.expectIdentifierOrKeyword = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ n = this.next;
                if (!n.isIdentifier() && !n.isKeyword()) {
                    this.error("Unexpected token " + n + ", expected identifier or keyword");
                    return "";
                }
                this.advance();
                return /** @type {?} */ (n.toString());
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.expectIdentifierOrKeywordOrString = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ n = this.next;
                if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
                    this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
                    return "";
                }
                this.advance();
                return /** @type {?} */ (n.toString());
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseChain = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ exprs = [];
                var /** @type {?} */ start = this.inputIndex;
                while (this.index < this.tokens.length) {
                    var /** @type {?} */ expr = this.parsePipe();
                    exprs.push(expr);
                    if (this.optionalCharacter($SEMICOLON)) {
                        if (!this.parseAction) {
                            this.error("Binding expression cannot contain chained expression");
                        }
                        while (this.optionalCharacter($SEMICOLON)) { } // read all semicolons
                    }
                    else if (this.index < this.tokens.length) {
                        this.error("Unexpected token '" + this.next + "'");
                    }
                }
                if (exprs.length === 0) {
                    return new EmptyExpr(this.span(start));
                }
                if (exprs.length === 1) {
                    return exprs[0];
                }
                return new Chain(this.span(start), exprs);
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parsePipe = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ result = this.parseExpression();
                if (this.optionalOperator("|")) {
                    if (this.parseAction) {
                        this.error("Cannot have a pipe in an action expression");
                    }
                    do {
                        var /** @type {?} */ name_1 = this.expectIdentifierOrKeyword();
                        var /** @type {?} */ args = [];
                        while (this.optionalCharacter($COLON)) {
                            args.push(this.parseExpression());
                        }
                        result = new BindingPipe(this.span(result.span.start), result, name_1, args);
                    } while (this.optionalOperator("|"));
                }
                return result;
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseExpression = /**
         * @return {?}
         */
            function () {
                return this.parseConditional();
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseConditional = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ start = this.inputIndex;
                var /** @type {?} */ result = this.parseLogicalOr();
                if (this.optionalOperator("?")) {
                    var /** @type {?} */ yes = this.parsePipe();
                    var /** @type {?} */ no = void 0;
                    if (!this.optionalCharacter($COLON)) {
                        var /** @type {?} */ end = this.inputIndex;
                        var /** @type {?} */ expression = this.input.substring(start, end);
                        this.error("Conditional expression " + expression + " requires all 3 expressions");
                        no = new EmptyExpr(this.span(start));
                    }
                    else {
                        no = this.parsePipe();
                    }
                    return new Conditional(this.span(start), result, yes, no);
                }
                else {
                    return result;
                }
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseLogicalOr = /**
         * @return {?}
         */
            function () {
                // '||'
                var /** @type {?} */ result = this.parseLogicalAnd();
                while (this.optionalOperator("||")) {
                    var /** @type {?} */ right = this.parseLogicalAnd();
                    result = new Binary(this.span(result.span.start), "||", result, right);
                }
                return result;
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseLogicalAnd = /**
         * @return {?}
         */
            function () {
                // '&&'
                var /** @type {?} */ result = this.parseEquality();
                while (this.optionalOperator("&&")) {
                    var /** @type {?} */ right = this.parseEquality();
                    result = new Binary(this.span(result.span.start), "&&", result, right);
                }
                return result;
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseEquality = /**
         * @return {?}
         */
            function () {
                // '==','!=','===','!=='
                var /** @type {?} */ result = this.parseRelational();
                while (this.next.type === TokenType$1.Operator) {
                    var /** @type {?} */ operator = this.next.strValue;
                    switch (operator) {
                        case "==":
                        case "===":
                        case "!=":
                        case "!==":
                            this.advance();
                            var /** @type {?} */ right = this.parseRelational();
                            result = new Binary(this.span(result.span.start), operator, result, right);
                            continue;
                    }
                    break;
                }
                return result;
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseRelational = /**
         * @return {?}
         */
            function () {
                // '<', '>', '<=', '>='
                var /** @type {?} */ result = this.parseAdditive();
                while (this.next.type === TokenType$1.Operator) {
                    var /** @type {?} */ operator = this.next.strValue;
                    switch (operator) {
                        case "<":
                        case ">":
                        case "<=":
                        case ">=":
                            this.advance();
                            var /** @type {?} */ right = this.parseAdditive();
                            result = new Binary(this.span(result.span.start), operator, result, right);
                            continue;
                    }
                    break;
                }
                return result;
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseAdditive = /**
         * @return {?}
         */
            function () {
                // '+', '-'
                var /** @type {?} */ result = this.parseMultiplicative();
                while (this.next.type === TokenType$1.Operator) {
                    var /** @type {?} */ operator = this.next.strValue;
                    switch (operator) {
                        case "+":
                        case "-":
                            this.advance();
                            var /** @type {?} */ right = this.parseMultiplicative();
                            result = new Binary(this.span(result.span.start), operator, result, right);
                            continue;
                    }
                    break;
                }
                return result;
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseMultiplicative = /**
         * @return {?}
         */
            function () {
                // '*', '%', '/'
                var /** @type {?} */ result = this.parsePrefix();
                while (this.next.type === TokenType$1.Operator) {
                    var /** @type {?} */ operator = this.next.strValue;
                    switch (operator) {
                        case "*":
                        case "%":
                        case "/":
                            this.advance();
                            var /** @type {?} */ right = this.parsePrefix();
                            result = new Binary(this.span(result.span.start), operator, result, right);
                            continue;
                    }
                    break;
                }
                return result;
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parsePrefix = /**
         * @return {?}
         */
            function () {
                if (this.next.type === TokenType$1.Operator) {
                    var /** @type {?} */ start = this.inputIndex;
                    var /** @type {?} */ operator = this.next.strValue;
                    var /** @type {?} */ result = void 0;
                    switch (operator) {
                        case "+":
                            this.advance();
                            return this.parsePrefix();
                        case "-":
                            this.advance();
                            result = this.parsePrefix();
                            return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
                        case "!":
                            this.advance();
                            result = this.parsePrefix();
                            return new PrefixNot(this.span(start), result);
                    }
                }
                return this.parseCallChain();
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseCallChain = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ result = this.parsePrimary();
                while (true) {
                    if (this.optionalCharacter($PERIOD)) {
                        result = this.parseAccessMemberOrMethodCall(result, false);
                    }
                    else if (this.optionalOperator("?.")) {
                        result = this.parseAccessMemberOrMethodCall(result, true);
                    }
                    else if (this.optionalCharacter($LBRACKET)) {
                        this.rbracketsExpected++;
                        var /** @type {?} */ key = this.parsePipe();
                        this.rbracketsExpected--;
                        this.expectCharacter($RBRACKET);
                        if (this.optionalOperator("=")) {
                            var /** @type {?} */ value = this.parseConditional();
                            result = new KeyedWrite(this.span(result.span.start), result, key, value);
                        }
                        else {
                            result = new KeyedRead(this.span(result.span.start), result, key);
                        }
                    }
                    else if (this.optionalCharacter($LPAREN)) {
                        this.rparensExpected++;
                        var /** @type {?} */ args = this.parseCallArguments();
                        this.rparensExpected--;
                        this.expectCharacter($RPAREN);
                        result = new FunctionCall(this.span(result.span.start), result, args);
                    }
                    else if (this.optionalOperator("!")) {
                        result = new NonNullAssert(this.span(result.span.start), result);
                    }
                    else {
                        return result;
                    }
                }
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parsePrimary = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ start = this.inputIndex;
                if (this.optionalCharacter($LPAREN)) {
                    this.rparensExpected++;
                    var /** @type {?} */ result = this.parsePipe();
                    this.rparensExpected--;
                    this.expectCharacter($RPAREN);
                    return result;
                }
                else if (this.next.isKeywordNull()) {
                    this.advance();
                    return new LiteralPrimitive(this.span(start), null);
                }
                else if (this.next.isKeywordUndefined()) {
                    this.advance();
                    return new LiteralPrimitive(this.span(start), void 0);
                }
                else if (this.next.isKeywordTrue()) {
                    this.advance();
                    return new LiteralPrimitive(this.span(start), true);
                }
                else if (this.next.isKeywordFalse()) {
                    this.advance();
                    return new LiteralPrimitive(this.span(start), false);
                }
                else if (this.next.isKeywordThis()) {
                    this.advance();
                    return new ImplicitReceiver(this.span(start));
                }
                else if (this.optionalCharacter($LBRACKET)) {
                    this.rbracketsExpected++;
                    var /** @type {?} */ elements = this.parseExpressionList($RBRACKET);
                    this.rbracketsExpected--;
                    this.expectCharacter($RBRACKET);
                    return new LiteralArray(this.span(start), elements);
                }
                else if (this.next.isCharacter($LBRACE)) {
                    return this.parseLiteralMap();
                }
                else if (this.next.isIdentifier()) {
                    return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
                }
                else if (this.next.isNumber()) {
                    var /** @type {?} */ value = this.next.toNumber();
                    this.advance();
                    return new LiteralPrimitive(this.span(start), value);
                }
                else if (this.next.isString()) {
                    var /** @type {?} */ literalValue = this.next.toString();
                    this.advance();
                    return new LiteralPrimitive(this.span(start), literalValue);
                }
                else if (this.index >= this.tokens.length) {
                    this.error("Unexpected end of expression: " + this.input);
                    return new EmptyExpr(this.span(start));
                }
                else {
                    this.error("Unexpected token " + this.next);
                    return new EmptyExpr(this.span(start));
                }
            };
        /**
         * @param {?} terminator
         * @return {?}
         */
        ParseAST.prototype.parseExpressionList = /**
         * @param {?} terminator
         * @return {?}
         */
            function (terminator) {
                var /** @type {?} */ result = [];
                if (!this.next.isCharacter(terminator)) {
                    do {
                        result.push(this.parsePipe());
                    } while (this.optionalCharacter($COMMA));
                }
                return result;
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseLiteralMap = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ keys = [];
                var /** @type {?} */ values = [];
                var /** @type {?} */ start = this.inputIndex;
                this.expectCharacter($LBRACE);
                if (!this.optionalCharacter($RBRACE)) {
                    this.rbracesExpected++;
                    do {
                        var /** @type {?} */ quoted = this.next.isString();
                        var /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();
                        keys.push({ key: key, quoted: quoted });
                        this.expectCharacter($COLON);
                        values.push(this.parsePipe());
                    } while (this.optionalCharacter($COMMA));
                    this.rbracesExpected--;
                    this.expectCharacter($RBRACE);
                }
                return new LiteralMap(this.span(start), keys, values);
            };
        /**
         * @param {?} receiver
         * @param {?=} isSafe
         * @return {?}
         */
        ParseAST.prototype.parseAccessMemberOrMethodCall = /**
         * @param {?} receiver
         * @param {?=} isSafe
         * @return {?}
         */
            function (receiver, isSafe) {
                if (isSafe === void 0) {
                    isSafe = false;
                }
                var /** @type {?} */ start = receiver.span.start;
                var /** @type {?} */ id = this.expectIdentifierOrKeyword();
                if (this.optionalCharacter($LPAREN)) {
                    this.rparensExpected++;
                    var /** @type {?} */ args = this.parseCallArguments();
                    this.expectCharacter($RPAREN);
                    this.rparensExpected--;
                    var /** @type {?} */ span = this.span(start);
                    return isSafe ? new SafeMethodCall(span, receiver, id, args) : new MethodCall(span, receiver, id, args);
                }
                else {
                    if (isSafe) {
                        if (this.optionalOperator("=")) {
                            this.error("The '?.' operator cannot be used in the assignment");
                            return new EmptyExpr(this.span(start));
                        }
                        else {
                            return new SafePropertyRead(this.span(start), receiver, id);
                        }
                    }
                    else {
                        if (this.optionalOperator("=")) {
                            if (!this.parseAction) {
                                this.error("Bindings cannot contain assignments");
                                return new EmptyExpr(this.span(start));
                            }
                            var /** @type {?} */ value = this.parseConditional();
                            return new PropertyWrite(this.span(start), receiver, id, value);
                        }
                        else {
                            return new PropertyRead(this.span(start), receiver, id);
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseCallArguments = /**
         * @return {?}
         */
            function () {
                if (this.next.isCharacter($RPAREN)) {
                    return [];
                }
                var /** @type {?} */ positionals = [];
                do {
                    positionals.push(this.parsePipe());
                } while (this.optionalCharacter($COMMA));
                return /** @type {?} */ (positionals);
            };
        /**
         * An identifier, a keyword, a string with an optional `-` inbetween.
         */
        /**
         * An identifier, a keyword, a string with an optional `-` inbetween.
         * @return {?}
         */
        ParseAST.prototype.expectTemplateBindingKey = /**
         * An identifier, a keyword, a string with an optional `-` inbetween.
         * @return {?}
         */
            function () {
                var /** @type {?} */ result = "";
                var /** @type {?} */ operatorFound = false;
                do {
                    result += this.expectIdentifierOrKeywordOrString();
                    operatorFound = this.optionalOperator("-");
                    if (operatorFound) {
                        result += "-";
                    }
                } while (operatorFound);
                return result.toString();
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.parseTemplateBindings = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ bindings = [];
                var /** @type {?} */ prefix = ((null));
                var /** @type {?} */ warnings = [];
                while (this.index < this.tokens.length) {
                    var /** @type {?} */ start = this.inputIndex;
                    var /** @type {?} */ keyIsVar = this.peekKeywordLet();
                    if (keyIsVar) {
                        this.advance();
                    }
                    var /** @type {?} */ rawKey = this.expectTemplateBindingKey();
                    var /** @type {?} */ key = rawKey;
                    if (!keyIsVar) {
                        if (prefix === null) {
                            prefix = key;
                        }
                        else {
                            key = prefix + key[0].toUpperCase() + key.substring(1);
                        }
                    }
                    this.optionalCharacter($COLON);
                    var /** @type {?} */ name_2 = ((null));
                    var /** @type {?} */ expression = ((null));
                    if (keyIsVar) {
                        if (this.optionalOperator("=")) {
                            name_2 = this.expectTemplateBindingKey();
                        }
                        else {
                            name_2 = "$implicit";
                        }
                    }
                    else if (this.peekKeywordAs()) {
                        var /** @type {?} */ letStart = this.inputIndex;
                        this.advance(); // consume `as`
                        name_2 = rawKey;
                        key = this.expectTemplateBindingKey(); // read local var name
                        keyIsVar = true;
                    }
                    else if (this.next !== EOF && !this.peekKeywordLet()) {
                        var /** @type {?} */ st = this.inputIndex;
                        var /** @type {?} */ ast = this.parsePipe();
                        var /** @type {?} */ source = this.input.substring(st - this.offset, this.inputIndex - this.offset);
                        expression = new ASTWithSource(ast, source, this.location, this.errors);
                    }
                    bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));
                    if (this.peekKeywordAs() && !keyIsVar) {
                        var /** @type {?} */ letStart = this.inputIndex;
                        this.advance(); // consume `as`
                        var /** @type {?} */ letName = this.expectTemplateBindingKey(); // read local var name
                        bindings.push(new TemplateBinding(this.span(letStart), letName, true, key, /** @type {?} */ ((null))));
                    }
                    if (!this.optionalCharacter($SEMICOLON)) {
                        this.optionalCharacter($COMMA);
                    }
                }
                return new TemplateBindingParseResult(bindings, warnings, this.errors);
            };
        /**
         * @param {?} message
         * @param {?=} index
         * @return {?}
         */
        ParseAST.prototype.error = /**
         * @param {?} message
         * @param {?=} index
         * @return {?}
         */
            function (message, index) {
                if (index === void 0) {
                    index = null;
                }
                this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
                this.skip();
            };
        /**
         * @param {?=} index
         * @return {?}
         */
        ParseAST.prototype.locationText = /**
         * @param {?=} index
         * @return {?}
         */
            function (index) {
                if (index === void 0) {
                    index = null;
                }
                if (index === null) {
                    index = this.index;
                }
                return index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
            };
        /**
         * @return {?}
         */
        ParseAST.prototype.skip = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ n = this.next;
                while (this.index < this.tokens.length &&
                    !n.isCharacter($SEMICOLON) &&
                    (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
                    (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
                    (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
                    if (this.next.isError()) {
                        this.errors.push(new ParserError(/** @type {?} */ ((this.next.toString())), this.input, this.locationText(), this.location));
                    }
                    this.advance();
                    n = this.next;
                }
            };
        return ParseAST;
    }());
    var SimpleExpressionChecker = (function () {
        function SimpleExpressionChecker() {
            this.errors = [];
        }
        /**
         * @param {?} ast
         * @return {?}
         */
        SimpleExpressionChecker.check = /**
         * @param {?} ast
         * @return {?}
         */
            function (ast) {
                var /** @type {?} */ s = new SimpleExpressionChecker();
                ast.visit(s);
                return s.errors;
            };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitImplicitReceiver = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitInterpolation = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitLiteralPrimitive = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitPropertyRead = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitPropertyWrite = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitSafePropertyRead = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitMethodCall = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitSafeMethodCall = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitFunctionCall = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitLiteralArray = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) {
                this.visitAll(ast.expressions);
            };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitLiteralMap = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) {
                this.visitAll(ast.values);
            };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitBinary = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitPrefixNot = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitNonNullAssert = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitConditional = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitPipe = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) {
                this.errors.push("pipes");
            };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitKeyedRead = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitKeyedWrite = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} asts
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitAll = /**
         * @param {?} asts
         * @return {?}
         */
            function (asts) {
                var _this = this;
                return asts.map(function (node) { return node.visit(_this); });
            };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitChain = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
        SimpleExpressionChecker.prototype.visitQuote = /**
         * @param {?} ast
         * @param {?} context
         * @return {?}
         */
            function (ast, context) { };
        return SimpleExpressionChecker;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @license
     * Copyright Google Inc. All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    var /** @type {?} */ TAG_TO_PLACEHOLDER_NAMES = {
        'A': 'LINK',
        'B': 'BOLD_TEXT',
        'BR': 'LINE_BREAK',
        'EM': 'EMPHASISED_TEXT',
        'H1': 'HEADING_LEVEL1',
        'H2': 'HEADING_LEVEL2',
        'H3': 'HEADING_LEVEL3',
        'H4': 'HEADING_LEVEL4',
        'H5': 'HEADING_LEVEL5',
        'H6': 'HEADING_LEVEL6',
        'HR': 'HORIZONTAL_RULE',
        'I': 'ITALIC_TEXT',
        'LI': 'LIST_ITEM',
        'LINK': 'MEDIA_LINK',
        'OL': 'ORDERED_LIST',
        'P': 'PARAGRAPH',
        'Q': 'QUOTATION',
        'S': 'STRIKETHROUGH_TEXT',
        'SMALL': 'SMALL_TEXT',
        'SUB': 'SUBSTRIPT',
        'SUP': 'SUPERSCRIPT',
        'TBODY': 'TABLE_BODY',
        'TD': 'TABLE_CELL',
        'TFOOT': 'TABLE_FOOTER',
        'TH': 'TABLE_HEADER_CELL',
        'THEAD': 'TABLE_HEADER',
        'TR': 'TABLE_ROW',
        'TT': 'MONOSPACED_TEXT',
        'U': 'UNDERLINED_TEXT',
        'UL': 'UNORDERED_LIST',
    };
    /**
     * Creates unique names for placeholder with different content.
     *
     * Returns the same placeholder name when the content is identical.
     *
     * \@internal
     */
    var /**
     * Creates unique names for placeholder with different content.
     *
     * Returns the same placeholder name when the content is identical.
     *
     * \@internal
     */ PlaceholderRegistry = (function () {
        function PlaceholderRegistry() {
            this._placeHolderNameCounts = {};
            this._signatureToName = {};
        }
        /**
         * @param {?} tag
         * @param {?} attrs
         * @param {?} isVoid
         * @return {?}
         */
        PlaceholderRegistry.prototype.getStartTagPlaceholderName = /**
         * @param {?} tag
         * @param {?} attrs
         * @param {?} isVoid
         * @return {?}
         */
            function (tag, attrs, isVoid) {
                var /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);
                if (this._signatureToName[signature]) {
                    return this._signatureToName[signature];
                }
                var /** @type {?} */ upperTag = tag.toUpperCase();
                var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
                var /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
                this._signatureToName[signature] = name;
                return name;
            };
        /**
         * @param {?} tag
         * @return {?}
         */
        PlaceholderRegistry.prototype.getCloseTagPlaceholderName = /**
         * @param {?} tag
         * @return {?}
         */
            function (tag) {
                var /** @type {?} */ signature = this._hashClosingTag(tag);
                if (this._signatureToName[signature]) {
                    return this._signatureToName[signature];
                }
                var /** @type {?} */ upperTag = tag.toUpperCase();
                var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
                var /** @type {?} */ name = this._generateUniqueName("CLOSE_" + baseName);
                this._signatureToName[signature] = name;
                return name;
            };
        /**
         * @param {?} name
         * @param {?} content
         * @return {?}
         */
        PlaceholderRegistry.prototype.getPlaceholderName = /**
         * @param {?} name
         * @param {?} content
         * @return {?}
         */
            function (name, content) {
                var /** @type {?} */ upperName = name.toUpperCase();
                var /** @type {?} */ signature = "PH: " + upperName + "=" + content;
                if (this._signatureToName[signature]) {
                    return this._signatureToName[signature];
                }
                var /** @type {?} */ uniqueName = this._generateUniqueName(upperName);
                this._signatureToName[signature] = uniqueName;
                return uniqueName;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        PlaceholderRegistry.prototype.getUniquePlaceholder = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return this._generateUniqueName(name.toUpperCase());
            };
        /**
         * @param {?} tag
         * @param {?} attrs
         * @param {?} isVoid
         * @return {?}
         */
        PlaceholderRegistry.prototype._hashTag = /**
         * @param {?} tag
         * @param {?} attrs
         * @param {?} isVoid
         * @return {?}
         */
            function (tag, attrs, isVoid) {
                var /** @type {?} */ start = "<" + tag;
                var /** @type {?} */ strAttrs = Object.keys(attrs).sort().map(function (name) { return " " + name + "=" + attrs[name]; }).join('');
                var /** @type {?} */ end = isVoid ? '/>' : "></" + tag + ">";
                return start + strAttrs + end;
            };
        /**
         * @param {?} tag
         * @return {?}
         */
        PlaceholderRegistry.prototype._hashClosingTag = /**
         * @param {?} tag
         * @return {?}
         */
            function (tag) { return this._hashTag("/" + tag, {}, false); };
        /**
         * @param {?} base
         * @return {?}
         */
        PlaceholderRegistry.prototype._generateUniqueName = /**
         * @param {?} base
         * @return {?}
         */
            function (base) {
                var /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);
                if (!seen) {
                    this._placeHolderNameCounts[base] = 1;
                    return base;
                }
                var /** @type {?} */ id = this._placeHolderNameCounts[base];
                this._placeHolderNameCounts[base] = id + 1;
                return base + "_" + id;
            };
        return PlaceholderRegistry;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ _expParser = new Parser$1(new Lexer());
    /**
     * Returns a function converting html nodes to an i18n Message given an interpolationConfig
     * @param {?} interpolationConfig
     * @return {?}
     */
    function createI18nMessageFactory(interpolationConfig) {
        var /** @type {?} */ visitor = new I18nVisitor(_expParser, interpolationConfig);
        return function (nodes, meaning, description, id) {
            return visitor.toI18nMessage(nodes, meaning, description, id);
        };
    }
    var I18nVisitor = (function () {
        function I18nVisitor(_expressionParser, _interpolationConfig) {
            this._expressionParser = _expressionParser;
            this._interpolationConfig = _interpolationConfig;
        }
        /**
         * @param {?} nodes
         * @param {?} meaning
         * @param {?} description
         * @param {?} id
         * @return {?}
         */
        I18nVisitor.prototype.toI18nMessage = /**
         * @param {?} nodes
         * @param {?} meaning
         * @param {?} description
         * @param {?} id
         * @return {?}
         */
            function (nodes, meaning, description, id) {
                this._isIcu = nodes.length === 1 && nodes[0] instanceof Expansion;
                this._icuDepth = 0;
                this._placeholderRegistry = new PlaceholderRegistry();
                this._placeholderToContent = {};
                this._placeholderToMessage = {};
                var /** @type {?} */ i18nodes = visitAll(this, nodes, {});
                return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);
            };
        /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
        I18nVisitor.prototype.visitElement = /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
            function (el, context) {
                var /** @type {?} */ children = visitAll(this, el.children);
                var /** @type {?} */ attrs = {};
                el.attrs.forEach(function (attr) {
                    // Do not visit the attributes, translatable ones are top-level ASTs
                    attrs[attr.name] = attr.value;
                });
                var /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;
                var /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
                this._placeholderToContent[startPhName] = el.sourceSpan ? /** @type {?} */ ((el.sourceSpan)).toString() : "";
                var /** @type {?} */ closePhName = "";
                if (!isVoid) {
                    closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
                    this._placeholderToContent[closePhName] = "</" + el.name + ">";
                }
                return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, /** @type {?} */ ((el.sourceSpan)));
            };
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
        I18nVisitor.prototype.visitAttribute = /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
            function (attribute, context) {
                return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
            };
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        I18nVisitor.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) {
                return this._visitTextWithInterpolation(text.value, /** @type {?} */ ((text.sourceSpan)));
            };
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
        I18nVisitor.prototype.visitComment = /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
            function (comment, context) {
                return null;
            };
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
        I18nVisitor.prototype.visitExpansion = /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
            function (icu, context) {
                var _this = this;
                this._icuDepth++;
                var /** @type {?} */ i18nIcuCases = {};
                var /** @type {?} */ i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
                icu.cases.forEach(function (caze) {
                    i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);
                });
                this._icuDepth--;
                if (this._isIcu || this._icuDepth > 0) {
                    // Returns an ICU node when:
                    // - the message (vs a part of the message) is an ICU message, or
                    // - the ICU message is nested.
                    var /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);
                    i18nIcu.expressionPlaceholder = expPh;
                    this._placeholderToContent[expPh] = icu.switchValue;
                    return i18nIcu;
                }
                // Else returns a placeholder
                // ICU placeholders should not be replaced with their original content but with the their
                // translations. We need to create a new visitor (they are not re-entrant) to compute the
                // message id.
                // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
                var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName("ICU", icu.sourceSpan.toString());
                var /** @type {?} */ visitor = new I18nVisitor(this._expressionParser, this._interpolationConfig);
                this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], "", "", "");
                return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
            };
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
        I18nVisitor.prototype.visitExpansionCase = /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
            function (icuCase, context) {
                throw new Error("Unreachable code");
            };
        /**
         * @param {?} text
         * @param {?} sourceSpan
         * @return {?}
         */
        I18nVisitor.prototype._visitTextWithInterpolation = /**
         * @param {?} text
         * @param {?} sourceSpan
         * @return {?}
         */
            function (text, sourceSpan) {
                var /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
                if (!splitInterpolation) {
                    // No expression, return a single text
                    return new Text$1(text, sourceSpan);
                }
                // Return a group of text + expressions
                var /** @type {?} */ nodes = [];
                var /** @type {?} */ container = new Container(nodes, sourceSpan);
                var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
                for (var /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {
                    var /** @type {?} */ expression = splitInterpolation.expressions[i];
                    var /** @type {?} */ baseName = extractPlaceholderName(expression) || "INTERPOLATION";
                    var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
                    if (splitInterpolation.strings[i].length) {
                        // No need to add empty strings
                        nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
                    }
                    nodes.push(new Placeholder(expression, phName, sourceSpan));
                    this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
                }
                // The last index contains no expression
                var /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;
                if (splitInterpolation.strings[lastStringIdx].length) {
                    nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
                }
                return container;
            };
        return I18nVisitor;
    }());
    var /** @type {?} */ _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*("|')([\s\S]*?)\1[\s\S]*\)/g;
    /**
     * @param {?} input
     * @return {?}
     */
    function extractPlaceholderName(input) {
        return input.split(_CUSTOM_PH_EXP)[2];
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ _I18N_ATTR = "i18n";
    var HtmlParser = (function (_super) {
        __extends(HtmlParser, _super);
        function HtmlParser(interpolationConfig) {
            if (interpolationConfig === void 0) {
                interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
            }
            var _this = _super.call(this, getHtmlTagDefinition) || this;
            _this.interpolationConfig = interpolationConfig;
            return _this;
        }
        /**
         * @param {?} source
         * @param {?} url
         * @param {?=} parseExpansionForms
         * @return {?}
         */
        HtmlParser.prototype.parse = /**
         * @param {?} source
         * @param {?} url
         * @param {?=} parseExpansionForms
         * @return {?}
         */
            function (source, url, parseExpansionForms) {
                if (parseExpansionForms === void 0) {
                    parseExpansionForms = false;
                }
                return _super.prototype.parse.call(this, source, url, parseExpansionForms, this.interpolationConfig);
            };
        /**
         * Extract translatable messages from an html AST
         */
        /**
         * Extract translatable messages from an html AST
         * @param {?} nodes
         * @return {?}
         */
        HtmlParser.prototype.extractMessages = /**
         * Extract translatable messages from an html AST
         * @param {?} nodes
         * @return {?}
         */
            function (nodes) {
                var /** @type {?} */ visitor = new Visitor$4(["wrapper"]);
                // Construct a single fake root element
                var /** @type {?} */ wrapper = new Element("wrapper", [], nodes, /** @type {?} */ ((undefined)), undefined, undefined);
                return visitor.extract(wrapper, this.interpolationConfig);
            };
        /**
         * @param {?} nodes
         * @param {?} translations
         * @param {?} params
         * @param {?=} metadata
         * @param {?=} implicitTags
         * @return {?}
         */
        HtmlParser.prototype.mergeTranslations = /**
         * @param {?} nodes
         * @param {?} translations
         * @param {?} params
         * @param {?=} metadata
         * @param {?=} implicitTags
         * @return {?}
         */
            function (nodes, translations, params, metadata, implicitTags) {
                if (implicitTags === void 0) {
                    implicitTags = [];
                }
                var /** @type {?} */ visitor = new Visitor$4(implicitTags);
                // Construct a single fake root element
                var /** @type {?} */ wrapper = new Element("wrapper", [], nodes, /** @type {?} */ ((undefined)), undefined, undefined);
                return visitor.merge(wrapper, translations, this.interpolationConfig, params, metadata);
            };
        return HtmlParser;
    }(Parser));
    var ExtractionResult = (function () {
        function ExtractionResult(messages, errors) {
            this.messages = messages;
            this.errors = errors;
        }
        return ExtractionResult;
    }());
    /**
     * A container for translated messages
     */
    var /**
     * A container for translated messages
     */ TranslationBundle = (function () {
        function TranslationBundle(i18nNodesByMsgId, digest, interpolationConfig, missingTranslationStrategy, mapperFactory, console) {
            if (i18nNodesByMsgId === void 0) {
                i18nNodesByMsgId = {};
            }
            this.i18nNodesByMsgId = i18nNodesByMsgId;
            this.digest = digest;
            this.mapperFactory = mapperFactory;
            this.i18nToHtml = new I18nToHtmlVisitor(i18nNodesByMsgId, digest, /** @type {?} */ ((mapperFactory)), missingTranslationStrategy, interpolationConfig, console);
        }
        // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.
        /**
         * @param {?} content
         * @param {?} url
         * @param {?} digest
         * @param {?} createNameMapper
         * @param {?} loadFct
         * @param {?} missingTranslationStrategy
         * @param {?=} interpolationConfig
         * @return {?}
         */
        TranslationBundle.load = /**
         * @param {?} content
         * @param {?} url
         * @param {?} digest
         * @param {?} createNameMapper
         * @param {?} loadFct
         * @param {?} missingTranslationStrategy
         * @param {?=} interpolationConfig
         * @return {?}
         */
            function (content, url, digest, createNameMapper, loadFct, missingTranslationStrategy, interpolationConfig) {
                if (interpolationConfig === void 0) {
                    interpolationConfig = DEFAULT_INTERPOLATION_CONFIG;
                }
                var /** @type {?} */ i18nNodesByMsgId = loadFct(content, url);
                var /** @type {?} */ digestFn = function (m) { return digest(m); };
                var /** @type {?} */ mapperFactory = function (m) { return ((createNameMapper(m))); };
                return new TranslationBundle(i18nNodesByMsgId, digestFn, interpolationConfig, missingTranslationStrategy, mapperFactory, console);
            };
        // Returns the translation as HTML nodes from the given source message.
        /**
         * @param {?} srcMsg
         * @param {?} params
         * @return {?}
         */
        TranslationBundle.prototype.get = /**
         * @param {?} srcMsg
         * @param {?} params
         * @return {?}
         */
            function (srcMsg, params) {
                var /** @type {?} */ htmlRes = this.i18nToHtml.convert(srcMsg, params);
                if (htmlRes.errors.length) {
                    throw new Error(htmlRes.errors.join("\n"));
                }
                return htmlRes.nodes;
            };
        /**
         * @param {?} srcMsg
         * @return {?}
         */
        TranslationBundle.prototype.has = /**
         * @param {?} srcMsg
         * @return {?}
         */
            function (srcMsg) {
                return this.digest(srcMsg) in this.i18nNodesByMsgId;
            };
        return TranslationBundle;
    }());
    var I18nToHtmlVisitor = (function () {
        function I18nToHtmlVisitor(_i18nNodesByMsgId, _digest, _mapperFactory, _missingTranslationStrategy, _interpolationConfig, _console) {
            if (_i18nNodesByMsgId === void 0) {
                _i18nNodesByMsgId = {};
            }
            this._i18nNodesByMsgId = _i18nNodesByMsgId;
            this._digest = _digest;
            this._mapperFactory = _mapperFactory;
            this._missingTranslationStrategy = _missingTranslationStrategy;
            this._interpolationConfig = _interpolationConfig;
            this._console = _console;
            this._contextStack = [];
            this._errors = [];
        }
        /**
         * @param {?} srcMsg
         * @param {?} params
         * @return {?}
         */
        I18nToHtmlVisitor.prototype.convert = /**
         * @param {?} srcMsg
         * @param {?} params
         * @return {?}
         */
            function (srcMsg, params) {
                this._contextStack.length = 0;
                this._errors.length = 0;
                this._params = params;
                this._paramKeys = Object.keys(params);
                // i18n to text
                var /** @type {?} */ text = this.convertToText(srcMsg);
                // text to html
                var /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;
                var /** @type {?} */ htmlParser = new HtmlParser().parse(text, url, true);
                return {
                    nodes: htmlParser.rootNodes,
                    errors: __spread(this._errors, htmlParser.errors)
                };
            };
        /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
        I18nToHtmlVisitor.prototype.visitText = /**
         * @param {?} text
         * @param {?=} context
         * @return {?}
         */
            function (text, context) {
                return text.value;
            };
        /**
         * @param {?} container
         * @param {?=} context
         * @return {?}
         */
        I18nToHtmlVisitor.prototype.visitContainer = /**
         * @param {?} container
         * @param {?=} context
         * @return {?}
         */
            function (container, context) {
                var _this = this;
                return container.children.map(function (n) { return n.visit(_this); }).join("");
            };
        /**
         * @param {?} icu
         * @param {?=} context
         * @return {?}
         */
        I18nToHtmlVisitor.prototype.visitIcu = /**
         * @param {?} icu
         * @param {?=} context
         * @return {?}
         */
            function (icu, context) {
                var _this = this;
                var /** @type {?} */ cases = Object.keys(icu.cases).map(function (k) { return k + " {" + icu.cases[k].visit(_this) + "}"; });
                // TODO(vicb): Once all format switch to using expression placeholders
                // we should throw when the placeholder is not in the source message
                var /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression)
                    ? this._srcMsg.placeholders[icu.expression]
                    : icu.expression;
                return "{" + exp + ", " + icu.type + ", " + cases.join(" ") + "}";
            };
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        I18nToHtmlVisitor.prototype.visitPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) {
                var /** @type {?} */ phName = this._mapper(ph.name);
                if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
                    return this.convertToValue(this._srcMsg.placeholders[phName]);
                }
                if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
                    return this.convertToText(this._srcMsg.placeholderToMessage[phName]);
                }
                this._addError(ph, "Unknown placeholder \"" + ph.name + "\"");
                return "";
            };
        // Loaded message contains only placeholders (vs tag and icu placeholders).
        // However when a translation can not be found, we need to serialize the source message
        // which can contain tag placeholders
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        I18nToHtmlVisitor.prototype.visitTagPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) {
                var _this = this;
                var /** @type {?} */ tag = "" + ph.tag;
                var /** @type {?} */ attrs = Object.keys(ph.attrs)
                    .map(function (name) { return name + "=\"" + ph.attrs[name] + "\""; })
                    .join(" ");
                if (ph.isVoid) {
                    return "<" + tag + " " + attrs + "/>";
                }
                var /** @type {?} */ children = ph.children.map(function (c) { return c.visit(_this); }).join("");
                return "<" + tag + " " + attrs + ">" + children + "</" + tag + ">";
            };
        // Loaded message contains only placeholders (vs tag and icu placeholders).
        // However when a translation can not be found, we need to serialize the source message
        // which can contain tag placeholders
        /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
        I18nToHtmlVisitor.prototype.visitIcuPlaceholder = /**
         * @param {?} ph
         * @param {?=} context
         * @return {?}
         */
            function (ph, context) {
                // An ICU placeholder references the source message to be serialized
                return this.convertToText(this._srcMsg.placeholderToMessage[ph.name]);
            };
        /**
         * Convert a source message to a translated text string:
         * - text nodes are replaced with their translation,
         * - placeholders are replaced with their content,
         * - ICU nodes are converted to ICU expressions.
         * @param {?} srcMsg
         * @return {?}
         */
        I18nToHtmlVisitor.prototype.convertToText = /**
         * Convert a source message to a translated text string:
         * - text nodes are replaced with their translation,
         * - placeholders are replaced with their content,
         * - ICU nodes are converted to ICU expressions.
         * @param {?} srcMsg
         * @return {?}
         */
            function (srcMsg) {
                var _this = this;
                var /** @type {?} */ id = this._digest(srcMsg);
                var /** @type {?} */ mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
                var /** @type {?} */ nodes;
                this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });
                this._srcMsg = srcMsg;
                if (this._i18nNodesByMsgId.hasOwnProperty(id)) {
                    // When there is a translation use its nodes as the source
                    // And create a mapper to convert serialized placeholder names to internal names
                    nodes = this._i18nNodesByMsgId[id];
                    this._mapper = function (name) { return (mapper ? /** @type {?} */ ((mapper.toInternalName(name))) : name); };
                }
                else {
                    // When no translation has been found
                    // - report an error / a warning / nothing,
                    // - use the nodes from the original message
                    // - placeholders are already internal and need no mapper
                    if (this._missingTranslationStrategy === core.MissingTranslationStrategy.Error) {
                        this._addError(srcMsg.nodes[0], "Missing translation for message \"" + id + "\"");
                    }
                    else if (this._console && this._missingTranslationStrategy === core.MissingTranslationStrategy.Warning) {
                        this._console.warn("Missing translation for message \"" + id + "\"");
                    }
                    nodes = srcMsg.nodes;
                    this._mapper = function (name) { return name; };
                }
                var /** @type {?} */ text = nodes.map(function (node) { return node.visit(_this); }).join("");
                var /** @type {?} */ context = ((this._contextStack.pop()));
                this._srcMsg = context.msg;
                this._mapper = context.mapper;
                return text;
            };
        /**
         * @param {?} placeholder
         * @return {?}
         */
        I18nToHtmlVisitor.prototype.convertToValue = /**
         * @param {?} placeholder
         * @return {?}
         */
            function (placeholder) {
                var /** @type {?} */ param = placeholder.replace(this._interpolationConfig.start, "").replace(this._interpolationConfig.end, "");
                return this._paramKeys.indexOf(param) !== -1 ? this._params[param] : placeholder;
            };
        /**
         * @param {?} el
         * @param {?} msg
         * @return {?}
         */
        I18nToHtmlVisitor.prototype._addError = /**
         * @param {?} el
         * @param {?} msg
         * @return {?}
         */
            function (el, msg) {
                this._errors.push(new I18nError(el.sourceSpan, msg));
            };
        return I18nToHtmlVisitor;
    }());
    /** @enum {number} */
    var VisitorMode = {
        Extract: 0,
        Merge: 1,
    };
    VisitorMode[VisitorMode.Extract] = "Extract";
    VisitorMode[VisitorMode.Merge] = "Merge";
    /**
     * This Visitor is used:
     * 1. to extract all the translatable strings from an html AST (see `extract()`),
     * 2. to replace the translatable strings with the actual translations (see `merge()`)
     *
     * \@internal
     */
    var /**
     * This Visitor is used:
     * 1. to extract all the translatable strings from an html AST (see `extract()`),
     * 2. to replace the translatable strings with the actual translations (see `merge()`)
     *
     * \@internal
     */ Visitor$4 = (function () {
        function Visitor$$1(_implicitTags) {
            if (_implicitTags === void 0) {
                _implicitTags = [];
            }
            this._implicitTags = _implicitTags;
            this.blockChildren = [];
        }
        /**
         * Extracts the messages from the tree
         */
        /**
         * Extracts the messages from the tree
         * @param {?} node
         * @param {?} interpolationConfig
         * @return {?}
         */
        Visitor$$1.prototype.extract = /**
         * Extracts the messages from the tree
         * @param {?} node
         * @param {?} interpolationConfig
         * @return {?}
         */
            function (node, interpolationConfig) {
                this.init(VisitorMode.Extract, interpolationConfig);
                node.visit(this, null);
                if (this.inI18nBlock) {
                    this._reportError(node, "Unclosed block");
                }
                return new ExtractionResult(this.messages, this.errors);
            };
        /**
         * Returns a tree where all translatable nodes are translated
         */
        /**
         * Returns a tree where all translatable nodes are translated
         * @param {?} node
         * @param {?} translations
         * @param {?} interpolationConfig
         * @param {?} params
         * @param {?=} metadata
         * @return {?}
         */
        Visitor$$1.prototype.merge = /**
         * Returns a tree where all translatable nodes are translated
         * @param {?} node
         * @param {?} translations
         * @param {?} interpolationConfig
         * @param {?} params
         * @param {?=} metadata
         * @return {?}
         */
            function (node, translations, interpolationConfig, params, metadata) {
                if (metadata === void 0) {
                    metadata = {};
                }
                this.init(VisitorMode.Merge, interpolationConfig, params);
                this.translations = translations;
                this.metadata = metadata;
                var /** @type {?} */ translatedNode = node.visit(this, null);
                if (this.inI18nBlock) {
                    this._reportError(node, "Unclosed block");
                }
                return new ParseTreeResult(translatedNode.children, this.errors);
            };
        /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
        Visitor$$1.prototype.visitExpansionCase = /**
         * @param {?} icuCase
         * @param {?} context
         * @return {?}
         */
            function (icuCase, context) {
                // Parse cases for translatable html attributes
                var /** @type {?} */ expression = visitAll(this, icuCase.expression, context);
                if (this.mode === VisitorMode.Merge) {
                    return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
                }
            };
        /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
        Visitor$$1.prototype.visitExpansion = /**
         * @param {?} icu
         * @param {?} context
         * @return {?}
         */
            function (icu, context) {
                this.mayBeAddBlockChildren(icu);
                var /** @type {?} */ wasInIcu = this.inIcu;
                if (!this.inIcu) {
                    // nested ICU messages should not be extracted but top-level translated as a whole
                    if (this.isInTranslatableSection) {
                        this.addMessage([icu]);
                    }
                    this.inIcu = true;
                }
                var /** @type {?} */ cases = visitAll(this, icu.cases, context);
                if (this.mode === VisitorMode.Merge) {
                    icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
                }
                this.inIcu = wasInIcu;
                return icu;
            };
        /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
        Visitor$$1.prototype.visitComment = /**
         * @param {?} comment
         * @param {?} context
         * @return {?}
         */
            function (comment, context) {
                return;
            };
        /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
        Visitor$$1.prototype.visitText = /**
         * @param {?} text
         * @param {?} context
         * @return {?}
         */
            function (text, context) {
                if (this.isInTranslatableSection) {
                    this.mayBeAddBlockChildren(text);
                }
                return text;
            };
        /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
        Visitor$$1.prototype.visitElement = /**
         * @param {?} el
         * @param {?} context
         * @return {?}
         */
            function (el, context) {
                var _this = this;
                this.mayBeAddBlockChildren(el);
                this.depth++;
                var /** @type {?} */ wasInI18nNode = this.inI18nNode;
                var /** @type {?} */ wasInImplicitNode = this.inImplicitNode;
                var /** @type {?} */ childNodes = [];
                var /** @type {?} */ translatedChildNodes = ((undefined));
                // Extract:
                // - top level nodes with the (implicit) "i18n" attribute if not already in a section
                // - ICU messages
                var /** @type {?} */ i18nAttr = getI18nAttr(el);
                var /** @type {?} */ isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this.inIcu && !this.isInTranslatableSection;
                var /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;
                this.inImplicitNode = wasInImplicitNode || isImplicit;
                if (!this.isInTranslatableSection && !this.inIcu) {
                    if (i18nAttr || isTopLevelImplicit) {
                        this.inI18nNode = true;
                        var /** @type {?} */ message = ((this.addMessage(el.children, this.metadata)));
                        translatedChildNodes = this.translateMessage(el, message);
                    }
                    if (this.mode === VisitorMode.Extract) {
                        var /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;
                        if (isTranslatable) {
                            this.openTranslatableSection(el);
                        }
                        visitAll(this, el.children);
                        if (isTranslatable) {
                            this._closeTranslatableSection(el, el.children);
                        }
                    }
                }
                else {
                    if (i18nAttr || isTopLevelImplicit) {
                        this._reportError(el, "Could not mark an element as translatable inside a translatable section");
                    }
                    if (this.mode === VisitorMode.Extract) {
                        // Descend into child nodes for extraction
                        visitAll(this, el.children);
                    }
                }
                if (this.mode === VisitorMode.Merge) {
                    var /** @type {?} */ visitNodes = translatedChildNodes || el.children;
                    visitNodes.forEach(function (child) {
                        var /** @type {?} */ visited = child.visit(_this, context);
                        if (visited && !_this.isInTranslatableSection) {
                            // Do not add the children from translatable sections (= i18n blocks here)
                            // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
                            childNodes = childNodes.concat(visited);
                        }
                    });
                }
                this.depth--;
                this.inI18nNode = wasInI18nNode;
                this.inImplicitNode = wasInImplicitNode;
                if (this.mode === VisitorMode.Merge) {
                    return new Element(el.name, [], childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
                }
                return null;
            };
        /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
        Visitor$$1.prototype.visitAttribute = /**
         * @param {?} attribute
         * @param {?} context
         * @return {?}
         */
            function (attribute, context) {
                throw new Error("unreachable code");
            };
        /**
         * @param {?} mode
         * @param {?} interpolationConfig
         * @param {?=} params
         * @return {?}
         */
        Visitor$$1.prototype.init = /**
         * @param {?} mode
         * @param {?} interpolationConfig
         * @param {?=} params
         * @return {?}
         */
            function (mode, interpolationConfig, params) {
                if (params === void 0) {
                    params = {};
                }
                this.mode = mode;
                this.inI18nBlock = false;
                this.inI18nNode = false;
                this.depth = 0;
                this.inIcu = false;
                this.msgCountAtSectionStart = undefined;
                this.errors = [];
                this.messages = [];
                this.inImplicitNode = false;
                this.createI18nMessage = createI18nMessageFactory(interpolationConfig);
                this.params = params;
            };
        /**
         * @param {?} ast
         * @param {?=} __1
         * @return {?}
         */
        Visitor$$1.prototype.addMessage = /**
         * @param {?} ast
         * @param {?=} __1
         * @return {?}
         */
            function (ast, _a) {
                var _b = _a === void 0 ? {} : _a, _c = _b.meaning, meaning = _c === void 0 ? "" : _c, _d = _b.description, description = _d === void 0 ? "" : _d, _e = _b.id, id = _e === void 0 ? "" : _e;
                if (ast.length === 0 ||
                    (ast.length === 1 && ast[0] instanceof Attribute && !((ast[0])).value)) {
                    // Do not create empty messages
                    return null;
                }
                var /** @type {?} */ message = this.createI18nMessage(ast, meaning, description, id);
                this.messages.push(message);
                return message;
            };
        /**
         * @param {?} el
         * @param {?} message
         * @return {?}
         */
        Visitor$$1.prototype.translateMessage = /**
         * @param {?} el
         * @param {?} message
         * @return {?}
         */
            function (el, message) {
                if (message && this.mode === VisitorMode.Merge) {
                    var /** @type {?} */ nodes = this.translations.get(message, this.params);
                    if (nodes) {
                        return nodes;
                    }
                    this._reportError(el, "Translation unavailable for message id=\"" + this.translations.digest(message) + "\"");
                }
                return [];
            };
        /**
         * Add the node as a child of the block when:
         * - we are in a block,
         * - we are not inside a ICU message (those are handled separately),
         * - the node is a "direct child" of the block
         * @param {?} node
         * @return {?}
         */
        Visitor$$1.prototype.mayBeAddBlockChildren = /**
         * Add the node as a child of the block when:
         * - we are in a block,
         * - we are not inside a ICU message (those are handled separately),
         * - the node is a "direct child" of the block
         * @param {?} node
         * @return {?}
         */
            function (node) {
                if (this.inI18nBlock && !this.inIcu && this.depth === this.blockStartDepth) {
                    this.blockChildren.push(node);
                }
            };
        /**
         * Marks the start of a section, see `_closeTranslatableSection`
         * @param {?} node
         * @return {?}
         */
        Visitor$$1.prototype.openTranslatableSection = /**
         * Marks the start of a section, see `_closeTranslatableSection`
         * @param {?} node
         * @return {?}
         */
            function (node) {
                if (this.isInTranslatableSection) {
                    this._reportError(node, "Unexpected section start");
                }
                else {
                    this.msgCountAtSectionStart = this.messages.length;
                }
            };
        Object.defineProperty(Visitor$$1.prototype, "isInTranslatableSection", {
            get: /**
             * A translatable section could be:
             * - the content of translatable element,
             * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
             * @return {?}
             */ function () {
                return this.msgCountAtSectionStart !== void 0;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Terminates a section.
         *
         * If a section has only one significant children (comments not significant) then we should not
         * keep the message from this children:
         *
         * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
         * - one for the <p> content with meaning and description,
         * - another one for the ICU message.
         *
         * In this case the last message is discarded as it contains less information (the AST is
         * otherwise identical).
         *
         * Note that we should still keep messages extracted from attributes inside the section (ie in the
         * ICU message here)
         * @param {?} node
         * @param {?} directChildren
         * @return {?}
         */
        Visitor$$1.prototype._closeTranslatableSection = /**
         * Terminates a section.
         *
         * If a section has only one significant children (comments not significant) then we should not
         * keep the message from this children:
         *
         * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
         * - one for the <p> content with meaning and description,
         * - another one for the ICU message.
         *
         * In this case the last message is discarded as it contains less information (the AST is
         * otherwise identical).
         *
         * Note that we should still keep messages extracted from attributes inside the section (ie in the
         * ICU message here)
         * @param {?} node
         * @param {?} directChildren
         * @return {?}
         */
            function (node, directChildren) {
                if (!this.isInTranslatableSection) {
                    this._reportError(node, "Unexpected section end");
                    return;
                }
                var /** @type {?} */ startIndex = this.msgCountAtSectionStart;
                var /** @type {?} */ significantChildren = directChildren.reduce(function (count, n) { return count + (n instanceof Comment ? 0 : 1); }, 0);
                if (significantChildren === 1) {
                    for (var /** @type {?} */ i = this.messages.length - 1; i >= /** @type {?} */ ((startIndex)); i--) {
                        var /** @type {?} */ ast = this.messages[i].nodes;
                        if (!(ast.length === 1 && ast[0] instanceof Text$1)) {
                            this.messages.splice(i, 1);
                            break;
                        }
                    }
                }
                this.msgCountAtSectionStart = undefined;
            };
        /**
         * @param {?} node
         * @param {?} msg
         * @return {?}
         */
        Visitor$$1.prototype._reportError = /**
         * @param {?} node
         * @param {?} msg
         * @return {?}
         */
            function (node, msg) {
                this.errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), msg));
            };
        return Visitor$$1;
    }());
    /**
     * @param {?} p
     * @return {?}
     */
    function getI18nAttr(p) {
        return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ MISSING_TRANSLATION_STRATEGY = new core.InjectionToken("MissingTranslationStrategy");
    /**
     * A speculative polyfill to use i18n code translations
     */
    var I18n = (function () {
        function I18n(format, translations, locale, missingTranslationStrategy) {
            if (missingTranslationStrategy === void 0) {
                missingTranslationStrategy = core.MissingTranslationStrategy.Warning;
            }
            var /** @type {?} */ loadFct;
            var /** @type {?} */ digest;
            var /** @type {?} */ createMapper = function (message) { return null; };
            format = (format || "xlf").toLowerCase();
            switch (format) {
                case "xtb":
                    loadFct = xtbLoadToI18n;
                    digest = xtbDigest;
                    createMapper = xtbMapper;
                    break;
                case "xliff2":
                case "xlf2":
                    loadFct = xliff2LoadToI18n;
                    digest = xliff2Digest;
                    break;
                case "xliff":
                case "xlf":
                    loadFct = xliffLoadToI18n;
                    digest = xliffDigest;
                    break;
                default:
                    throw new Error("Unknown translations format " + format);
            }
            var /** @type {?} */ htmlParser = new HtmlParser();
            var /** @type {?} */ translationsBundle = TranslationBundle.load(translations, "i18n", digest, createMapper, loadFct, missingTranslationStrategy);
            // todo use interpolation config
            return function (def, params) {
                if (params === void 0) {
                    params = {};
                }
                var /** @type {?} */ content = typeof def === "string" ? def : def.value;
                var /** @type {?} */ metadata = {};
                if (typeof def === "object") {
                    metadata["id"] = def.id;
                    metadata["meaning"] = def.meaning;
                    metadata["description"] = def.description;
                }
                var /** @type {?} */ htmlParserResult = htmlParser.parse(content, "", true);
                if (htmlParserResult.errors.length) {
                    throw htmlParserResult.errors;
                }
                var /** @type {?} */ mergedNodes = htmlParser.mergeTranslations(htmlParserResult.rootNodes, translationsBundle, params, metadata, ["wrapper"]);
                return serializeNodes(mergedNodes.rootNodes, locale, params).join("");
            };
        }
        I18n.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        I18n.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.TRANSLATIONS_FORMAT,] },] },
                { type: undefined, decorators: [{ type: core.Inject, args: [core.TRANSLATIONS,] },] },
                { type: undefined, decorators: [{ type: core.Inject, args: [core.LOCALE_ID,] },] },
                { type: core.MissingTranslationStrategy, decorators: [{ type: core.Optional }, { type: core.Inject, args: [MISSING_TRANSLATION_STRATEGY,] },] },
            ];
        };
        return I18n;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.I18n = I18n;
    exports.MISSING_TRANSLATION_STRATEGY = MISSING_TRANSLATION_STRATEGY;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,