/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @record
 */
export function IVisitor() { }
function IVisitor_tsickle_Closure_declarations() {
    /** @type {?} */
    IVisitor.prototype.visitTag;
    /** @type {?} */
    IVisitor.prototype.visitElement;
    /** @type {?} */
    IVisitor.prototype.visitText;
    /** @type {?} */
    IVisitor.prototype.visitDeclaration;
    /** @type {?} */
    IVisitor.prototype.visitDoctype;
}
class Visitor {
    /**
     * @param {?} tag
     * @return {?}
     */
    visitTag(tag) {
        const /** @type {?} */ strAttrs = this._serializeAttributes(tag.attrs);
        if (tag.children.length === 0) {
            return `<${tag.name}${strAttrs}/>`;
        }
        const /** @type {?} */ strChildren = tag.children.map(node => node.visit(this));
        return `<${tag.name}${strAttrs}>${strChildren.join("")}</${tag.name}>`;
    }
    /**
     * @param {?} text
     * @return {?}
     */
    visitText(text) {
        return _escapeXml(text.value);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    visitElement(element) {
        const /** @type {?} */ attrs = {};
        element.attrs.forEach((attr) => {
            attrs[attr.name] = attr.value;
        });
        const /** @type {?} */ tag = new Tag(element.name, attrs, /** @type {?} */ (element.children));
        return this.visitTag(tag);
    }
    /**
     * @param {?} decl
     * @return {?}
     */
    visitDeclaration(decl) {
        return `<?xml${this._serializeAttributes(decl.attrs)} ?>`;
    }
    /**
     * @param {?} attrs
     * @return {?}
     */
    _serializeAttributes(attrs) {
        const /** @type {?} */ strAttrs = Object.keys(attrs)
            .map((name) => `${name}="${_escapeXml(attrs[name])}"`)
            .join(" ");
        return strAttrs.length > 0 ? " " + strAttrs : "";
    }
    /**
     * @param {?} doctype
     * @return {?}
     */
    visitDoctype(doctype) {
        return `<!DOCTYPE ${doctype.rootTag} [\n${doctype.dtd}\n]>`;
    }
}
const /** @type {?} */ _visitor = new Visitor();
/**
 * @param {?} nodes
 * @return {?}
 */
export function serialize(nodes) {
    return nodes.map((node) => node.visit(_visitor)).join("");
}
/**
 * @record
 */
export function Node() { }
function Node_tsickle_Closure_declarations() {
    /** @type {?} */
    Node.prototype.visit;
}
export class Declaration {
    /**
     * @param {?} attrs
     */
    constructor(attrs) {
        this.attrs = attrs;
    }
    /**
     * @param {?} visitor
     * @return {?}
     */
    visit(visitor) {
        return visitor.visitDeclaration(this);
    }
}
function Declaration_tsickle_Closure_declarations() {
    /** @type {?} */
    Declaration.prototype.attrs;
}
export class Doctype {
    /**
     * @param {?} rootTag
     * @param {?} dtd
     */
    constructor(rootTag, dtd) {
        this.rootTag = rootTag;
        this.dtd = dtd;
    }
    /**
     * @param {?} visitor
     * @return {?}
     */
    visit(visitor) {
        return visitor.visitDoctype(this);
    }
}
function Doctype_tsickle_Closure_declarations() {
    /** @type {?} */
    Doctype.prototype.rootTag;
    /** @type {?} */
    Doctype.prototype.dtd;
}
export class Tag {
    /**
     * @param {?} name
     * @param {?=} attrs
     * @param {?=} children
     */
    constructor(name, attrs = {}, children = []) {
        this.name = name;
        this.attrs = attrs;
        this.children = children;
    }
    /**
     * @param {?} visitor
     * @return {?}
     */
    visit(visitor) {
        return visitor.visitTag(this);
    }
}
function Tag_tsickle_Closure_declarations() {
    /** @type {?} */
    Tag.prototype.name;
    /** @type {?} */
    Tag.prototype.attrs;
    /** @type {?} */
    Tag.prototype.children;
}
export class Text {
    /**
     * @param {?} value
     */
    constructor(value) {
        this.value = value;
    }
    /**
     * @param {?} visitor
     * @return {?}
     */
    visit(visitor) {
        return visitor.visitText(this);
    }
}
function Text_tsickle_Closure_declarations() {
    /** @type {?} */
    Text.prototype.value;
}
export class CR extends Text {
    /**
     * @param {?=} ws
     */
    constructor(ws = 0) {
        super(`\n${new Array(ws + 1).join(" ")}`);
    }
}
const /** @type {?} */ _ESCAPED_CHARS = [
    [/&/g, "&amp;"],
    [/"/g, "&quot;"],
    [/'/g, "&apos;"],
    [/</g, "&lt;"],
    [/>/g, "&gt;"]
];
/**
 * @param {?} text
 * @return {?}
 */
function _escapeXml(text) {
    return _ESCAPED_CHARS.reduce((str, entry) => str.replace(entry[0], entry[1]), text);
}

//# sourceMappingURL=data:application/json;base64,