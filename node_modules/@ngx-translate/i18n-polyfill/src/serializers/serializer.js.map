{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../../lib/src/serializers/serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as html from \"../ast/ast\";\nimport * as i18n from \"../ast/i18n_ast\";\nimport {getHtmlTagDefinition} from \"../ast/html_tags\";\nimport {I18nPluralPipe, I18nSelectPipe, NgLocaleLocalization} from \"@angular/common\";\nimport {Parser} from \"../ast/parser\";\nimport {getXmlTagDefinition} from \"../ast/xml_tags\";\nimport {I18nError} from \"../ast/parse_util\";\nimport * as xml from \"./xml_helper\";\n\nexport interface I18nMessagesById {\n  [msgId: string]: i18n.Node[];\n}\n\nexport interface XmlMessagesById {\n  [id: string]: xml.Node;\n}\n\nexport interface IcuContent {\n  cases: {[value: string]: html.Node[]};\n  expression: string;\n  type: string;\n}\n\nexport interface IcuContentStr {\n  cases: {[value: string]: string};\n  expression: string;\n  type: string;\n}\n\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n *\n * It should be used for serialization format that put constraints on the placeholder names.\n */\nexport interface PlaceholderMapper {\n  toPublicName(internalName: string): string | null;\n\n  toInternalName(publicName: string): string | null;\n}\n\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nexport class SimplePlaceholderMapper extends i18n.RecurseVisitor implements PlaceholderMapper {\n  private internalToPublic: {[k: string]: string} = {};\n  private publicToNextId: {[k: string]: number} = {};\n  private publicToInternal: {[k: string]: string} = {};\n\n  // create a mapping from the message\n  constructor(message: i18n.Message, private mapName: (name: string) => string) {\n    super();\n    message.nodes.forEach(node => node.visit(this));\n  }\n\n  toPublicName(internalName: string): string | null {\n    return this.internalToPublic.hasOwnProperty(internalName) ? this.internalToPublic[internalName] : null;\n  }\n\n  toInternalName(publicName: string): string | null {\n    return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] : null;\n  }\n\n  visitText(text: i18n.Text, context?: any): any {\n    return null;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.startName);\n    super.visitTagPlaceholder(ph, context);\n    this.visitPlaceholderName(ph.closeName);\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): any {\n    this.visitPlaceholderName(ph.name);\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): any {\n    this.visitPlaceholderName(ph.name);\n  }\n\n  // XMB placeholders could only contains A-Z, 0-9 and _\n  private visitPlaceholderName(internalName: string): void {\n    if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n      return;\n    }\n\n    let publicName = this.mapName(internalName);\n\n    if (this.publicToInternal.hasOwnProperty(publicName)) {\n      // Create a new XMB when it has already been used\n      const nextId = this.publicToNextId[publicName];\n      this.publicToNextId[publicName] = nextId + 1;\n      publicName = `${publicName}_${nextId}`;\n    } else {\n      this.publicToNextId[publicName] = 1;\n    }\n\n    this.internalToPublic[internalName] = publicName;\n    this.publicToInternal[publicName] = internalName;\n  }\n}\n\nconst i18nSelectPipe = new I18nSelectPipe();\nclass SerializerVisitor implements html.Visitor {\n  private i18nPluralPipe: I18nPluralPipe;\n  constructor(locale: string, private params: {[key: string]: any}) {\n    this.i18nPluralPipe = new I18nPluralPipe(new NgLocaleLocalization(locale));\n  }\n  visitElement(element: html.Element, context: any): any {\n    if (getHtmlTagDefinition(element.name).isVoid) {\n      return `<${element.name}${this.serializeNodes(element.attrs, \" \")}/>`;\n    }\n\n    return `<${element.name}${this.serializeNodes(element.attrs, \" \")}>${this.serializeNodes(element.children)}</${\n      element.name\n    }>`;\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    return `${attribute.name}=\"${attribute.value}\"`;\n  }\n\n  visitText(text: html.Text, context: any): any {\n    return text.value;\n  }\n\n  visitComment(comment: html.Comment, context: any): any {\n    return `<!--${comment.value}-->`;\n  }\n\n  visitExpansion(expansion: html.Expansion, context: any): any {\n    const cases = {};\n    expansion.cases.forEach(c => (cases[c.value] = this.serializeNodes(c.expression)));\n\n    switch (expansion.type) {\n      case \"select\":\n        return i18nSelectPipe.transform(this.params[expansion.switchValue] || \"\", cases);\n      case \"plural\":\n        return this.i18nPluralPipe.transform(this.params[expansion.switchValue], cases);\n    }\n    throw new Error(`Unknown expansion type \"${expansion.type}\"`);\n  }\n\n  visitExpansionCase(expansionCase: html.ExpansionCase, context: any): any {\n    return ` ${expansionCase.value} {${this.serializeNodes(expansionCase.expression)}}`;\n  }\n\n  private serializeNodes(nodes: html.Node[], join = \"\"): string {\n    if (nodes.length === 0) {\n      return \"\";\n    }\n    return join + nodes.map(a => a.visit(this, null)).join(join);\n  }\n}\n\nexport function serializeNodes(nodes: html.Node[], locale: string, params: {[key: string]: any}): string[] {\n  return nodes.map(node => node.visit(new SerializerVisitor(locale, params), null));\n}\n\nexport class HtmlToXmlParser implements html.Visitor {\n  private errors: I18nError[];\n  private xmlMessagesById: {[id: string]: xml.Node};\n\n  constructor(private MESSAGE_TAG: string) {}\n\n  parse(content: string) {\n    this.xmlMessagesById = {};\n\n    const parser = new Parser(getXmlTagDefinition).parse(content, \"\", false);\n\n    this.errors = parser.errors;\n    html.visitAll(this, parser.rootNodes, null);\n\n    return {\n      xmlMessagesById: this.xmlMessagesById,\n      errors: this.errors\n    };\n  }\n\n  visitElement(element: html.Element, context: any): any {\n    switch (element.name) {\n      case this.MESSAGE_TAG:\n        const id = element.attrs.find(attr => attr.name === \"id\");\n        if (id) {\n          this.xmlMessagesById[id.value] = (element as any) as xml.Node;\n        }\n        break;\n      default:\n        html.visitAll(this, element.children, null);\n    }\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {}\n\n  visitText(text: html.Text, context: any): any {}\n\n  visitComment(comment: html.Comment, context: any): any {}\n\n  visitExpansion(expansion: html.Expansion, context: any): any {}\n\n  visitExpansionCase(expansionCase: html.ExpansionCase, context: any): any {}\n}\n"]}