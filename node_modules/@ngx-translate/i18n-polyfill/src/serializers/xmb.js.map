{"version":3,"file":"xmb.js","sourceRoot":"","sources":["../../../lib/src/serializers/xmb.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as i18n from \"../ast/i18n_ast\";\nimport * as ml from \"../ast/ast\";\nimport * as xml from \"./xml_helper\";\nimport {decimalDigest} from \"./digest\";\nimport {HtmlToXmlParser, PlaceholderMapper, SimplePlaceholderMapper, XmlMessagesById} from \"./serializer\";\n\nconst _MESSAGES_TAG = \"messagebundle\";\nconst _MESSAGE_TAG = \"msg\";\nconst _PLACEHOLDER_TAG = \"ph\";\nconst _EXEMPLE_TAG = \"ex\";\nconst _SOURCE_TAG = \"source\";\n\nconst _DOCTYPE = `<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>`;\n\n// used to merge translations when extracting\nexport function xmbLoadToXml(content: string): XmlMessagesById {\n  const parser = new HtmlToXmlParser(_MESSAGE_TAG);\n  const {xmlMessagesById, errors} = parser.parse(content);\n\n  if (errors.length) {\n    throw new Error(`xmb parse errors:\\n${errors.join(\"\\n\")}`);\n  }\n\n  return xmlMessagesById;\n}\n\nexport function xmbWrite(messages: i18n.Message[], locale: string | null, existingNodes: xml.Node[] = []): string {\n  const exampleVisitor = new ExampleVisitor();\n  const visitor = new Visitor();\n  const rootNode = new xml.Tag(_MESSAGES_TAG);\n\n  existingNodes.forEach(node => {\n    rootNode.children.push(new xml.CR(2), node);\n  });\n\n  // console.log(existingNodes);\n  messages.forEach(message => {\n    const attrs: {[k: string]: string} = {id: message.id};\n\n    if (message.description) {\n      attrs[\"desc\"] = message.description;\n    }\n\n    if (message.meaning) {\n      attrs[\"meaning\"] = message.meaning;\n    }\n\n    const sourceTags: xml.Tag[] = [];\n    message.sources.forEach((source: i18n.MessageSpan) => {\n      sourceTags.push(\n        new xml.Tag(_SOURCE_TAG, {}, [\n          new xml.Text(\n            `${source.filePath}:${source.startLine}${source.endLine !== source.startLine ? \",\" + source.endLine : \"\"}`\n          )\n        ])\n      );\n    });\n\n    rootNode.children.push(\n      new xml.CR(2),\n      new xml.Tag(_MESSAGE_TAG, attrs, [...sourceTags, ...visitor.serialize(message.nodes)])\n    );\n  });\n\n  rootNode.children.push(new xml.CR());\n\n  return xml.serialize([\n    new xml.Declaration({version: \"1.0\", encoding: \"UTF-8\"}),\n    new xml.CR(),\n    new xml.Doctype(_MESSAGES_TAG, _DOCTYPE),\n    new xml.CR(),\n    exampleVisitor.addDefaultExamples(rootNode),\n    new xml.CR()\n  ]);\n}\n\nexport function xmbDigest(message: i18n.Message): string {\n  return digest(message);\n}\n\nexport function xmbMapper(message: i18n.Message): PlaceholderMapper {\n  return new SimplePlaceholderMapper(message, toPublicName);\n}\n\nclass Visitor implements i18n.Visitor {\n  visitText(text: i18n.Text, context?: any): xml.Node[] {\n    return [new xml.Text(text.value)];\n  }\n\n  visitContainer(container: i18n.Container, context: any): xml.Node[] {\n    const nodes: xml.Node[] = [];\n    container.children.forEach((node: i18n.Node) => nodes.push(...node.visit(this)));\n    return nodes;\n  }\n\n  visitIcu(icu: i18n.Icu, context?: any): xml.Node[] {\n    const nodes = [new xml.Text(`{${icu.expressionPlaceholder}, ${icu.type}, `)];\n\n    Object.keys(icu.cases).forEach((c: string) => {\n      nodes.push(new xml.Text(`${c} {`), ...icu.cases[c].visit(this), new xml.Text(`} `));\n    });\n\n    nodes.push(new xml.Text(`}`));\n\n    return nodes;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): xml.Node[] {\n    const startEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(`<${ph.tag}>`)]);\n    const startTagPh = new xml.Tag(_PLACEHOLDER_TAG, {name: ph.startName}, [startEx]);\n    if (ph.isVoid) {\n      // void tags have no children nor closing tags\n      return [startTagPh];\n    }\n\n    const closeEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(`</${ph.tag}>`)]);\n    const closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, {name: ph.closeName}, [closeEx]);\n\n    return [startTagPh, ...this.serialize(ph.children), closeTagPh];\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): xml.Node[] {\n    const exTag = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(`{{${ph.value}}}`)]);\n    return [new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name}, [exTag])];\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): xml.Node[] {\n    const exTag = new xml.Tag(_EXEMPLE_TAG, {}, [\n      new xml.Text(\n        `{${ph.value.expression}, ${ph.value.type}, ${Object.keys(ph.value.cases)\n          .map((value: string) => value + \" {...}\")\n          .join(\" \")}}`\n      )\n    ]);\n    return [new xml.Tag(_PLACEHOLDER_TAG, {name: ph.name}, [exTag])];\n  }\n\n  serialize(nodes: i18n.Node[]): xml.Node[] {\n    return [].concat(...nodes.map(node => node.visit(this)));\n  }\n}\n\nexport function digest(message: i18n.Message): string {\n  return decimalDigest(message);\n}\n\n// TC requires at least one non-empty example on placeholders\nclass ExampleVisitor implements xml.IVisitor {\n  addDefaultExamples(node: xml.Node): xml.Node {\n    node.visit(this);\n    return node;\n  }\n\n  visitTag(tag: xml.Tag): void {\n    if (tag.name === _PLACEHOLDER_TAG) {\n      if (!tag.children || tag.children.length === 0) {\n        const exText = new xml.Text(tag.attrs[\"name\"] || \"...\");\n        tag.children = [new xml.Tag(_EXEMPLE_TAG, {}, [exText])];\n      }\n    } else if (tag.children) {\n      tag.children.forEach(node => node.visit(this));\n    }\n  }\n\n  visitElement(element: ml.Element): any {\n    const attrs = {};\n    element.attrs.forEach((attr: ml.Attribute) => {\n      attrs[attr.name] = attr.value;\n    });\n    const tag = new xml.Tag(element.name, attrs, element.children as any);\n    return this.visitTag(tag);\n  }\n\n  visitText(text: xml.Text): void {}\n\n  visitDeclaration(decl: xml.Declaration): void {}\n\n  visitDoctype(doctype: xml.Doctype): void {}\n}\n\n// XMB/XTB placeholders can only contain A-Z, 0-9 and _\nexport function toPublicName(internalName: string): string {\n  return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, \"_\");\n}\n"]}