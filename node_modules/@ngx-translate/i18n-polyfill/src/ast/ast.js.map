{"version":3,"file":"ast.js","sourceRoot":"","sources":["../../../lib/src/ast/ast.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/* tslint:disable */\nimport {ParseSourceSpan} from \"./parse_util\";\n\nexport interface Node {\n  sourceSpan: ParseSourceSpan;\n  visit(visitor: Visitor, context: any): any;\n}\n\nexport class Text implements Node {\n  constructor(public value: string, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any {\n    return visitor.visitText(this, context);\n  }\n}\n\nexport class Expansion implements Node {\n  constructor(\n    public switchValue: string,\n    public type: string,\n    public cases: ExpansionCase[],\n    public sourceSpan: ParseSourceSpan,\n    public switchValueSourceSpan: ParseSourceSpan\n  ) {}\n  visit(visitor: Visitor, context: any): any {\n    return visitor.visitExpansion(this, context);\n  }\n}\n\nexport class ExpansionCase implements Node {\n  constructor(\n    public value: string,\n    public expression: Node[],\n    public sourceSpan: ParseSourceSpan,\n    public valueSourceSpan: ParseSourceSpan,\n    public expSourceSpan: ParseSourceSpan\n  ) {}\n\n  visit(visitor: Visitor, context: any): any {\n    return visitor.visitExpansionCase(this, context);\n  }\n}\n\nexport class Attribute implements Node {\n  constructor(\n    public name: string,\n    public value: string,\n    public sourceSpan: ParseSourceSpan,\n    public valueSpan?: ParseSourceSpan\n  ) {}\n  visit(visitor: Visitor, context: any): any {\n    return visitor.visitAttribute(this, context);\n  }\n}\n\nexport class Element implements Node {\n  constructor(\n    public name: string,\n    public attrs: Attribute[],\n    public children: Node[],\n    public sourceSpan: ParseSourceSpan,\n    public startSourceSpan: ParseSourceSpan | null = null,\n    public endSourceSpan: ParseSourceSpan | null = null\n  ) {}\n  visit(visitor: Visitor, context: any): any {\n    return visitor.visitElement(this, context);\n  }\n}\n\nexport class Comment implements Node {\n  constructor(public value: string | null, public sourceSpan: ParseSourceSpan) {}\n  visit(visitor: Visitor, context: any): any {\n    return visitor.visitComment(this, context);\n  }\n}\n\nexport interface Visitor {\n  // Returning a truthy value from `visit()` will prevent `visitAll()` from the call to the typed\n  // method and result returned will become the result included in `visitAll()`s result array.\n  visit?(node: Node, context: any): any;\n\n  visitElement(element: Element, context: any): any;\n  visitAttribute(attribute: Attribute, context: any): any;\n  visitText(text: Text, context: any): any;\n  visitComment(comment: Comment, context: any): any;\n  visitExpansion(expansion: Expansion, context: any): any;\n  visitExpansionCase(expansionCase: ExpansionCase, context: any): any;\n}\n\nexport function visitAll(visitor: Visitor, nodes: Node[], context: any = null): any[] {\n  const result: any[] = [];\n\n  const visit = visitor.visit\n    ? (ast: Node) => visitor.visit!(ast, context) || ast.visit(visitor, context)\n    : (ast: Node) => ast.visit(visitor, context);\n  nodes.forEach(ast => {\n    const astResult = visit(ast);\n    if (astResult) {\n      result.push(astResult);\n    }\n  });\n  return result;\n}\n"]}