{"version":3,"file":"parse_util.js","sourceRoot":"","sources":["../../../lib/src/ast/parse_util.ts"],"names":[],"mappings":"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","sourcesContent":["import {I18nDef} from \"../i18n-polyfill\";\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport class ParseLocation {\n  constructor(public file: ParseSourceFile, public offset: number, public line: number, public col: number) {}\n\n  toString(): string {\n    return this.offset != null ? `${this.line}:${this.col}` : \"\";\n  }\n\n  // Return the source around the location\n  // Up to `maxChars` or `maxLines` on each side of the location\n  getContext(maxChars: number, maxLines: number): {before: string; after: string} | null {\n    const content = this.file.content;\n    let startOffset = this.offset;\n\n    if (startOffset != null) {\n      if (startOffset > content.length - 1) {\n        startOffset = content.length - 1;\n      }\n      let endOffset = startOffset;\n      let ctxChars = 0;\n      let ctxLines = 0;\n\n      while (ctxChars < maxChars && startOffset > 0) {\n        startOffset--;\n        ctxChars++;\n        if (content[startOffset] === \"\\n\") {\n          if (++ctxLines === maxLines) {\n            break;\n          }\n        }\n      }\n\n      ctxChars = 0;\n      ctxLines = 0;\n      while (ctxChars < maxChars && endOffset < content.length - 1) {\n        endOffset++;\n        ctxChars++;\n        if (content[endOffset] === \"\\n\") {\n          if (++ctxLines === maxLines) {\n            break;\n          }\n        }\n      }\n\n      return {\n        before: content.substring(startOffset, this.offset),\n        after: content.substring(this.offset, endOffset + 1)\n      };\n    }\n\n    return null;\n  }\n}\n\nexport class ParseSourceFile {\n  constructor(public content: string, public url = \"\") {}\n}\n\nexport class ParseSourceSpan {\n  constructor(public start: ParseLocation, public end: ParseLocation, public details: string | null = null) {}\n\n  toString(): string {\n    return this.start.file.content.substring(this.start.offset, this.end.offset);\n  }\n}\n\nexport enum ParseErrorLevel {\n  WARNING,\n  ERROR\n}\n\nexport class ParseError {\n  constructor(\n    public span: ParseSourceSpan,\n    public msg: string,\n    public level: ParseErrorLevel = ParseErrorLevel.ERROR\n  ) {}\n\n  contextualMessage(): string {\n    const ctx = this.span.start.getContext(100, 3);\n    return ctx ? ` (\"${ctx.before}[${ParseErrorLevel[this.level]} ->]${ctx.after}\")` : \"\";\n  }\n\n  toString(): string {\n    const details = this.span.details ? `, ${this.span.details}` : \"\";\n    return `${this.msg}${this.contextualMessage()}: ${this.span.start}${details}`;\n  }\n}\n\n/**\n * An i18n error.\n */\nexport class I18nError extends ParseError {\n  constructor(span: ParseSourceSpan, msg: string) {\n    super(span, msg);\n  }\n}\n\nexport function escapeRegExp(s: string): string {\n  return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n"]}