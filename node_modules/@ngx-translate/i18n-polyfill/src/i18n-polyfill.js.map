{"version":3,"file":"i18n-polyfill.js","sourceRoot":"","sources":["../../lib/src/i18n-polyfill.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Inject,\n  Injectable,\n  InjectionToken,\n  LOCALE_ID,\n  MissingTranslationStrategy,\n  Optional,\n  TRANSLATIONS,\n  TRANSLATIONS_FORMAT\n} from \"@angular/core\";\nimport {xliffDigest, xliffLoadToI18n} from \"./serializers/xliff\";\nimport {xliff2Digest, xliff2LoadToI18n} from \"./serializers/xliff2\";\nimport {xtbDigest, xtbLoadToI18n, xtbMapper} from \"./serializers/xtb\";\nimport {HtmlParser, TranslationBundle} from \"./parser/html\";\nimport {I18nMessagesById, serializeNodes} from \"./serializers/serializer\";\nimport {Message} from \"./ast/i18n_ast\";\n\nexport declare interface I18n {\n  (def: string | I18nDef, params?: {[key: string]: any}): string;\n}\n\nexport interface I18nDef {\n  value: string;\n  id?: string;\n  meaning?: string;\n  description?: string;\n}\n\nexport const MISSING_TRANSLATION_STRATEGY = new InjectionToken<MissingTranslationStrategy>(\n  \"MissingTranslationStrategy\"\n);\n\n/**\n * A speculative polyfill to use i18n code translations\n */\n@Injectable()\nexport class I18n {\n  constructor(\n    @Inject(TRANSLATIONS_FORMAT) format: string,\n    @Inject(TRANSLATIONS) translations: string,\n    @Inject(LOCALE_ID) locale: string,\n    @Optional()\n    @Inject(MISSING_TRANSLATION_STRATEGY)\n    missingTranslationStrategy: MissingTranslationStrategy = MissingTranslationStrategy.Warning\n  ) {\n    let loadFct: (content: string, url: string) => I18nMessagesById;\n    let digest: (message: Message) => string;\n    let createMapper = (message: Message) => null;\n    format = (format || \"xlf\").toLowerCase();\n    switch (format) {\n      case \"xtb\":\n        loadFct = xtbLoadToI18n;\n        digest = xtbDigest;\n        createMapper = xtbMapper;\n        break;\n      case \"xliff2\":\n      case \"xlf2\":\n        loadFct = xliff2LoadToI18n;\n        digest = xliff2Digest;\n        break;\n      case \"xliff\":\n      case \"xlf\":\n        loadFct = xliffLoadToI18n;\n        digest = xliffDigest;\n        break;\n      default:\n        throw new Error(`Unknown translations format ${format}`);\n    }\n    const htmlParser = new HtmlParser();\n\n    const translationsBundle = TranslationBundle.load(\n      translations,\n      \"i18n\",\n      digest,\n      createMapper,\n      loadFct,\n      missingTranslationStrategy\n    );\n\n    // todo use interpolation config\n    return (def: string | I18nDef, params: {[key: string]: any} = {}) => {\n      const content = typeof def === \"string\" ? def : def.value;\n      const metadata = {};\n      if (typeof def === \"object\") {\n        metadata[\"id\"] = def.id;\n        metadata[\"meaning\"] = def.meaning;\n        metadata[\"description\"] = def.description;\n      }\n      const htmlParserResult = htmlParser.parse(content, \"\", true);\n\n      if (htmlParserResult.errors.length) {\n        throw htmlParserResult.errors;\n      }\n\n      const mergedNodes = htmlParser.mergeTranslations(\n        htmlParserResult.rootNodes,\n        translationsBundle,\n        params,\n        metadata,\n        [\"wrapper\"]\n      );\n\n      return serializeNodes(mergedNodes.rootNodes, locale, params).join(\"\");\n    };\n  }\n}\n"]}