{"version":3,"file":"html.js","sourceRoot":"","sources":["../../../lib/src/parser/html.ts"],"names":[],"mappings":"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","sourcesContent":["import * as html from \"../ast/ast\";\nimport * as i18n from \"../ast/i18n_ast\";\nimport {I18nError} from \"../ast/parse_util\";\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from \"../ast/interpolation_config\";\nimport {createI18nMessageFactory} from \"./i18n\";\nimport {Parser, ParseTreeResult} from \"../ast/parser\";\nimport {getHtmlTagDefinition} from \"../ast/html_tags\";\nimport {I18nMessagesById, PlaceholderMapper} from \"../serializers/serializer\";\nimport {MissingTranslationStrategy} from \"@angular/core\";\n\nconst _I18N_ATTR = \"i18n\";\n\nexport interface MessageMetadata {\n  meaning?: string;\n  description?: string;\n  id?: string;\n}\n\nexport class HtmlParser extends Parser {\n  constructor(private interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG) {\n    super(getHtmlTagDefinition);\n  }\n\n  parse(source: string, url: string, parseExpansionForms = false): ParseTreeResult {\n    return super.parse(source, url, parseExpansionForms, this.interpolationConfig);\n  }\n\n  /**\n   * Extract translatable messages from an html AST\n   */\n  extractMessages(nodes: html.Node[]): ExtractionResult {\n    const visitor = new Visitor([\"wrapper\"]);\n    // Construct a single fake root element\n    const wrapper = new html.Element(\"wrapper\", [], nodes, undefined!, undefined, undefined);\n    return visitor.extract(wrapper, this.interpolationConfig);\n  }\n\n  mergeTranslations(\n    nodes: html.Node[],\n    translations: TranslationBundle,\n    params: {[key: string]: any},\n    metadata?: MessageMetadata,\n    implicitTags: string[] = []\n  ): ParseTreeResult {\n    const visitor = new Visitor(implicitTags);\n    // Construct a single fake root element\n    const wrapper = new html.Element(\"wrapper\", [], nodes, undefined!, undefined, undefined);\n    return visitor.merge(wrapper, translations, this.interpolationConfig, params, metadata);\n  }\n}\n\nexport class ExtractionResult {\n  constructor(public messages: i18n.Message[], public errors: I18nError[]) {}\n}\n\n/**\n * A container for translated messages\n */\nexport class TranslationBundle {\n  private i18nToHtml: I18nToHtmlVisitor;\n\n  constructor(\n    private i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {},\n    public digest: (m: i18n.Message) => string,\n    interpolationConfig: InterpolationConfig,\n    missingTranslationStrategy: MissingTranslationStrategy,\n    public mapperFactory?: (m: i18n.Message) => PlaceholderMapper,\n    console?: Console\n  ) {\n    this.i18nToHtml = new I18nToHtmlVisitor(\n      i18nNodesByMsgId,\n      digest,\n      mapperFactory!,\n      missingTranslationStrategy,\n      interpolationConfig,\n      console\n    );\n  }\n\n  // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n  static load(\n    content: string,\n    url: string,\n    digest: (message: i18n.Message) => string,\n    createNameMapper: (message: i18n.Message) => PlaceholderMapper | null,\n    loadFct: (content: string, url: string) => I18nMessagesById,\n    missingTranslationStrategy: MissingTranslationStrategy,\n    interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG\n  ): TranslationBundle {\n    const i18nNodesByMsgId = loadFct(content, url);\n    const digestFn = (m: i18n.Message) => digest(m);\n    const mapperFactory = (m: i18n.Message) => createNameMapper(m)!;\n    return new TranslationBundle(\n      i18nNodesByMsgId,\n      digestFn,\n      interpolationConfig,\n      missingTranslationStrategy,\n      mapperFactory,\n      console\n    );\n  }\n\n  // Returns the translation as HTML nodes from the given source message.\n  get(srcMsg: i18n.Message, params): html.Node[] {\n    const htmlRes = this.i18nToHtml.convert(srcMsg, params);\n    if (htmlRes.errors.length) {\n      throw new Error(htmlRes.errors.join(\"\\n\"));\n    }\n\n    return htmlRes.nodes;\n  }\n\n  has(srcMsg: i18n.Message): boolean {\n    return this.digest(srcMsg) in this.i18nNodesByMsgId;\n  }\n}\n\nclass I18nToHtmlVisitor implements i18n.Visitor {\n  private _srcMsg: i18n.Message;\n  private _contextStack: {msg: i18n.Message; mapper: (name: string) => string}[] = [];\n  private _errors: I18nError[] = [];\n  private _mapper: (name: string) => string;\n  private _params: {[key: string]: any};\n  private _paramKeys: string[];\n\n  constructor(\n    private _i18nNodesByMsgId: {[msgId: string]: i18n.Node[]} = {},\n    private _digest: (m: i18n.Message) => string,\n    private _mapperFactory: (m: i18n.Message) => PlaceholderMapper,\n    private _missingTranslationStrategy: MissingTranslationStrategy,\n    private _interpolationConfig?: InterpolationConfig,\n    private _console?: Console\n  ) {}\n\n  convert(srcMsg: i18n.Message, params: {[key: string]: any}): {nodes: html.Node[]; errors: I18nError[]} {\n    this._contextStack.length = 0;\n    this._errors.length = 0;\n    this._params = params;\n    this._paramKeys = Object.keys(params);\n\n    // i18n to text\n    const text = this.convertToText(srcMsg);\n\n    // text to html\n    const url = srcMsg.nodes[0].sourceSpan.start.file.url;\n    const htmlParser = new HtmlParser().parse(text, url, true);\n\n    return {\n      nodes: htmlParser.rootNodes,\n      errors: [...this._errors, ...htmlParser.errors]\n    };\n  }\n\n  visitText(text: i18n.Text, context?: any): string {\n    return text.value;\n  }\n\n  visitContainer(container: i18n.Container, context?: any): any {\n    return container.children.map(n => n.visit(this)).join(\"\");\n  }\n\n  visitIcu(icu: i18n.Icu, context?: any): any {\n    const cases = Object.keys(icu.cases).map(k => `${k} {${icu.cases[k].visit(this)}}`);\n\n    // TODO(vicb): Once all format switch to using expression placeholders\n    // we should throw when the placeholder is not in the source message\n    const exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression)\n      ? this._srcMsg.placeholders[icu.expression]\n      : icu.expression;\n\n    return `{${exp}, ${icu.type}, ${cases.join(\" \")}}`;\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, context?: any): string {\n    const phName = this._mapper(ph.name);\n    if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n      return this.convertToValue(this._srcMsg.placeholders[phName]);\n    }\n\n    if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n      return this.convertToText(this._srcMsg.placeholderToMessage[phName]);\n    }\n\n    this._addError(ph, `Unknown placeholder \"${ph.name}\"`);\n    return \"\";\n  }\n\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, context?: any): string {\n    const tag = `${ph.tag}`;\n    const attrs = Object.keys(ph.attrs)\n      .map(name => `${name}=\"${ph.attrs[name]}\"`)\n      .join(\" \");\n    if (ph.isVoid) {\n      return `<${tag} ${attrs}/>`;\n    }\n    const children = ph.children.map((c: i18n.Node) => c.visit(this)).join(\"\");\n    return `<${tag} ${attrs}>${children}</${tag}>`;\n  }\n\n  // Loaded message contains only placeholders (vs tag and icu placeholders).\n  // However when a translation can not be found, we need to serialize the source message\n  // which can contain tag placeholders\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, context?: any): string {\n    // An ICU placeholder references the source message to be serialized\n    return this.convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n  }\n\n  /**\n   * Convert a source message to a translated text string:\n   * - text nodes are replaced with their translation,\n   * - placeholders are replaced with their content,\n   * - ICU nodes are converted to ICU expressions.\n   */\n  private convertToText(srcMsg: i18n.Message): string {\n    const id = this._digest(srcMsg);\n\n    const mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n    let nodes: i18n.Node[];\n\n    this._contextStack.push({msg: this._srcMsg, mapper: this._mapper});\n    this._srcMsg = srcMsg;\n\n    if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n      // When there is a translation use its nodes as the source\n      // And create a mapper to convert serialized placeholder names to internal names\n      nodes = this._i18nNodesByMsgId[id];\n      this._mapper = (name: string) => (mapper ? mapper.toInternalName(name)! : name);\n    } else {\n      // When no translation has been found\n      // - report an error / a warning / nothing,\n      // - use the nodes from the original message\n      // - placeholders are already internal and need no mapper\n      if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n        this._addError(srcMsg.nodes[0], `Missing translation for message \"${id}\"`);\n      } else if (this._console && this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n        this._console.warn(`Missing translation for message \"${id}\"`);\n      }\n      nodes = srcMsg.nodes;\n      this._mapper = (name: string) => name;\n    }\n    const text = nodes.map(node => node.visit(this)).join(\"\");\n    const context = this._contextStack.pop()!;\n    this._srcMsg = context.msg;\n    this._mapper = context.mapper;\n    return text;\n  }\n\n  private convertToValue(placeholder: string): string {\n    const param = placeholder.replace(this._interpolationConfig.start, \"\").replace(this._interpolationConfig.end, \"\");\n    return this._paramKeys.indexOf(param) !== -1 ? this._params[param] : placeholder;\n  }\n\n  private _addError(el: i18n.Node, msg: string) {\n    this._errors.push(new I18nError(el.sourceSpan, msg));\n  }\n}\n\nenum VisitorMode {\n  Extract,\n  Merge\n}\n\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * @internal\n */\nclass Visitor implements html.Visitor {\n  private depth: number;\n\n  // <el i18n>...</el>\n  private inI18nNode: boolean;\n  private inImplicitNode: boolean;\n\n  // <!--i18n-->...<!--/i18n-->\n  private inI18nBlock: boolean;\n  private blockChildren: html.Node[] = [];\n  private blockStartDepth: number;\n\n  // {<icu message>}\n  private inIcu: boolean;\n\n  // set to void 0 when not in a section\n  private msgCountAtSectionStart: number | undefined;\n  private errors: I18nError[];\n  private mode: VisitorMode;\n\n  // VisitorMode.Extract only\n  private messages: i18n.Message[];\n\n  // VisitorMode.Merge only\n  private translations: TranslationBundle;\n  private createI18nMessage: (msg: html.Node[], meaning: string, description: string, id: string) => i18n.Message;\n  private metadata: MessageMetadata;\n  private params: {[key: string]: any};\n\n  constructor(private _implicitTags: string[] = []) {}\n\n  /**\n   * Extracts the messages from the tree\n   */\n  extract(node: html.Node, interpolationConfig: InterpolationConfig): ExtractionResult {\n    this.init(VisitorMode.Extract, interpolationConfig);\n\n    node.visit(this, null);\n\n    if (this.inI18nBlock) {\n      this._reportError(node, \"Unclosed block\");\n    }\n\n    return new ExtractionResult(this.messages, this.errors);\n  }\n\n  /**\n   * Returns a tree where all translatable nodes are translated\n   */\n  merge(\n    node: html.Node,\n    translations: TranslationBundle,\n    interpolationConfig: InterpolationConfig,\n    params: {[key: string]: any},\n    metadata: MessageMetadata = {}\n  ): ParseTreeResult {\n    this.init(VisitorMode.Merge, interpolationConfig, params);\n    this.translations = translations;\n    this.metadata = metadata;\n\n    const translatedNode = node.visit(this, null);\n\n    if (this.inI18nBlock) {\n      this._reportError(node, \"Unclosed block\");\n    }\n\n    return new ParseTreeResult(translatedNode.children, this.errors);\n  }\n\n  visitExpansionCase(icuCase: html.ExpansionCase, context: any): any {\n    // Parse cases for translatable html attributes\n    const expression = html.visitAll(this, icuCase.expression, context);\n\n    if (this.mode === VisitorMode.Merge) {\n      return new html.ExpansionCase(\n        icuCase.value,\n        expression,\n        icuCase.sourceSpan,\n        icuCase.valueSourceSpan,\n        icuCase.expSourceSpan\n      );\n    }\n  }\n\n  visitExpansion(icu: html.Expansion, context: any): html.Expansion {\n    this.mayBeAddBlockChildren(icu);\n\n    const wasInIcu = this.inIcu;\n\n    if (!this.inIcu) {\n      // nested ICU messages should not be extracted but top-level translated as a whole\n      if (this.isInTranslatableSection) {\n        this.addMessage([icu]);\n      }\n      this.inIcu = true;\n    }\n\n    const cases = html.visitAll(this, icu.cases, context);\n\n    if (this.mode === VisitorMode.Merge) {\n      icu = new html.Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n    }\n\n    this.inIcu = wasInIcu;\n\n    return icu;\n  }\n\n  visitComment(comment: html.Comment, context: any): any {\n    return;\n  }\n\n  visitText(text: html.Text, context: any): html.Text {\n    if (this.isInTranslatableSection) {\n      this.mayBeAddBlockChildren(text);\n    }\n    return text;\n  }\n\n  visitElement(el: html.Element, context: any): html.Element | null {\n    this.mayBeAddBlockChildren(el);\n    this.depth++;\n    const wasInI18nNode = this.inI18nNode;\n    const wasInImplicitNode = this.inImplicitNode;\n    let childNodes: html.Node[] = [];\n    let translatedChildNodes: html.Node[] = undefined!;\n\n    // Extract:\n    // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n    // - ICU messages\n    const i18nAttr = getI18nAttr(el);\n    const isImplicit = this._implicitTags.some(tag => el.name === tag) && !this.inIcu && !this.isInTranslatableSection;\n    const isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n    this.inImplicitNode = wasInImplicitNode || isImplicit;\n    if (!this.isInTranslatableSection && !this.inIcu) {\n      if (i18nAttr || isTopLevelImplicit) {\n        this.inI18nNode = true;\n        const message = this.addMessage(el.children, this.metadata)!;\n        translatedChildNodes = this.translateMessage(el, message);\n      }\n\n      if (this.mode === VisitorMode.Extract) {\n        const isTranslatable = i18nAttr || isTopLevelImplicit;\n        if (isTranslatable) {\n          this.openTranslatableSection(el);\n        }\n        html.visitAll(this, el.children);\n        if (isTranslatable) {\n          this._closeTranslatableSection(el, el.children);\n        }\n      }\n    } else {\n      if (i18nAttr || isTopLevelImplicit) {\n        this._reportError(el, \"Could not mark an element as translatable inside a translatable section\");\n      }\n\n      if (this.mode === VisitorMode.Extract) {\n        // Descend into child nodes for extraction\n        html.visitAll(this, el.children);\n      }\n    }\n\n    if (this.mode === VisitorMode.Merge) {\n      const visitNodes = translatedChildNodes || el.children;\n      visitNodes.forEach(child => {\n        const visited = child.visit(this, context);\n        if (visited && !this.isInTranslatableSection) {\n          // Do not add the children from translatable sections (= i18n blocks here)\n          // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n          childNodes = childNodes.concat(visited);\n        }\n      });\n    }\n\n    this.depth--;\n    this.inI18nNode = wasInI18nNode;\n    this.inImplicitNode = wasInImplicitNode;\n\n    if (this.mode === VisitorMode.Merge) {\n      return new html.Element(el.name, [], childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n    }\n    return null;\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    throw new Error(\"unreachable code\");\n  }\n\n  private init(mode: VisitorMode, interpolationConfig: InterpolationConfig, params: {[key: string]: any} = {}): void {\n    this.mode = mode;\n    this.inI18nBlock = false;\n    this.inI18nNode = false;\n    this.depth = 0;\n    this.inIcu = false;\n    this.msgCountAtSectionStart = undefined;\n    this.errors = [];\n    this.messages = [];\n    this.inImplicitNode = false;\n    this.createI18nMessage = createI18nMessageFactory(interpolationConfig);\n    this.params = params;\n  }\n\n  // add a translatable message\n  private addMessage(ast: html.Node[], {meaning = \"\", description = \"\", id = \"\"} = {}): i18n.Message | null {\n    if (\n      ast.length === 0 ||\n      (ast.length === 1 && ast[0] instanceof html.Attribute && !(ast[0] as html.Attribute).value)\n    ) {\n      // Do not create empty messages\n      return null;\n    }\n\n    const message = this.createI18nMessage(ast, meaning, description, id);\n    this.messages.push(message);\n    return message;\n  }\n\n  // Translates the given message given the `TranslationBundle`\n  // This is used for translating elements / blocks - see `_translateAttributes` for attributes\n  // no-op when called in extraction mode (returns [])\n  private translateMessage(el: html.Node, message: i18n.Message): html.Node[] {\n    if (message && this.mode === VisitorMode.Merge) {\n      const nodes = this.translations.get(message, this.params);\n      if (nodes) {\n        return nodes;\n      }\n\n      this._reportError(el, `Translation unavailable for message id=\"${this.translations.digest(message)}\"`);\n    }\n\n    return [];\n  }\n\n  /**\n   * Add the node as a child of the block when:\n   * - we are in a block,\n   * - we are not inside a ICU message (those are handled separately),\n   * - the node is a \"direct child\" of the block\n   */\n  private mayBeAddBlockChildren(node: html.Node): void {\n    if (this.inI18nBlock && !this.inIcu && this.depth === this.blockStartDepth) {\n      this.blockChildren.push(node);\n    }\n  }\n\n  /**\n   * Marks the start of a section, see `_closeTranslatableSection`\n   */\n  private openTranslatableSection(node: html.Node): void {\n    if (this.isInTranslatableSection) {\n      this._reportError(node, \"Unexpected section start\");\n    } else {\n      this.msgCountAtSectionStart = this.messages.length;\n    }\n  }\n\n  /**\n   * A translatable section could be:\n   * - the content of translatable element,\n   * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n   */\n  private get isInTranslatableSection(): boolean {\n    return this.msgCountAtSectionStart !== void 0;\n  }\n\n  /**\n   * Terminates a section.\n   *\n   * If a section has only one significant children (comments not significant) then we should not\n   * keep the message from this children:\n   *\n   * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n   * - one for the <p> content with meaning and description,\n   * - another one for the ICU message.\n   *\n   * In this case the last message is discarded as it contains less information (the AST is\n   * otherwise identical).\n   *\n   * Note that we should still keep messages extracted from attributes inside the section (ie in the\n   * ICU message here)\n   */\n  private _closeTranslatableSection(node: html.Node, directChildren: html.Node[]): void {\n    if (!this.isInTranslatableSection) {\n      this._reportError(node, \"Unexpected section end\");\n      return;\n    }\n\n    const startIndex = this.msgCountAtSectionStart;\n    const significantChildren: number = directChildren.reduce(\n      (count: number, n: html.Node): number => count + (n instanceof html.Comment ? 0 : 1),\n      0\n    );\n\n    if (significantChildren === 1) {\n      for (let i = this.messages.length - 1; i >= startIndex!; i--) {\n        const ast = this.messages[i].nodes;\n        if (!(ast.length === 1 && ast[0] instanceof i18n.Text)) {\n          this.messages.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    this.msgCountAtSectionStart = undefined;\n  }\n\n  private _reportError(node: html.Node, msg: string): void {\n    this.errors.push(new I18nError(node.sourceSpan!, msg));\n  }\n}\n\nfunction getI18nAttr(p: html.Element): html.Attribute | null {\n  return p.attrs.find(attr => attr.name === _I18N_ATTR) || null;\n}\n"]}