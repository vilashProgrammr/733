{"version":3,"file":"extractor.js","sourceRoot":"","sources":["../../../lib/extractor/src/extractor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\r\nimport {existsSync, readFileSync, statSync} from \"fs\";\r\nimport * as glob from \"glob\";\r\nimport {AbstractAstParser} from \"./abstract-ast-parser\";\r\nimport {xliff2Digest, xliff2LoadToXml, xliff2Write} from \"../../src/serializers/xliff2\";\r\nimport {xliffDigest, xliffLoadToXml, xliffWrite} from \"../../src/serializers/xliff\";\r\nimport {xtbDigest, xtbMapper} from \"../../src/serializers/xtb\";\r\nimport {Message} from \"../../src/ast/i18n_ast\";\r\nimport {xmbLoadToXml, xmbWrite} from \"../../src/serializers/xmb\";\r\nimport {Node} from \"../../src/serializers/xml_helper\";\r\nimport {MessageBundle} from \"./message-bundle\";\r\nimport {XmlMessagesById} from \"../../src/serializers/serializer\";\r\nimport {I18nDef} from \"../../src/i18n-polyfill\";\r\n\r\nexport function getAst(paths: string[]): {[url: string]: (string | I18nDef)[]} {\r\n  const files = [];\r\n  paths.forEach(path => {\r\n    files.push(...glob.sync(path));\r\n  });\r\n  const parser = new ServiceParser();\r\n  const collection: {[url: string]: (string | I18nDef)[]} = {};\r\n  files.forEach(path => {\r\n    if (statSync(path).isDirectory) {\r\n      // this._options.verbose && this._out(chalk.gray('- %s'), path);\r\n      const contents: string = readFileSync(path, \"utf-8\");\r\n      const entries = parser.extract(contents, path);\r\n      if (entries.length) {\r\n        collection[path] = entries;\r\n      }\r\n    }\r\n  });\r\n  // save file\r\n  return collection;\r\n}\r\n\r\n// source: https://github.com/biesbjerg/ngx-translate-extract/blob/master/src/parsers/service.parser.ts\r\nexport class ServiceParser extends AbstractAstParser {\r\n  protected _sourceFile: ts.SourceFile;\r\n\r\n  public extract(contents: string, path?: string): (string | I18nDef)[] {\r\n    const entries: (string | I18nDef)[] = [];\r\n\r\n    this._sourceFile = this._createSourceFile(path, contents);\r\n    const classNodes = this._findClassNodes(this._sourceFile);\r\n    classNodes.forEach(classNode => {\r\n      const constructorNode = this._findConstructorNode(classNode);\r\n      if (!constructorNode) {\r\n        return;\r\n      }\r\n\r\n      const propertyName: string = this._findTranslateServicePropertyName(constructorNode);\r\n      if (!propertyName) {\r\n        return;\r\n      }\r\n\r\n      const callNodes = this._findCallNodes(classNode, propertyName);\r\n      callNodes.forEach(callNode => {\r\n        entries.push(...this._getCallArgStrings(callNode));\r\n      });\r\n    });\r\n\r\n    return entries;\r\n  }\r\n\r\n  /**\r\n   * Detect what the TranslateService instance property\r\n   * is called by inspecting constructor arguments\r\n   */\r\n  protected _findTranslateServicePropertyName(constructorNode: ts.ConstructorDeclaration): string {\r\n    if (!constructorNode) {\r\n      return null;\r\n    }\r\n\r\n    const result = constructorNode.parameters.find(parameter => {\r\n      // Skip if visibility modifier is not present (we want it set as an instance property)\r\n      /*if (!parameter.modifiers) {\r\n        return false;\r\n      }*/\r\n\r\n      // Parameter has no type\r\n      if (!parameter.type) {\r\n        return false;\r\n      }\r\n\r\n      // Make sure className is of the correct type\r\n      const parameterType: ts.Identifier = (parameter.type as ts.TypeReferenceNode).typeName as ts.Identifier;\r\n      if (!parameterType) {\r\n        return false;\r\n      }\r\n      const className: string = parameterType.text;\r\n\r\n      return className === \"I18n\";\r\n    });\r\n\r\n    if (result) {\r\n      return (result.name as ts.Identifier).text;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find class nodes\r\n   */\r\n  protected _findClassNodes(node: ts.Node): ts.ClassDeclaration[] {\r\n    return this._findNodes(node, ts.SyntaxKind.ClassDeclaration) as ts.ClassDeclaration[];\r\n  }\r\n\r\n  /**\r\n   * Find constructor\r\n   */\r\n  protected _findConstructorNode(node: ts.ClassDeclaration): ts.ConstructorDeclaration {\r\n    const constructorNodes = this._findNodes(node, ts.SyntaxKind.Constructor) as ts.ConstructorDeclaration[];\r\n    if (constructorNodes) {\r\n      return constructorNodes[0];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find all calls to TranslateService methods\r\n   */\r\n  protected _findCallNodes(node: ts.Node, propertyIdentifier: string): ts.CallExpression[] {\r\n    let callNodes = this._findNodes(node, ts.SyntaxKind.CallExpression) as ts.CallExpression[];\r\n    callNodes = callNodes.filter(callNode => {\r\n      // Only call expressions with arguments\r\n      if (callNode.arguments.length < 1) {\r\n        return false;\r\n      }\r\n      const expression = callNode.expression as ts.PropertyAccessExpression & ts.Identifier;\r\n      return expression.text === propertyIdentifier || (expression.name && expression.name.text === propertyIdentifier);\r\n    });\r\n\r\n    return callNodes;\r\n  }\r\n}\r\n\r\nexport function getFileContent(messages: {[url: string]: (string|I18nDef)[]}, sourcePath: string, format?: string, locale = \"en\"): string {\r\n  let loadFct: (content: string, url: string) => XmlMessagesById;\r\n  let writeFct: (messages: Message[], locale: string | null, existingNodes: Node[]) => string;\r\n  let digest: (message: Message) => string;\r\n  let createMapper = (message: Message) => null;\r\n  format = (format || \"xlf\").toLowerCase();\r\n  switch (format) {\r\n    case \"xmb\":\r\n      loadFct = xmbLoadToXml;\r\n      writeFct = xmbWrite;\r\n      digest = xtbDigest;\r\n      createMapper = xtbMapper;\r\n      break;\r\n    case \"xliff2\":\r\n    case \"xlf2\":\r\n      loadFct = xliff2LoadToXml;\r\n      writeFct = xliff2Write;\r\n      digest = xliff2Digest;\r\n      break;\r\n    case \"xliff\":\r\n    case \"xlf\":\r\n    default:\r\n      loadFct = xliffLoadToXml;\r\n      writeFct = xliffWrite;\r\n      digest = xliffDigest;\r\n      break;\r\n  }\r\n\r\n  let xmlMessagesById: XmlMessagesById = {};\r\n  if (existsSync(sourcePath)) {\r\n    xmlMessagesById = loadFct(readFileSync(sourcePath, {encoding: \"utf8\"}), sourcePath);\r\n  }\r\n  const messageBundle = new MessageBundle(locale);\r\n  Object.keys(messages).forEach(url => {\r\n    messages[url].forEach(entry => messageBundle.updateFromTemplate(entry, url));\r\n  });\r\n  return messageBundle.write(writeFct, digest, xmlMessagesById, createMapper);\r\n}\r\n"]}