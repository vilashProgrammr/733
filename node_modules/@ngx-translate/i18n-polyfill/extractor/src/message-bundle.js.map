{"version":3,"file":"message-bundle.js","sourceRoot":"","sources":["../../../lib/extractor/src/message-bundle.ts"],"names":[],"mappings":"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","sourcesContent":["import {PlaceholderMapper, XmlMessagesById} from \"../../src/serializers/serializer\";\nimport * as i18n from \"../../src/ast/i18n_ast\";\nimport {Node} from \"../../src/serializers/xml_helper\";\nimport {HtmlParser} from \"../../src/parser/html\";\nimport {I18nDef} from \"../../src/i18n-polyfill\";\n\nexport class MessageBundle {\n  messages: i18n.Message[] = [];\n  private htmlParser = new HtmlParser();\n\n  constructor(private locale: string | null = null) {}\n\n  updateFromTemplate(template: string | I18nDef, url: string): i18n.Message[] {\n    const str = typeof template === \"string\" ? template : template.value;\n    const htmlParserResult = this.htmlParser.parse(str, url, true);\n\n    if (htmlParserResult.errors.length) {\n      throw htmlParserResult.errors;\n    }\n\n    const i18nParserResult = this.htmlParser.extractMessages(htmlParserResult.rootNodes);\n\n    if (i18nParserResult.errors.length) {\n      throw i18nParserResult.errors;\n    }\n\n    if (typeof template !== \"string\") {\n      i18nParserResult.messages[0].id = template.id || \"\";\n      i18nParserResult.messages[0].meaning = template.meaning || \"\";\n      i18nParserResult.messages[0].description = template.description || \"\";\n    }\n\n    this.messages = this.messages.concat(i18nParserResult.messages);\n    return this.messages;\n  }\n\n  // Return the message in the internal format\n  // The public (serialized) format might be different, see the `write` method.\n  getMessages(): i18n.Message[] {\n    return this.messages;\n  }\n\n  write(\n    write: (messages: i18n.Message[], locale: string | null, existingNodes?: Node[]) => string,\n    digest: (message: i18n.Message) => string,\n    xmlMessagesById?: XmlMessagesById,\n    createMapper?: (messages: i18n.Message) => PlaceholderMapper,\n    filterSources?: (path: string) => string\n  ): string {\n    const messages: {[id: string]: i18n.Message} = {};\n    const existingMessages = xmlMessagesById ? Object.keys(xmlMessagesById) : [];\n\n    // Deduplicate messages based on their ID\n    this.messages.forEach(message => {\n      const id = digest(message);\n      // todo merge sources somehow\n      if (existingMessages.indexOf(id) === -1) {\n        if (!messages.hasOwnProperty(id)) {\n          messages[id] = message;\n        } else {\n          messages[id].sources.push(...message.sources);\n        }\n      }\n    });\n\n    // Transform placeholder names using the serializer mapping\n    const msgList = Object.keys(messages).map(id => {\n      const src = messages[id];\n      const nodes = createMapper ? new MapPlaceholderNames().convert(src.nodes, createMapper(messages[id])) : src.nodes;\n      const transformedMessage = new i18n.Message(nodes, {}, {}, src.meaning, src.description, id);\n      transformedMessage.sources = src.sources;\n      if (filterSources) {\n        transformedMessage.sources.forEach(\n          (source: i18n.MessageSpan) => (source.filePath = filterSources(source.filePath))\n        );\n      }\n      return transformedMessage;\n    });\n    return write(msgList, this.locale, existingMessages.map(id => xmlMessagesById[id]));\n  }\n}\n\n// Transform an i18n AST by renaming the placeholder nodes with the given mapper\nclass MapPlaceholderNames extends i18n.CloneVisitor {\n  convert(nodes: i18n.Node[], mapper: PlaceholderMapper): i18n.Node[] {\n    return mapper ? nodes.map(n => n.visit(this, mapper)) : nodes;\n  }\n\n  visitTagPlaceholder(ph: i18n.TagPlaceholder, mapper: PlaceholderMapper): i18n.TagPlaceholder {\n    const startName = mapper.toPublicName(ph.startName)!;\n    const closeName = ph.closeName ? mapper.toPublicName(ph.closeName)! : ph.closeName;\n    const children = ph.children.map(n => n.visit(this, mapper));\n    return new i18n.TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);\n  }\n\n  visitPlaceholder(ph: i18n.Placeholder, mapper: PlaceholderMapper): i18n.Placeholder {\n    return new i18n.Placeholder(ph.value, mapper.toPublicName(ph.name)!, ph.sourceSpan);\n  }\n\n  visitIcuPlaceholder(ph: i18n.IcuPlaceholder, mapper: PlaceholderMapper): i18n.IcuPlaceholder {\n    return new i18n.IcuPlaceholder(ph.value, mapper.toPublicName(ph.name)!, ph.sourceSpan);\n  }\n}\n"]}