{"version":3,"file":"ngx-extractor.js","sourceRoot":"","sources":["../../lib/extractor/ngx-extractor.ts"],"names":[],"mappings":";;;AAEA,+CAAuD;AACvD,6BAA6B;AAC7B,+BAA+B;AAC/B,2BAA6C;AAE7C,cAAqB,IAAI;IACvB,MAAM,GAAG,GAAG,KAAK;SACd,KAAK,CAAC,kEAAkE,CAAC;SACzE,IAAI,CAAC,MAAM,CAAC;SACZ,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC;SAClB,MAAM,CAAC,OAAO,EAAE;QACf,KAAK,EAAE,GAAG;QACV,QAAQ,EACN,4GAA4G;QAC9G,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG;QACxB,IAAI,EAAE,OAAO;QACb,SAAS,EAAE,IAAI;KAChB,CAAC;SACD,KAAK,CAAC,OAAO,CAAC,EAAE;QACf,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;YACrC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE9B,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjC,MAAM,IAAI,KAAK,CAAC,8EAA8E,IAAI,GAAG,CAAC,CAAC;YACzG,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC;IACd,CAAC,CAAC;SACD,MAAM,CAAC,UAAU,EAAE;QAClB,KAAK,EAAE,GAAG;QACV,QAAQ,EACN,+HAA+H;QACjI,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,IAAI;KACf,CAAC;SACD,MAAM,CAAC,QAAQ,EAAE;QAChB,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,eAAe;QACzB,OAAO,EAAE,KAAK;QACd,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC;KAChC,CAAC;SACD,MAAM,CAAC,QAAQ,EAAE;QAChB,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,oCAAoC;QAC9C,OAAO,EAAE,IAAI;QACb,IAAI,EAAE,QAAQ;KACf,CAAC;SACD,WAAW,CAAC,IAAI,CAAC;SACjB,KAAK,CAAC,IAAI,CAAC,CAAC;IAEf,MAAM,QAAQ,GAAG,kBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnC,MAAM,OAAO,GAAG,0BAAc,CAAC,QAAQ,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IAC9E,EAAE,CAAC,CAAC,CAAC,eAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,OAAO,qCAAqC,CAAC,CAAC;IACzE,CAAC;IACD,kBAAa,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,EAAC,QAAQ,EAAE,MAAM,EAAC,CAAC,CAAC;IACxD,MAAM,CAAC,CAAC,CAAC;AACX,CAAC;AAtDD,oBAsDC;AAED,kBAAkB;AAClB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;IAC5B,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC","sourcesContent":["#!/usr/bin/env node\r\n\r\nimport {getAst, getFileContent} from \"./src/extractor\";\r\nimport * as glob from \"glob\";\r\nimport * as yargs from \"yargs\";\r\nimport {existsSync, writeFileSync} from \"fs\";\r\n\r\nexport function main(args) {\r\n  const cli = yargs\r\n    .usage(\"Extract strings from files for translation.\\nUsage: $0 [options]\")\r\n    .help(\"help\")\r\n    .alias(\"help\", \"h\")\r\n    .option(\"input\", {\r\n      alias: \"i\",\r\n      describe:\r\n        \"Paths you would like to extract strings from. You can use path expansion, glob patterns and multiple paths\",\r\n      default: process.env.PWD,\r\n      type: \"array\",\r\n      normalize: true\r\n    })\r\n    .check(options => {\r\n      options.input.forEach((path: string) => {\r\n        const files = glob.sync(path);\r\n\r\n        if (!files || files.length === 0) {\r\n          throw new Error(`The path you supplied was not found or did not contain any matching file: '${path}'`);\r\n        }\r\n      });\r\n      return true;\r\n    })\r\n    .option(\"out-file\", {\r\n      alias: \"o\",\r\n      describe:\r\n        \"Path and name of the file where you would like to save extracted strings. If the file exists then the messages will be merged\",\r\n      type: \"string\",\r\n      normalize: true,\r\n      required: true\r\n    })\r\n    .option(\"format\", {\r\n      alias: \"f\",\r\n      describe: \"Output format\",\r\n      default: \"xlf\",\r\n      type: \"string\",\r\n      choices: [\"xlf\", \"xlf2\", \"xmb\"]\r\n    })\r\n    .option(\"locale\", {\r\n      alias: \"l\",\r\n      describe: \"Source language of the application\",\r\n      default: \"en\",\r\n      type: \"string\",\r\n    })\r\n    .exitProcess(true)\r\n    .parse(args);\r\n\r\n  const messages = getAst(cli.input);\r\n  const content = getFileContent(messages, cli.outFile, cli.format, cli.locale);\r\n  if (!existsSync(cli.outFile)) {\r\n    console.log(`File \"${cli.outFile}\" doesn't exist, it will be created`);\r\n  }\r\n  writeFileSync(cli.outFile, content, {encoding: \"utf8\"});\r\n  return 0;\r\n}\r\n\r\n// CLI entry point\r\nif (require.main === module) {\r\n  const args = process.argv.slice(2);\r\n  process.exitCode = main(args);\r\n}\r\n"]}