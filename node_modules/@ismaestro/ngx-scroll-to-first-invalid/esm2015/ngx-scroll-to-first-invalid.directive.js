/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input } from '@angular/core';
import { NgForm } from '@angular/forms';
export class NgxScrollToFirstInvalidDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    static scrollToElement(element) {
        if (element) {
            /** @type {?} */
            const distance = window.pageYOffset - Math.abs(element.getBoundingClientRect().y);
            window.scroll({
                behavior: 'smooth',
                left: 0,
                top: element.getBoundingClientRect().top + window.scrollY - 150
            });
            setTimeout((/**
             * @return {?}
             */
            () => {
                element.focus();
                element.blur(); // Trigger error messages
                element.focus();
            }), distance);
        }
    }
    /**
     * @param {?} formGroup
     * @return {?}
     */
    static markFormGroupTouched(formGroup) {
        ((/** @type {?} */ (Object))).values(formGroup.controls).forEach((/**
         * @param {?} control
         * @return {?}
         */
        control => {
            control.markAsTouched();
            if (control.controls) {
                NgxScrollToFirstInvalidDirective.markFormGroupTouched(control);
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSubmit(event) {
        event.preventDefault();
        if (!this.formGroup.valid) {
            NgxScrollToFirstInvalidDirective.markFormGroupTouched(this.formGroup);
            /** @type {?} */
            const formControlInvalid = this.el.nativeElement.querySelector('.ng-invalid');
            if (formControlInvalid) {
                return NgxScrollToFirstInvalidDirective.scrollToElement(formControlInvalid);
            }
            else {
                // The first element is the global form and here we are looking for the first nested form
                /** @type {?} */
                const formGroupInvalid = this.el.nativeElement.querySelectorAll('form .ng-invalid');
                if (formGroupInvalid && formGroupInvalid.length) {
                    return NgxScrollToFirstInvalidDirective.scrollToElement(formGroupInvalid[0]);
                }
            }
            return NgxScrollToFirstInvalidDirective.scrollToElement(this.el.nativeElement);
        }
    }
}
NgxScrollToFirstInvalidDirective.decorators = [
    { type: Directive, args: [{ selector: '[ngxScrollToFirstInvalid]' },] }
];
/** @nocollapse */
NgxScrollToFirstInvalidDirective.ctorParameters = () => [
    { type: ElementRef }
];
NgxScrollToFirstInvalidDirective.propDecorators = {
    formGroup: [{ type: Input }],
    onSubmit: [{ type: HostListener, args: ['submit', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    NgxScrollToFirstInvalidDirective.prototype.formGroup;
    /**
     * @type {?}
     * @private
     */
    NgxScrollToFirstInvalidDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNjcm9sbC10by1maXJzdC1pbnZhbGlkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpc21hZXN0cm8vbmd4LXNjcm9sbC10by1maXJzdC1pbnZhbGlkLyIsInNvdXJjZXMiOlsibmd4LXNjcm9sbC10by1maXJzdC1pbnZhbGlkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHdEMsTUFBTSxPQUFPLGdDQUFnQzs7OztJQUczQyxZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUNsQyxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBTztRQUM1QixJQUFJLE9BQU8sRUFBRTs7a0JBQ0wsUUFBUSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFakYsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDWixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsSUFBSSxFQUFFLENBQUM7Z0JBQ1AsR0FBRyxFQUFFLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUc7YUFDaEUsQ0FBQyxDQUFDO1lBRUgsVUFBVTs7O1lBQUMsR0FBRyxFQUFFO2dCQUNkLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDaEIsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMseUJBQXlCO2dCQUN6QyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEIsQ0FBQyxHQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ2Q7SUFDSCxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTO1FBQ25DLENBQUMsbUJBQUssTUFBTSxFQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUN6RCxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7WUFFeEIsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO2dCQUNwQixnQ0FBZ0MsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNoRTtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFHRCxRQUFRLENBQUMsS0FBSztRQUNaLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV2QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUU7WUFDekIsZ0NBQWdDLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDOztrQkFFaEUsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQztZQUU3RSxJQUFJLGtCQUFrQixFQUFFO2dCQUN0QixPQUFPLGdDQUFnQyxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQzdFO2lCQUFNOzs7c0JBRUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUM7Z0JBQ25GLElBQUksZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxFQUFFO29CQUMvQyxPQUFPLGdDQUFnQyxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM5RTthQUNGO1lBRUQsT0FBTyxnQ0FBZ0MsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNoRjtJQUNILENBQUM7OztZQXhERixTQUFTLFNBQUMsRUFBQyxRQUFRLEVBQUUsMkJBQTJCLEVBQUM7Ozs7WUFIL0IsVUFBVTs7O3dCQUsxQixLQUFLO3VCQWlDTCxZQUFZLFNBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDOzs7O0lBakNsQyxxREFBMkI7Ozs7O0lBRWYsOENBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ0Zvcm19IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbbmd4U2Nyb2xsVG9GaXJzdEludmFsaWRdJ30pXG5leHBvcnQgY2xhc3MgTmd4U2Nyb2xsVG9GaXJzdEludmFsaWREaXJlY3RpdmUge1xuICBASW5wdXQoKSBmb3JtR3JvdXA6IE5nRm9ybTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBzdGF0aWMgc2Nyb2xsVG9FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgY29uc3QgZGlzdGFuY2UgPSB3aW5kb3cucGFnZVlPZmZzZXQgLSBNYXRoLmFicyhlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnkpO1xuXG4gICAgICB3aW5kb3cuc2Nyb2xsKHtcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICsgd2luZG93LnNjcm9sbFkgLSAxNTBcbiAgICAgIH0pO1xuXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZWxlbWVudC5mb2N1cygpO1xuICAgICAgICBlbGVtZW50LmJsdXIoKTsgLy8gVHJpZ2dlciBlcnJvciBtZXNzYWdlc1xuICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG4gICAgICB9LCBkaXN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIG1hcmtGb3JtR3JvdXBUb3VjaGVkKGZvcm1Hcm91cCkge1xuICAgICg8YW55Pk9iamVjdCkudmFsdWVzKGZvcm1Hcm91cC5jb250cm9scykuZm9yRWFjaChjb250cm9sID0+IHtcbiAgICAgIGNvbnRyb2wubWFya0FzVG91Y2hlZCgpO1xuXG4gICAgICBpZiAoY29udHJvbC5jb250cm9scykge1xuICAgICAgICBOZ3hTY3JvbGxUb0ZpcnN0SW52YWxpZERpcmVjdGl2ZS5tYXJrRm9ybUdyb3VwVG91Y2hlZChjb250cm9sKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ3N1Ym1pdCcsIFsnJGV2ZW50J10pXG4gIG9uU3VibWl0KGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGlmICghdGhpcy5mb3JtR3JvdXAudmFsaWQpIHtcbiAgICAgIE5neFNjcm9sbFRvRmlyc3RJbnZhbGlkRGlyZWN0aXZlLm1hcmtGb3JtR3JvdXBUb3VjaGVkKHRoaXMuZm9ybUdyb3VwKTtcblxuICAgICAgY29uc3QgZm9ybUNvbnRyb2xJbnZhbGlkID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZy1pbnZhbGlkJyk7XG5cbiAgICAgIGlmIChmb3JtQ29udHJvbEludmFsaWQpIHtcbiAgICAgICAgcmV0dXJuIE5neFNjcm9sbFRvRmlyc3RJbnZhbGlkRGlyZWN0aXZlLnNjcm9sbFRvRWxlbWVudChmb3JtQ29udHJvbEludmFsaWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IGVsZW1lbnQgaXMgdGhlIGdsb2JhbCBmb3JtIGFuZCBoZXJlIHdlIGFyZSBsb29raW5nIGZvciB0aGUgZmlyc3QgbmVzdGVkIGZvcm1cbiAgICAgICAgY29uc3QgZm9ybUdyb3VwSW52YWxpZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtIC5uZy1pbnZhbGlkJyk7XG4gICAgICAgIGlmIChmb3JtR3JvdXBJbnZhbGlkICYmIGZvcm1Hcm91cEludmFsaWQubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIE5neFNjcm9sbFRvRmlyc3RJbnZhbGlkRGlyZWN0aXZlLnNjcm9sbFRvRWxlbWVudChmb3JtR3JvdXBJbnZhbGlkWzBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gTmd4U2Nyb2xsVG9GaXJzdEludmFsaWREaXJlY3RpdmUuc2Nyb2xsVG9FbGVtZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG59XG4iXX0=