(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@ismaestro/ngx-scroll-to-first-invalid', ['exports', '@angular/core', '@angular/forms'], factory) :
    (global = global || self, factory((global.ismaestro = global.ismaestro || {}, global.ismaestro['ngx-scroll-to-first-invalid'] = {}), global.ng.core));
}(this, function (exports, core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxScrollToFirstInvalidDirective = /** @class */ (function () {
        function NgxScrollToFirstInvalidDirective(el) {
            this.el = el;
        }
        /**
         * @param {?} element
         * @return {?}
         */
        NgxScrollToFirstInvalidDirective.scrollToElement = /**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element) {
                /** @type {?} */
                var distance = window.pageYOffset - Math.abs(element.getBoundingClientRect().y);
                window.scroll({
                    behavior: 'smooth',
                    left: 0,
                    top: element.getBoundingClientRect().top + window.scrollY - 150
                });
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    element.focus();
                    element.blur(); // Trigger error messages
                    element.focus();
                }), distance);
            }
        };
        /**
         * @param {?} formGroup
         * @return {?}
         */
        NgxScrollToFirstInvalidDirective.markFormGroupTouched = /**
         * @param {?} formGroup
         * @return {?}
         */
        function (formGroup) {
            ((/** @type {?} */ (Object))).values(formGroup.controls).forEach((/**
             * @param {?} control
             * @return {?}
             */
            function (control) {
                control.markAsTouched();
                if (control.controls) {
                    NgxScrollToFirstInvalidDirective.markFormGroupTouched(control);
                }
            }));
        };
        /**
         * @param {?} event
         * @return {?}
         */
        NgxScrollToFirstInvalidDirective.prototype.onSubmit = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.preventDefault();
            if (!this.formGroup.valid) {
                NgxScrollToFirstInvalidDirective.markFormGroupTouched(this.formGroup);
                /** @type {?} */
                var formControlInvalid = this.el.nativeElement.querySelector('.ng-invalid');
                if (formControlInvalid) {
                    return NgxScrollToFirstInvalidDirective.scrollToElement(formControlInvalid);
                }
                else {
                    // The first element is the global form and here we are looking for the first nested form
                    /** @type {?} */
                    var formGroupInvalid = this.el.nativeElement.querySelectorAll('form .ng-invalid');
                    if (formGroupInvalid && formGroupInvalid.length) {
                        return NgxScrollToFirstInvalidDirective.scrollToElement(formGroupInvalid[0]);
                    }
                }
                return NgxScrollToFirstInvalidDirective.scrollToElement(this.el.nativeElement);
            }
        };
        NgxScrollToFirstInvalidDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[ngxScrollToFirstInvalid]' },] }
        ];
        /** @nocollapse */
        NgxScrollToFirstInvalidDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        NgxScrollToFirstInvalidDirective.propDecorators = {
            formGroup: [{ type: core.Input }],
            onSubmit: [{ type: core.HostListener, args: ['submit', ['$event'],] }]
        };
        return NgxScrollToFirstInvalidDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxScrollToFirstInvalidModule = /** @class */ (function () {
        function NgxScrollToFirstInvalidModule() {
        }
        NgxScrollToFirstInvalidModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [NgxScrollToFirstInvalidDirective],
                        exports: [NgxScrollToFirstInvalidDirective]
                    },] }
        ];
        return NgxScrollToFirstInvalidModule;
    }());

    exports.NgxScrollToFirstInvalidModule = NgxScrollToFirstInvalidModule;
    exports.Éµa = NgxScrollToFirstInvalidDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ismaestro-ngx-scroll-to-first-invalid.umd.js.map
