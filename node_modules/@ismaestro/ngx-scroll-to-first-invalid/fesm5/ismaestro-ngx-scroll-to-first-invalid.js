import { Directive, ElementRef, Input, HostListener, NgModule } from '@angular/core';
import '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxScrollToFirstInvalidDirective = /** @class */ (function () {
    function NgxScrollToFirstInvalidDirective(el) {
        this.el = el;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    NgxScrollToFirstInvalidDirective.scrollToElement = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        if (element) {
            /** @type {?} */
            var distance = window.pageYOffset - Math.abs(element.getBoundingClientRect().y);
            window.scroll({
                behavior: 'smooth',
                left: 0,
                top: element.getBoundingClientRect().top + window.scrollY - 150
            });
            setTimeout((/**
             * @return {?}
             */
            function () {
                element.focus();
                element.blur(); // Trigger error messages
                element.focus();
            }), distance);
        }
    };
    /**
     * @param {?} formGroup
     * @return {?}
     */
    NgxScrollToFirstInvalidDirective.markFormGroupTouched = /**
     * @param {?} formGroup
     * @return {?}
     */
    function (formGroup) {
        ((/** @type {?} */ (Object))).values(formGroup.controls).forEach((/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            control.markAsTouched();
            if (control.controls) {
                NgxScrollToFirstInvalidDirective.markFormGroupTouched(control);
            }
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NgxScrollToFirstInvalidDirective.prototype.onSubmit = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        if (!this.formGroup.valid) {
            NgxScrollToFirstInvalidDirective.markFormGroupTouched(this.formGroup);
            /** @type {?} */
            var formControlInvalid = this.el.nativeElement.querySelector('.ng-invalid');
            if (formControlInvalid) {
                return NgxScrollToFirstInvalidDirective.scrollToElement(formControlInvalid);
            }
            else {
                // The first element is the global form and here we are looking for the first nested form
                /** @type {?} */
                var formGroupInvalid = this.el.nativeElement.querySelectorAll('form .ng-invalid');
                if (formGroupInvalid && formGroupInvalid.length) {
                    return NgxScrollToFirstInvalidDirective.scrollToElement(formGroupInvalid[0]);
                }
            }
            return NgxScrollToFirstInvalidDirective.scrollToElement(this.el.nativeElement);
        }
    };
    NgxScrollToFirstInvalidDirective.decorators = [
        { type: Directive, args: [{ selector: '[ngxScrollToFirstInvalid]' },] }
    ];
    /** @nocollapse */
    NgxScrollToFirstInvalidDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NgxScrollToFirstInvalidDirective.propDecorators = {
        formGroup: [{ type: Input }],
        onSubmit: [{ type: HostListener, args: ['submit', ['$event'],] }]
    };
    return NgxScrollToFirstInvalidDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxScrollToFirstInvalidModule = /** @class */ (function () {
    function NgxScrollToFirstInvalidModule() {
    }
    NgxScrollToFirstInvalidModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgxScrollToFirstInvalidDirective],
                    exports: [NgxScrollToFirstInvalidDirective]
                },] }
    ];
    return NgxScrollToFirstInvalidModule;
}());

export { NgxScrollToFirstInvalidModule, NgxScrollToFirstInvalidDirective as Éµa };
//# sourceMappingURL=ismaestro-ngx-scroll-to-first-invalid.js.map
