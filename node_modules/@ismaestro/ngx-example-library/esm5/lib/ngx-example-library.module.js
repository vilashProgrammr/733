/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { APP_INITIALIZER, InjectionToken, NgModule } from '@angular/core';
import { NgxExampleLibraryComponent } from './ngx-example-library.component';
import { NgxExampleLibraryService } from './ngx-example-library.service';
/** @type {?} */
export var OPTIONS = new InjectionToken('OPTIONS');
/**
 * @record
 */
export function SampleModuleOptions() { }
/** @type {?} */
SampleModuleOptions.prototype.config;
/**
 * @param {?} options
 * @return {?}
 */
export function initialize(options) {
    console.log('Angular library has started with this options: ', options);
    return function () {
    };
}
var NgxExampleLibraryModule = /** @class */ (function () {
    function NgxExampleLibraryModule() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    NgxExampleLibraryModule.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        return {
            ngModule: NgxExampleLibraryModule,
            providers: [
                { provide: OPTIONS, useValue: options },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initialize,
                    deps: [OPTIONS],
                    multi: true
                },
                NgxExampleLibraryService
            ]
        };
    };
    NgxExampleLibraryModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [
                        NgxExampleLibraryComponent
                    ],
                    exports: [
                        NgxExampleLibraryComponent
                    ]
                },] },
    ];
    return NgxExampleLibraryModule;
}());
export { NgxExampleLibraryModule };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWV4YW1wbGUtbGlicmFyeS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaXNtYWVzdHJvL25neC1leGFtcGxlLWxpYnJhcnkvIiwic291cmNlcyI6WyJsaWIvbmd4LWV4YW1wbGUtbGlicmFyeS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxlQUFlLEVBQUUsY0FBYyxFQUF1QixRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0YsT0FBTyxFQUFDLDBCQUEwQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDM0UsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sK0JBQStCLENBQUM7O0FBRXZFLFdBQWEsT0FBTyxHQUFHLElBQUksY0FBYyxDQUFTLFNBQVMsQ0FBQyxDQUFDOzs7Ozs7Ozs7OztBQU03RCxNQUFNLHFCQUFxQixPQUFZO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaURBQWlELEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEUsTUFBTSxDQUFDO0tBQ04sQ0FBQztDQUNIOzs7Ozs7OztJQWFRLCtCQUFPOzs7O0lBQWQsVUFBZSxPQUE2QjtRQUMxQyxNQUFNLENBQUM7WUFDTCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLFNBQVMsRUFBRTtnQkFDVCxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBQztnQkFDckM7b0JBQ0UsT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxVQUFVO29CQUN0QixJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7b0JBQ2YsS0FBSyxFQUFFLElBQUk7aUJBQ1o7Z0JBQ0Qsd0JBQXdCO2FBQ3pCO1NBQ0YsQ0FBQztLQUNIOztnQkF6QkYsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxFQUNSO29CQUNELFlBQVksRUFBRTt3QkFDWiwwQkFBMEI7cUJBQzNCO29CQUNELE9BQU8sRUFBRTt3QkFDUCwwQkFBMEI7cUJBQzNCO2lCQUNGOztrQ0F6QkQ7O1NBMEJhLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QVBQX0lOSVRJQUxJWkVSLCBJbmplY3Rpb25Ub2tlbiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ3hFeGFtcGxlTGlicmFyeUNvbXBvbmVudH0gZnJvbSAnLi9uZ3gtZXhhbXBsZS1saWJyYXJ5LmNvbXBvbmVudCc7XG5pbXBvcnQge05neEV4YW1wbGVMaWJyYXJ5U2VydmljZX0gZnJvbSAnLi9uZ3gtZXhhbXBsZS1saWJyYXJ5LnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdPUFRJT05TJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FtcGxlTW9kdWxlT3B0aW9ucyB7XG4gIGNvbmZpZzoge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKG9wdGlvbnM6IGFueSkge1xuICBjb25zb2xlLmxvZygnQW5ndWxhciBsaWJyYXJ5IGhhcyBzdGFydGVkIHdpdGggdGhpcyBvcHRpb25zOiAnLCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgfTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOZ3hFeGFtcGxlTGlicmFyeUNvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgTmd4RXhhbXBsZUxpYnJhcnlDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hFeGFtcGxlTGlicmFyeU1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM/OiBTYW1wbGVNb2R1bGVPcHRpb25zKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hFeGFtcGxlTGlicmFyeU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7cHJvdmlkZTogT1BUSU9OUywgdXNlVmFsdWU6IG9wdGlvbnN9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGluaXRpYWxpemUsXG4gICAgICAgICAgZGVwczogW09QVElPTlNdLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIE5neEV4YW1wbGVMaWJyYXJ5U2VydmljZVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdfQ==