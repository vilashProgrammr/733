import { Injectable, Component, APP_INITIALIZER, InjectionToken, NgModule, defineInjectable } from '@angular/core';
import * as moment_ from 'moment';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxExampleLibraryService {
    constructor() {
    }
}
NgxExampleLibraryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxExampleLibraryService.ctorParameters = () => [];
/** @nocollapse */ NgxExampleLibraryService.ngInjectableDef = defineInjectable({ factory: function NgxExampleLibraryService_Factory() { return new NgxExampleLibraryService(); }, token: NgxExampleLibraryService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const moment = moment_;
class NgxExampleLibraryComponent {
    constructor() {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.date = moment().format('dddd, D MMMM, YYYY LT');
    }
}
NgxExampleLibraryComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ngx-example-library',
                template: `<span>{{date}}</span>`,
                styles: []
            },] },
];
/** @nocollapse */
NgxExampleLibraryComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const OPTIONS = new InjectionToken('OPTIONS');
/**
 * @param {?} options
 * @return {?}
 */
function initialize(options) {
    console.log('Angular library has started with this options: ', options);
    return function () {
    };
}
class NgxExampleLibraryModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: NgxExampleLibraryModule,
            providers: [
                { provide: OPTIONS, useValue: options },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initialize,
                    deps: [OPTIONS],
                    multi: true
                },
                NgxExampleLibraryService
            ]
        };
    }
}
NgxExampleLibraryModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [
                    NgxExampleLibraryComponent
                ],
                exports: [
                    NgxExampleLibraryComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxExampleLibraryService, NgxExampleLibraryComponent, OPTIONS, initialize, NgxExampleLibraryModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNtYWVzdHJvLW5neC1leGFtcGxlLWxpYnJhcnkuanMubWFwIiwic291cmNlcyI6WyJuZzovL0Bpc21hZXN0cm8vbmd4LWV4YW1wbGUtbGlicmFyeS9saWIvbmd4LWV4YW1wbGUtbGlicmFyeS5zZXJ2aWNlLnRzIiwibmc6Ly9AaXNtYWVzdHJvL25neC1leGFtcGxlLWxpYnJhcnkvbGliL25neC1leGFtcGxlLWxpYnJhcnkuY29tcG9uZW50LnRzIiwibmc6Ly9AaXNtYWVzdHJvL25neC1leGFtcGxlLWxpYnJhcnkvbGliL25neC1leGFtcGxlLWxpYnJhcnkubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEV4YW1wbGVMaWJyYXJ5U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cbn1cbiIsImltcG9ydCB7Q29tcG9uZW50LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgbW9tZW50XyBmcm9tICdtb21lbnQnO1xuXG5jb25zdCBtb21lbnQgPSBtb21lbnRfO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItbmd4LWV4YW1wbGUtbGlicmFyeScsXG4gIHRlbXBsYXRlOiBgPHNwYW4+e3tkYXRlfX08L3NwYW4+YCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hFeGFtcGxlTGlicmFyeUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGRhdGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZGF0ZSA9IG1vbWVudCgpLmZvcm1hdCgnZGRkZCwgRCBNTU1NLCBZWVlZIExUJyk7XG4gIH1cbn1cbiIsImltcG9ydCB7QVBQX0lOSVRJQUxJWkVSLCBJbmplY3Rpb25Ub2tlbiwgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtOZ3hFeGFtcGxlTGlicmFyeUNvbXBvbmVudH0gZnJvbSAnLi9uZ3gtZXhhbXBsZS1saWJyYXJ5LmNvbXBvbmVudCc7XG5pbXBvcnQge05neEV4YW1wbGVMaWJyYXJ5U2VydmljZX0gZnJvbSAnLi9uZ3gtZXhhbXBsZS1saWJyYXJ5LnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdPUFRJT05TJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FtcGxlTW9kdWxlT3B0aW9ucyB7XG4gIGNvbmZpZzoge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplKG9wdGlvbnM6IGFueSkge1xuICBjb25zb2xlLmxvZygnQW5ndWxhciBsaWJyYXJ5IGhhcyBzdGFydGVkIHdpdGggdGhpcyBvcHRpb25zOiAnLCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgfTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBOZ3hFeGFtcGxlTGlicmFyeUNvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgTmd4RXhhbXBsZUxpYnJhcnlDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hFeGFtcGxlTGlicmFyeU1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KG9wdGlvbnM/OiBTYW1wbGVNb2R1bGVPcHRpb25zKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBOZ3hFeGFtcGxlTGlicmFyeU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7cHJvdmlkZTogT1BUSU9OUywgdXNlVmFsdWU6IG9wdGlvbnN9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGluaXRpYWxpemUsXG4gICAgICAgICAgZGVwczogW09QVElPTlNdLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIE5neEV4YW1wbGVMaWJyYXJ5U2VydmljZVxuICAgICAgXVxuICAgIH07XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7SUFPRTtLQUNDOzs7WUFORixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7Ozs7Ozs7QUNKRDtBQUdBLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQztBQU92QjtJQUdFO0tBQ0M7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUN0RDs7O1lBYkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLE1BQU0sRUFBRSxFQUFFO2FBQ1g7Ozs7Ozs7OztBQ1REO0FBSUEsTUFBYSxPQUFPLEdBQUcsSUFBSSxjQUFjLENBQVMsU0FBUyxDQUFDLENBQUM7Ozs7O0FBTTdELG9CQUEyQixPQUFZO0lBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaURBQWlELEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEUsT0FBTztLQUNOLENBQUM7Q0FDSDtBQVlEOzs7OztJQUNFLE9BQU8sT0FBTyxDQUFDLE9BQTZCO1FBQzFDLE9BQU87WUFDTCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLFNBQVMsRUFBRTtnQkFDVCxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBQztnQkFDckM7b0JBQ0UsT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxVQUFVO29CQUN0QixJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUM7b0JBQ2YsS0FBSyxFQUFFLElBQUk7aUJBQ1o7Z0JBQ0Qsd0JBQXdCO2FBQ3pCO1NBQ0YsQ0FBQztLQUNIOzs7WUF6QkYsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxFQUNSO2dCQUNELFlBQVksRUFBRTtvQkFDWiwwQkFBMEI7aUJBQzNCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCwwQkFBMEI7aUJBQzNCO2FBQ0Y7Ozs7Ozs7Ozs7Ozs7OzsifQ==